
AVRASM ver. 2.1.30  C:\Users\Michael\Desktop\» —›Ã_ATMEGA_2020+\List\iks2017.asm Thu Mar 23 21:47:40 2023

C:\Users\Michael\Desktop\» —›Ã_ATMEGA_2020+\List\iks2017.asm(1090): warning: Register r4 already defined by the .DEF directive
C:\Users\Michael\Desktop\» —›Ã_ATMEGA_2020+\List\iks2017.asm(1091): warning: Register r5 already defined by the .DEF directive
C:\Users\Michael\Desktop\» —›Ã_ATMEGA_2020+\List\iks2017.asm(1092): warning: Register r6 already defined by the .DEF directive
C:\Users\Michael\Desktop\» —›Ã_ATMEGA_2020+\List\iks2017.asm(1093): warning: Register r7 already defined by the .DEF directive
C:\Users\Michael\Desktop\» —›Ã_ATMEGA_2020+\List\iks2017.asm(1094): warning: Register r8 already defined by the .DEF directive
C:\Users\Michael\Desktop\» —›Ã_ATMEGA_2020+\List\iks2017.asm(1095): warning: Register r9 already defined by the .DEF directive
C:\Users\Michael\Desktop\» —›Ã_ATMEGA_2020+\List\iks2017.asm(1096): warning: Register r10 already defined by the .DEF directive
C:\Users\Michael\Desktop\» —›Ã_ATMEGA_2020+\List\iks2017.asm(1097): warning: Register r11 already defined by the .DEF directive
C:\Users\Michael\Desktop\» —›Ã_ATMEGA_2020+\List\iks2017.asm(1098): warning: Register r12 already defined by the .DEF directive
C:\Users\Michael\Desktop\» —›Ã_ATMEGA_2020+\List\iks2017.asm(1099): warning: Register r13 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Release
                 ;Chip type              : ATmega128A
                 ;Program type           : Application
                 ;Clock frequency        : 11,059200 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Speed
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 1024 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega128A
                 	#pragma AVRPART MEMORY PROG_FLASH 131072
                 	#pragma AVRPART MEMORY EEPROM 4096
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 4096
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU RAMPZ=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU XMCRA=0x6D
                 	.EQU XMCRB=0x6C
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x10FF
                 	.EQU __DSTACK_SIZE=0x0400
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _WEIGHT_NULL=R4
                 	.DEF _WEIGHT_NULL_msb=R5
                 	.DEF _LOADCELL_NULL=R6
                 	.DEF _LOADCELL_NULL_msb=R7
                 	.DEF _DELTA_WEIGHT10KG=R8
                 	.DEF _DELTA_WEIGHT10KG_msb=R9
                 	.DEF _DELTA_LOADCELL10KG=R10
                 	.DEF _DELTA_LOADCELL10KG_msb=R11
                 	.DEF _R_IK=R12
                 	.DEF _R_IK_msb=R13
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 00a9 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 03cd 	JMP  _ext_int6_isr
000010 940c 0469 	JMP  _ext_int7_isr
000012 940c 0000 	JMP  0x00
000014 940c 0b09 	JMP  _timer2_ovf_isr
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0742 	JMP  _timer1_ovf_isr
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 07ef 	JMP  _usart0_rx_isr
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
000034 940c 0000 	JMP  0x00
000036 940c 0000 	JMP  0x00
000038 940c 0000 	JMP  0x00
00003a 940c 0000 	JMP  0x00
00003c 940c 09ef 	JMP  _usart1_rx_isr
00003e 940c 0000 	JMP  0x00
000040 940c 0000 	JMP  0x00
000042 940c 0000 	JMP  0x00
000044 940c 0000 	JMP  0x00
                 
                 _tbl10_G100:
000046 2710
000047 03e8
000048 0064
000049 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00004a 0001      	.DB  0x1,0x0
                 _tbl16_G100:
00004b 1000
00004c 0100
00004d 0010
00004e 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
00004f 1a60
000050 0829      	.DB  0x60,0x1A,0x29,0x8
000051 0320
000052 01db      	.DB  0x20,0x3,0xDB,0x1
000053 00ca      	.DB  0xCA,0x0
                 
                 _0x3:
000054 014d      	.DB  0x4D,0x1
                 _0x4:
C:\Users\Michael\Desktop\» —›Ã_ATMEGA_2020+\List\iks2017.asm(1159): warning: .cseg .db misalignment - padding zero byte
000055 000f      	.DB  0xF
                 _0x5:
000056 caf8
000057 0f85
000058 0001
000059 3a00      	.DB  0xF8,0xCA,0x85,0xF,0x1,0x0,0x0,0x3A
                 _0x6:
00005a 43f9
00005b 1434
00005c 0859
00005d 0400      	.DB  0xF9,0x43,0x34,0x14,0x59,0x8,0x0,0x4
00005e 274b      	.DB  0x4B,0x27
                 _0x7:
00005f 05f4      	.DB  0xF4,0x5
                 _0x8:
000060 1a67      	.DB  0x67,0x1A
                 _0x9:
C:\Users\Michael\Desktop\» —›Ã_ATMEGA_2020+\List\iks2017.asm(1170): warning: .cseg .db misalignment - padding zero byte
000061 00ff      	.DB  0xFF
                 _0xA:
000062 05ff
000063 0437
000064 0631
000065 0715      	.DB  0xFF,0x5,0x37,0x4,0x31,0x6,0x15,0x7
000066 0532
000067 4b50
000068 3b00
000069 1f3a      	.DB  0x32,0x5,0x50,0x4B,0x0,0x3B,0x3A,0x1F
00006a 1e16
00006b 3713
00006c 4e18
00006d 3245      	.DB  0x16,0x1E,0x13,0x37,0x18,0x4E,0x45,0x32
00006e 2300      	.DB  0x0,0x23
                 _0xB:
00006f 0001
000070 0001
000071 0001
C:\Users\Michael\Desktop\» —›Ã_ATMEGA_2020+\List\iks2017.asm(1177): warning: .cseg .db misalignment - padding zero byte
000072 0001      	.DB  0x1,0x0,0x1,0x0,0x1,0x0,0x1
                 _0xC:
000073 0001
000074 0001
000075 0001
C:\Users\Michael\Desktop\» —›Ã_ATMEGA_2020+\List\iks2017.asm(1179): warning: .cseg .db misalignment - padding zero byte
000076 0001      	.DB  0x1,0x0,0x1,0x0,0x1,0x0,0x1
                 _0xD:
000077 0320      	.DB  0x20,0x3
                 _0x23:
000078 4650
000079 0000
00007a 0000
00007b 0000      	.DB  0x50,0x46,0x0,0x0,0x0,0x0,0x0,0x0
00007c 0000
00007d 0000      	.DB  0x0,0x0,0x0,0x0
                 _0x0:
00007e 5441
00007f 4e2b
000080 4d41
000081 4945      	.DB  0x41,0x54,0x2B,0x4E,0x41,0x4D,0x45,0x49
000082 534b
000083 4d45
000084 3023
000085 0d30      	.DB  0x4B,0x53,0x45,0x4D,0x23,0x30,0x30,0xD
000086 000a      	.DB  0xA,0x0
                 
                 __GLOBAL_INI_TBL:
000087 000a      	.DW  0x0A
000088 0004      	.DW  0x04
000089 009e      	.DW  __REG_VARS*2
                 
00008a 0002      	.DW  0x02
00008b 0512      	.DW  _R_TK
00008c 00a8      	.DW  _0x3*2
                 
00008d 0001      	.DW  0x01
00008e 0514      	.DW  _ZADANIE_S
00008f 00aa      	.DW  _0x4*2
                 
000090 0008      	.DW  0x08
000091 0528      	.DW  _DEFAULT_SETUP_MAS
000092 00ac      	.DW  _0x5*2
                 
000093 000a      	.DW  0x0A
000094 0530      	.DW  _DEFAULT_CALIBR_MAS
000095 00b4      	.DW  _0x6*2
                 
000096 0001      	.DW  0x01
000097 053a      	.DW  _flag_transmission
000098 00c2      	.DW  _0x9*2
                 
000099 001a      	.DW  0x1A
00009a 0540      	.DW  _SEND_MAS
00009b 00c4      	.DW  _0xA*2
                 
00009c 0007      	.DW  0x07
00009d 0598      	.DW  _GPS_shir
00009e 00de      	.DW  _0xB*2
                 
00009f 0007      	.DW  0x07
0000a0 05a0      	.DW  _GPS_dolg
0000a1 00e6      	.DW  _0xC*2
                 
0000a2 0002      	.DW  0x02
0000a3 05d7      	.DW  _PID_I_S
0000a4 00ee      	.DW  _0xD*2
                 
0000a5 0012      	.DW  0x12
0000a6 0500      	.DW  _0x26
0000a7 00fc      	.DW  _0x0*2
                 
                 _0xFFFFFFFF:
0000a8 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
0000a9 94f8      	CLI
0000aa 27ee      	CLR  R30
0000ab bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
0000ac e0f1      	LDI  R31,1
0000ad bff5      	OUT  MCUCR,R31
0000ae bfe5      	OUT  MCUCR,R30
0000af 93e0 006c 	STS  XMCRB,R30
                 
                 ;DISABLE WATCHDOG
0000b1 e1f8      	LDI  R31,0x18
0000b2 bdf1      	OUT  WDTCR,R31
0000b3 bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
0000b4 e08d      	LDI  R24,(14-2)+1
0000b5 e0a2      	LDI  R26,2
0000b6 27bb      	CLR  R27
                 __CLEAR_REG:
0000b7 93ed      	ST   X+,R30
0000b8 958a      	DEC  R24
0000b9 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
0000ba e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
0000bb e190      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
0000bc e0a0      	LDI  R26,LOW(__SRAM_START)
0000bd e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
0000be 93ed      	ST   X+,R30
0000bf 9701      	SBIW R24,1
0000c0 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
0000c1 e0ee      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
0000c2 e0f1      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
0000c3 9185      	LPM  R24,Z+
0000c4 9195      	LPM  R25,Z+
0000c5 9700      	SBIW R24,0
0000c6 f061      	BREQ __GLOBAL_INI_END
0000c7 91a5      	LPM  R26,Z+
0000c8 91b5      	LPM  R27,Z+
0000c9 9005      	LPM  R0,Z+
0000ca 9015      	LPM  R1,Z+
0000cb 01bf      	MOVW R22,R30
0000cc 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
0000cd 9005      	LPM  R0,Z+
0000ce 920d      	ST   X+,R0
0000cf 9701      	SBIW R24,1
0000d0 f7e1      	BRNE __GLOBAL_INI_LOOP
0000d1 01fb      	MOVW R30,R22
0000d2 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
0000d3 bf8b      	OUT  RAMPZ,R24
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
0000d4 efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
0000d5 bfed      	OUT  SPL,R30
0000d6 e1e0      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
0000d7 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
0000d8 e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
0000d9 e0d5      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
0000da 940c 019e 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x500
                 
                 	.CSEG
                 ;/*****************************************************
                 ;Chip type               : ATmega128A
                 ;Program type            : Application
                 ;AVR Core Clock frequency: 11,059200 MHz
                 ;Memory model            : Small
                 ;External RAM size       : 0
                 ;Data Stack size         : 1024
                 ;*****************************************************/
                 ;
                 ;#include <mega128a.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x20
                 	.EQU __sm_mask=0x1C
                 	.EQU __sm_powerdown=0x10
                 	.EQU __sm_powersave=0x18
                 	.EQU __sm_standby=0x14
                 	.EQU __sm_ext_standby=0x1C
                 	.EQU __sm_adc_noise_red=0x08
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;// I2C Bus functions
                 ;#include <i2c.h>
                 ;// Standard Input/Output functions
                 ;#include <stdio.h>
                 ;
                 ;
                 ;#define DDR_SPI DDRB
                 ;#define PORT_SPI PORTB
                 ;#define SS 0
                 ;
                 ;#define ADC_VREF_TYPE 0xC0
                 ;#ifndef UDRE
                 ;#define UDRE 5
                 ;#endif
                 ;#define DATA_REGISTER_EMPTY (1<<UDRE)
                 ;#define AD7799_DDRDY PINB.3
                 ;
                 ;
                 ;
                 ;
                 ;#define AVERAGE_NUMBER 15
                 ;
                 ;#define FIXWEIGHT //Á‡ÍÓÏÂÌÚËÚ¸ ÓÚÛ·ËÚ¸ ÙËÍÒËÓ‚‡ÌÌ˚È ‚ÂÒ
                 ;#define SPEEDFILTER //Á‡ÍÓÏÂÌÚËÚ¸ ÓÚÛ·ËÚ¸ ÏÂ‰Ë‡ÌÌ˚È ÙËÎ¸Ú ÒÍÓÓÒÚË
                 ;#define ADC_FAULT_RESET //Á‡ÍÓÏÂÌÚËÚ¸ ÓÚÛ·ËÚ¸ ÓÚÛ·‡ÌËÂ ÚÂÎÂ„Ë ÔË ÌÂÔ‡‚ËÎ¸ÌÓÈ ËÌËˆ ADC
                 ;
                 ;//#define ADC_TO_KG//–‡ÒÍÓÏÂÚËÚ¸ ‰Îˇ ÔÓ‚ÂÍË «‡ÍÓÏÂÌÚËÚ¸ ˜ÚÓ· ËÁÏÂˇÚ¸
                 ;
                 ;#define IKS00  //ÌÓÏÂ ÚÂÎÂ„Ë!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                 ;
                 ;
                 ;//—ÔËÒÓÍ ÌÂÓ·ıÓ‰ËÏ˚ı ËÁÏÂÌÂÌËÈ
                 ;//5)¿÷œ ÔÂËÓ‰Ë˜ÂÒÍË ÌÂ ËÌËˆË‡ÎËÁËÛÂÚÒˇ ËÒÔ‡‚ËÚ¸
                 ;//6)œÓÍ‡Á‡ÌËˇ ‡ÍÍÛÏÛÎˇÚÓ‡ ÙËÎ¸Ú‡ÌÛÚ¸ ++++++++++++++++++++
                 ;
                 ;//‘ÓÏÛÎ‡
                 ;
                 ;//¬ ÔÓ„Â ÏÓ·ËÎ˚:
                 ;//2)«‡‰‡ÌËÂ —ÍÓÎ¸Ê Û·‡Ú¸
                 ;//3)—ÍÓÓÒÚ¸ ÏÂˇÚ¸ Ô‡‚ËÎ¸ÌÓ
                 ;//4)Ô‡ÓÎ¸ Ò‰ÂÎ‡Ú¸ ËÁ Ù‡ÈÎ‡
                 ;//5)‚˚‚Ó‰ËÚ¸ ÍÓ‰ Ó¯Ë·ÍË Ë Ò‡ÏÛ Ó¯Ë·ÍÛ
                 ;
                 ;
                 ;eeprom unsigned char EEP_SETUP_MAS[8];
                 ;eeprom unsigned char EEP_CALIBR_MAS[10];
                 ;
                 ;
                 ;
                 ;#ifdef IKS01
                 ;//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!CALIBR_MAIN_DATA N01
                 ;#define N_string "AT+NAMEIKSEM#01\r\n"
                 ;//unsigned int WEIGHT_NULL=7039, LOADCELL_NULL=1807, DELTA_WEIGHT10KG=842, DELTA_LOADCELL10KG=513;
                 ;//unsigned int WEIGHT_NULL=7023, LOADCELL_NULL=1900, DELTA_WEIGHT10KG=834, DELTA_LOADCELL10KG=508;
                 ;unsigned int WEIGHT_NULL=6752, LOADCELL_NULL=2089, DELTA_WEIGHT10KG=800, DELTA_LOADCELL10KG=475; //march 17 2023 Mishanj ...
                 ;unsigned int R_IK=202, R_TK=333 , ZADANIE_S=15;
                 ;unsigned char SETUP_MAS[8]={0,0,0,0,0,0,0,0};
                 ;unsigned char CALIBR_MAS[10]={0,0,0,0,0,0,0,0,0,0};
                 ;unsigned char DEFAULT_SETUP_MAS[8]={248,202,133,15,1,0,0,(202+133+15+1)/6};
                 ;//unsigned char DEFAULT_CALIBR_MAS[10]={249,70,39,18,7,8,42,5,13,(70+39+18+7+8+42+5+13)/8};
                 ;//unsigned char DEFAULT_CALIBR_MAS[10]={249,70,23,19,0,8,34,5,8,(70+23+19+0+8+34+5+8)/8};
                 ;unsigned char DEFAULT_CALIBR_MAS[10]={249,67,52,20,89,8,0,4,75,(67+52+20+89+8+0+4+75)/8};
                 ;int ADC_0_KG=1524,ADC_100_KG=6759;
                 ;//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!CALIBR_MAIN_DATA N01
                 ;#endif
                 ;
                 ;#ifdef IKS02
                 ;//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!CALIBR_MAIN_DATA N02
                 ;#define N_string "AT+NAMEIKSEM#02\r\n"
                 ;//unsigned int WEIGHT_NULL=6846, LOADCELL_NULL=400, DELTA_WEIGHT10KG=835, DELTA_LOADCELL10KG=495;
                 ;//unsigned int WEIGHT_NULL=6914, LOADCELL_NULL=395, DELTA_WEIGHT10KG=863, DELTA_LOADCELL10KG=511;
                 ;unsigned int WEIGHT_NULL=6838, LOADCELL_NULL=364, DELTA_WEIGHT10KG=856, DELTA_LOADCELL10KG=516;
                 ;unsigned int R_IK=202, R_TK=333 , ZADANIE_S=15;
                 ;unsigned char SETUP_MAS[8]={0,0,0,0,0,0,0,0};
                 ;unsigned char CALIBR_MAS[10]={0,0,0,0,0,0,0,0,0,0};
                 ;unsigned char DEFAULT_SETUP_MAS[8]={248,202,133,15,1,0,0,(202+133+15+1)/6};
                 ;//unsigned char DEFAULT_CALIBR_MAS[10]={249,68,46,4,0,8,35,4,95,(68+46+4+0+8+35+4+95)/8};
                 ;//unsigned char DEFAULT_CALIBR_MAS[10]={249,69,14,3,95,8,63,5,11,(69+14+3+95+8+63+5+11)/8};
                 ;unsigned char DEFAULT_CALIBR_MAS[10]={249,68,38,3,64,8,56,5,16,(68+38+3+64+8+56+5+16)/8};
                 ;
                 ;unsigned char ADC_0_KG=88,ADC_100_KG=6759;
                 ;//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!CALIBR_MAIN_DATA N02
                 ;#endif
                 ;
                 ;#ifdef IKS03
                 ;////!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!CALIBR_MAIN_DATA N03
                 ;#define N_string "AT+NAMEIKSEM#03\r\n"
                 ;//unsigned int WEIGHT_NULL=6944, LOADCELL_NULL=313, DELTA_WEIGHT10KG=825, DELTA_LOADCELL10KG=495;
                 ;unsigned int WEIGHT_NULL=7093, LOADCELL_NULL=402, DELTA_WEIGHT10KG=843, DELTA_LOADCELL10KG=500;
                 ;unsigned int R_IK=202, R_TK=333 , ZADANIE_S=15;
                 ;unsigned char SETUP_MAS[8]={0,0,0,0,0,0,0,0};
                 ;unsigned char CALIBR_MAS[10]={0,0,0,0,0,0,0,0,0,0};
                 ;unsigned char DEFAULT_SETUP_MAS[8]={248,202,133,15,1,0,0,(202+133+15+1)/6};
                 ;//unsigned char DEFAULT_CALIBR_MAS[10]={249,69,44,3,13,8,25,4,95,(69+44+3+13+8+25+4+95)/8};
                 ;unsigned char DEFAULT_CALIBR_MAS[10]={249,70,93,4,2,8,43,5,0,(70+93+4+2+8+43+5+0)/8};
                 ;
                 ;unsigned char ADC_0_KG=88,ADC_100_KG=6759;
                 ;////!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!CALIBR_MAIN_DATA N03
                 ;#endif
                 ;
                 ;#ifdef IKS00
                 ;//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!PCS_WITHOUT_TELEGA
                 ;#define N_string "AT+NAMEIKSEM#00\r\n"
                 ;unsigned int WEIGHT_NULL=6752, LOADCELL_NULL=2089, DELTA_WEIGHT10KG=800, DELTA_LOADCELL10KG=475; //march 17 2023 Mishanj ...
                 ;unsigned int R_IK=202, R_TK=333 , ZADANIE_S=15;
                 
                 	.DSEG
                 ;unsigned char SETUP_MAS[8]={0,0,0,0,0,0,0,0};
                 ;unsigned char CALIBR_MAS[10]={0,0,0,0,0,0,0,0,0,0};
                 ;unsigned char DEFAULT_SETUP_MAS[8]={248,202,133,15,1,0,0,(202+133+15+1)/6};
                 ;unsigned char DEFAULT_CALIBR_MAS[10]={249,67,52,20,89,8,0,4,75,(67+52+20+89+8+0+4+75)/8};
                 ;int ADC_0_KG=1524,ADC_100_KG=6759;
                 ;#endif
                 ;
                 ;
                 ;unsigned flag_transmission=255;
                 ;unsigned flag_receive=0,receive_counter=0;
                 ;
                 ;unsigned char SEND_MAS[26]={255,5,55,4,49,6,21,7,50,5,80,75,0,3598/60,3598%60,31,22,1819/60,1819%60,55,24,'N','E',50,0,3 ...
                 ;
                 ;
                 ;unsigned char program_cycle_flag=0,program_cycle_counter=0;
                 ;
                 ;unsigned char ovf_IK=0, ovf_TK=0;
                 ;unsigned long IK_COUNT[2]={0,0}, TK_COUNT[2]={0,0}, IK_DELTA=0, TK_DELTA=0;
                 ;unsigned int IK_SPEED_KM_H=0,TK_SPEED_KM_H=0;
                 ;unsigned int IK_SPEED_MAS[3]={0,0,0},TK_SPEED_MAS[3]={0,0,0};
                 ;
                 ;unsigned int ADC_BAT=0,ADC_I=0;
                 ;unsigned int BAT_SUM=0;
                 ;long I_NULL=0;
                 ;unsigned char flag_I_NULL=0;
                 ;//  unsigned int A_BAT=0,A_I=0;
                 ;
                 ;unsigned char GPS_zap_counter=0,GPS_sim_counter=0,GPS_flag_ready=0;//1-ustanovlen 0-ne ustanovlen
                 ;unsigned char GPS_string_name[3]={0,0,0},GPS_flag_gp=0;//0-no 1-1 bukva posle P, 2-2ya, 3-3ya, 4-GGA
                 ;unsigned int GPS_shir[4]={1,1,1,1},GPS_dolg[4]={1,1,1,1};//grad min .xxxx  NSWE
                 ;unsigned char GPS_solve=0;
                 ;unsigned char GPS_ON_COUNTER=0;
                 ;unsigned char flag_start=0;
                 ;unsigned char measuring_start_counter=0;
                 ;int load_cell=0,load_cell_MAS[20];
                 ;unsigned char ADC_fault_counter=0;
                 ;
                 ;
                 ;int PID_I_S=800;
                 ;
                 ;
                 ;interrupt [EXT_INT7] void ext_int7_isr(void);
                 ;interrupt [EXT_INT6] void ext_int6_isr(void);
                 ;void init_all(void);
                 ;void led_zero(void);
                 ;void led_one(void);
                 ;void lights(char G, char R, char B);
                 ;unsigned int K_BY_KOEFFICIENTS_REAL(unsigned int M);
                 ;unsigned int K_BY_KOEFFICIENTS_ASFT(unsigned int M);
                 ;void Read_Setup_Calibr(void);
                 ;void Control_Sum_Send(void);
                 ;void Control_Sum_Calibr(void);
                 ;void Control_Sum_Setup(void);
                 ;interrupt [TIM1_OVF] void timer1_ovf_isr(void);
                 ;void delay(unsigned int d);
                 ;void SPI_MasterInit(void);
                 ;unsigned char SPI_MasterReceive(void);
                 ;void SPI_MasterTransmit(unsigned char x);
                 ;void SET_AD7799(void);
                 ;unsigned int READ_AD7799(void);
                 ;void uart1SendByte(char data);
                 ;void uart1SendString(char *str);
                 ;void uart1SendArray(unsigned char *array, unsigned char size);
                 ;interrupt [USART0_RXC] void usart0_rx_isr(void);
                 ;interrupt [USART1_RXC] void usart1_rx_isr(void);
                 ;unsigned int read_adc(unsigned char adc_input);
                 ;interrupt [TIM2_OVF] void timer2_ovf_isr(void);
                 ;
                 ;void load_from_eeprom(void);
                 ;void save_to_eeprom(void);
                 ;
                 ;unsigned int load_cell_filter(void)
                 ; 0000 00BD {
                 
                 	.CSEG
                 _load_cell_filter:
                 ; .FSTART _load_cell_filter
                 ; 0000 00BE  unsigned char tmp;
                 ; 0000 00BF  unsigned long int sum=0;
                 ; 0000 00C0 
                 ; 0000 00C1  if(measuring_start_counter<2)
0000dc 9724      	SBIW R28,4
0000dd e0e0      	LDI  R30,LOW(0)
0000de 83e8      	ST   Y,R30
0000df 83e9      	STD  Y+1,R30
0000e0 83ea      	STD  Y+2,R30
0000e1 83eb      	STD  Y+3,R30
0000e2 931a      	ST   -Y,R17
                 ;	tmp -> R17
                 ;	sum -> Y+1
0000e3 91a0 05ab 	LDS  R26,_measuring_start_counter
0000e5 30a2      	CPI  R26,LOW(0x2)
0000e6 f520      	BRSH _0xE
                 ; 0000 00C2  {
                 ; 0000 00C3   for(tmp=(AVERAGE_NUMBER-1);tmp>0;tmp--)
0000e7 e01e      	LDI  R17,LOW(14)
                 _0x10:
0000e8 3011      	CPI  R17,1
0000e9 f100      	BRLO _0x11
                 ; 0000 00C4   {
                 ; 0000 00C5     load_cell_MAS[tmp]=load_cell;
0000ea 2fe1      	MOV  R30,R17
0000eb eaae      	LDI  R26,LOW(_load_cell_MAS)
0000ec e0b5      	LDI  R27,HIGH(_load_cell_MAS)
0000ed e0f0      	LDI  R31,0
0000ee 0fee      	LSL  R30
0000ef 1fff      	ROL  R31
0000f0 0fea      	ADD  R30,R26
0000f1 1ffb      	ADC  R31,R27
0000f2 91a0 05ac 	LDS  R26,_load_cell
0000f4 91b0 05ad 	LDS  R27,_load_cell+1
0000f6 83a0      	STD  Z+0,R26
0000f7 83b1      	STD  Z+1,R27
                 ; 0000 00C6     sum=sum+load_cell;
0000f8 91e0 05ac 	LDS  R30,_load_cell
0000fa 91f0 05ad 	LDS  R31,_load_cell+1
                +
0000fc 81a9     +LDD R26 , Y + 1
0000fd 81ba     +LDD R27 , Y + 1 + 1
0000fe 818b     +LDD R24 , Y + 1 + 2
0000ff 819c     +LDD R25 , Y + 1 + 3
                 	__GETD2S 1
000100 940e 0d90 	CALL __CWD1
000102 940e 0d6e 	CALL __ADDD12
                +
000104 83e9     +STD Y + 1 , R30
000105 83fa     +STD Y + 1 + 1 , R31
000106 836b     +STD Y + 1 + 2 , R22
000107 837c     +STD Y + 1 + 3 , R23
                 	__PUTD1S 1
                 ; 0000 00C7   }
000108 5011      	SUBI R17,1
000109 cfde      	RJMP _0x10
                 _0x11:
                 ; 0000 00C8  }
                 ; 0000 00C9  else
00010a c032      	RJMP _0x12
                 _0xE:
                 ; 0000 00CA  {
                 ; 0000 00CB   for(tmp=(AVERAGE_NUMBER-1);tmp>0;tmp--)
00010b e01e      	LDI  R17,LOW(14)
                 _0x14:
00010c 3011      	CPI  R17,1
00010d f178      	BRLO _0x15
                 ; 0000 00CC   {
                 ; 0000 00CD     load_cell_MAS[tmp]=load_cell_MAS[tmp-1];
00010e 2fe1      	MOV  R30,R17
00010f eaae      	LDI  R26,LOW(_load_cell_MAS)
000110 e0b5      	LDI  R27,HIGH(_load_cell_MAS)
000111 e0f0      	LDI  R31,0
000112 0fee      	LSL  R30
000113 1fff      	ROL  R31
000114 0fea      	ADD  R30,R26
000115 1ffb      	ADC  R31,R27
000116 010f      	MOVW R0,R30
000117 2fe1      	MOV  R30,R17
000118 e0f0      	LDI  R31,0
000119 9731      	SBIW R30,1
00011a eaae      	LDI  R26,LOW(_load_cell_MAS)
00011b e0b5      	LDI  R27,HIGH(_load_cell_MAS)
00011c 0fee      	LSL  R30
00011d 1fff      	ROL  R31
00011e 0fae      	ADD  R26,R30
00011f 1fbf      	ADC  R27,R31
000120 940e 0e41 	CALL __GETW1P
000122 01d0      	MOVW R26,R0
000123 93ed      	ST   X+,R30
000124 93fc      	ST   X,R31
                 ; 0000 00CE     sum=sum+load_cell_MAS[tmp];
000125 2fe1      	MOV  R30,R17
000126 eaae      	LDI  R26,LOW(_load_cell_MAS)
000127 e0b5      	LDI  R27,HIGH(_load_cell_MAS)
000128 e0f0      	LDI  R31,0
000129 0fee      	LSL  R30
00012a 1fff      	ROL  R31
00012b 0fae      	ADD  R26,R30
00012c 1fbf      	ADC  R27,R31
00012d 940e 0e41 	CALL __GETW1P
                +
00012f 81a9     +LDD R26 , Y + 1
000130 81ba     +LDD R27 , Y + 1 + 1
000131 818b     +LDD R24 , Y + 1 + 2
000132 819c     +LDD R25 , Y + 1 + 3
                 	__GETD2S 1
000133 940e 0d90 	CALL __CWD1
000135 940e 0d6e 	CALL __ADDD12
                +
000137 83e9     +STD Y + 1 , R30
000138 83fa     +STD Y + 1 + 1 , R31
000139 836b     +STD Y + 1 + 2 , R22
00013a 837c     +STD Y + 1 + 3 , R23
                 	__PUTD1S 1
                 ; 0000 00CF   }
00013b 5011      	SUBI R17,1
00013c cfcf      	RJMP _0x14
                 _0x15:
                 ; 0000 00D0  }
                 _0x12:
                 ; 0000 00D1  load_cell_MAS[0]=load_cell;
00013d 91e0 05ac 	LDS  R30,_load_cell
00013f 91f0 05ad 	LDS  R31,_load_cell+1
000141 93e0 05ae 	STS  _load_cell_MAS,R30
000143 93f0 05af 	STS  _load_cell_MAS+1,R31
                 ; 0000 00D2  sum=sum+load_cell;
000145 91e0 05ac 	LDS  R30,_load_cell
000147 91f0 05ad 	LDS  R31,_load_cell+1
                +
000149 81a9     +LDD R26 , Y + 1
00014a 81ba     +LDD R27 , Y + 1 + 1
00014b 818b     +LDD R24 , Y + 1 + 2
00014c 819c     +LDD R25 , Y + 1 + 3
                 	__GETD2S 1
00014d 940e 0d90 	CALL __CWD1
00014f 940e 0d6e 	CALL __ADDD12
                +
000151 83e9     +STD Y + 1 , R30
000152 83fa     +STD Y + 1 + 1 , R31
000153 836b     +STD Y + 1 + 2 , R22
000154 837c     +STD Y + 1 + 3 , R23
                 	__PUTD1S 1
                 ; 0000 00D3  sum=sum/AVERAGE_NUMBER;
                +
000155 81a9     +LDD R26 , Y + 1
000156 81ba     +LDD R27 , Y + 1 + 1
000157 818b     +LDD R24 , Y + 1 + 2
000158 819c     +LDD R25 , Y + 1 + 3
                 	__GETD2S 1
                +
000159 e0ef     +LDI R30 , LOW ( 0xF )
00015a e0f0     +LDI R31 , HIGH ( 0xF )
00015b e060     +LDI R22 , BYTE3 ( 0xF )
00015c e070     +LDI R23 , BYTE4 ( 0xF )
                 	__GETD1N 0xF
00015d 940e 0de5 	CALL __DIVD21U
                +
00015f 83e9     +STD Y + 1 , R30
000160 83fa     +STD Y + 1 + 1 , R31
000161 836b     +STD Y + 1 + 2 , R22
000162 837c     +STD Y + 1 + 3 , R23
                 	__PUTD1S 1
                 ; 0000 00D4  return (unsigned int)sum;
000163 81e9      	LDD  R30,Y+1
000164 81fa      	LDD  R31,Y+1+1
000165 8118      	LDD  R17,Y+0
000166 9625      	ADIW R28,5
000167 9508      	RET
                 ; 0000 00D5 }
                 ; .FEND
                 ;
                 ;// Write a character to the USART1 Transmitter
                 ;#pragma used+
                 ;void putchar1(char c)
                 ; 0000 00DA {
                 ; 0000 00DB  while ((UCSR1A & DATA_REGISTER_EMPTY)==0);
                 ;	c -> Y+0
                 ; 0000 00DC   UDR1=c;
                 ; 0000 00DD }
                 ;#pragma used-
                 ;
                 ;//
                 ;unsigned int middle(unsigned int d1, unsigned int d2, unsigned int d3)
                 ; 0000 00E2 {
                 _middle:
                 ; .FSTART _middle
                 ; 0000 00E3  if(d1>=d2)
000168 93ba      	ST   -Y,R27
000169 93aa      	ST   -Y,R26
                 ;	d1 -> Y+4
                 ;	d2 -> Y+2
                 ;	d3 -> Y+0
00016a 81ea      	LDD  R30,Y+2
00016b 81fb      	LDD  R31,Y+2+1
00016c 81ac      	LDD  R26,Y+4
00016d 81bd      	LDD  R27,Y+4+1
00016e 17ae      	CP   R26,R30
00016f 07bf      	CPC  R27,R31
000170 f0a8      	BRLO _0x19
                 ; 0000 00E4  {
                 ; 0000 00E5   if(d1<=d3) return d1;
000171 81e8      	LD   R30,Y
000172 81f9      	LDD  R31,Y+1
000173 17ea      	CP   R30,R26
000174 07fb      	CPC  R31,R27
000175 f018      	BRLO _0x1A
000176 81ec      	LDD  R30,Y+4
000177 81fd      	LDD  R31,Y+4+1
000178 c023      	RJMP _0x2060006
                 ; 0000 00E6   else
                 _0x1A:
                 ; 0000 00E7   {
                 ; 0000 00E8    if(d2>=d3)
000179 81e8      	LD   R30,Y
00017a 81f9      	LDD  R31,Y+1
00017b 81aa      	LDD  R26,Y+2
00017c 81bb      	LDD  R27,Y+2+1
00017d 17ae      	CP   R26,R30
00017e 07bf      	CPC  R27,R31
00017f f018      	BRLO _0x1C
                 ; 0000 00E9     return d2;
000180 81ea      	LDD  R30,Y+2
000181 81fb      	LDD  R31,Y+2+1
000182 c019      	RJMP _0x2060006
                 ; 0000 00EA    else
                 _0x1C:
                 ; 0000 00EB     return d3;
000183 81e8      	LD   R30,Y
000184 81f9      	LDD  R31,Y+1
000185 c016      	RJMP _0x2060006
                 ; 0000 00EC   }
                 ; 0000 00ED  }
                 ; 0000 00EE  else
                 _0x19:
                 ; 0000 00EF  {
                 ; 0000 00F0   if(d2<=d3) return d2;
000186 81e8      	LD   R30,Y
000187 81f9      	LDD  R31,Y+1
000188 81aa      	LDD  R26,Y+2
000189 81bb      	LDD  R27,Y+2+1
00018a 17ea      	CP   R30,R26
00018b 07fb      	CPC  R31,R27
00018c f018      	BRLO _0x1F
00018d 81ea      	LDD  R30,Y+2
00018e 81fb      	LDD  R31,Y+2+1
00018f c00c      	RJMP _0x2060006
                 ; 0000 00F1   else
                 _0x1F:
                 ; 0000 00F2   {
                 ; 0000 00F3    if(d1>=d3)
000190 81e8      	LD   R30,Y
000191 81f9      	LDD  R31,Y+1
000192 81ac      	LDD  R26,Y+4
000193 81bd      	LDD  R27,Y+4+1
000194 17ae      	CP   R26,R30
000195 07bf      	CPC  R27,R31
000196 f018      	BRLO _0x21
                 ; 0000 00F4     return d1;
000197 81ec      	LDD  R30,Y+4
000198 81fd      	LDD  R31,Y+4+1
000199 c002      	RJMP _0x2060006
                 ; 0000 00F5    else
                 _0x21:
                 ; 0000 00F6     return d3;
00019a 81e8      	LD   R30,Y
00019b 81f9      	LDD  R31,Y+1
                 ; 0000 00F7   }
                 ; 0000 00F8  }
                 ; 0000 00F9 }
                 _0x2060006:
00019c 9626      	ADIW R28,6
00019d 9508      	RET
                 ; .FEND
                 ;
                 ;void main(void)
                 ; 0000 00FC {
                 _main:
                 ; .FSTART _main
                 ; 0000 00FD // Declare your local variables here
                 ; 0000 00FE unsigned char main_cycle=0,flag_led_direction=0,led_cycle=0;
                 ; 0000 00FF unsigned int BAT=0;
                 ; 0000 0100 unsigned int K=0;
                 ; 0000 0101 unsigned int TMP,TMPL;
                 ; 0000 0102 
                 ; 0000 0103 int M=0;
                 ; 0000 0104 int I=0;
                 ; 0000 0105 unsigned int TIME_OUT=10*60*30;
                 ; 0000 0106 
                 ; 0000 0107 Control_Sum_Calibr();
00019e 972c      	SBIW R28,12
00019f e08c      	LDI  R24,12
0001a0 e0a0      	LDI  R26,LOW(0)
0001a1 e0b0      	LDI  R27,HIGH(0)
0001a2 efe0      	LDI  R30,LOW(_0x23*2)
0001a3 e0f0      	LDI  R31,HIGH(_0x23*2)
0001a4 940e 0e8a 	CALL __INITLOCB
                 ;	main_cycle -> R17
                 ;	flag_led_direction -> R16
                 ;	led_cycle -> R19
                 ;	BAT -> R20,R21
                 ;	K -> Y+10
                 ;	TMP -> Y+8
                 ;	TMPL -> Y+6
                 ;	M -> Y+4
                 ;	I -> Y+2
                 ;	TIME_OUT -> Y+0
0001a6 e010      	LDI  R17,0
0001a7 e000      	LDI  R16,0
0001a8 e030      	LDI  R19,0
                +
0001a9 e040     +LDI R20 , LOW ( 0 )
0001aa e050     +LDI R21 , HIGH ( 0 )
                 	__GETWRN 20,21,0
0001ab 940e 0710 	CALL _Control_Sum_Calibr
                 ; 0000 0108 Control_Sum_Setup();
0001ad 940e 0728 	CALL _Control_Sum_Setup
                 ; 0000 0109 load_from_eeprom();
0001af 940e 0c25 	CALL _load_from_eeprom
                 ; 0000 010A Read_Setup_Calibr();
0001b1 940e 06b2 	CALL _Read_Setup_Calibr
                 ; 0000 010B 
                 ; 0000 010C 
                 ; 0000 010D 
                 ; 0000 010E 
                 ; 0000 010F init_all();
0001b3 d35f      	RCALL _init_all
                 ; 0000 0110 // I2C Port: PORTD
                 ; 0000 0111 // I2C SDA bit: 1
                 ; 0000 0112 // I2C SCL bit: 0
                 ; 0000 0113 // Bit Rate: 100 kHz
                 ; 0000 0114 i2c_init();
0001b4 940e 0d13 	CALL _i2c_init
                 ; 0000 0115 
                 ; 0000 0116 SPI_MasterInit();
0001b6 940e 076e 	CALL _SPI_MasterInit
                 ; 0000 0117 
                 ; 0000 0118 // Global enable interrupts
                 ; 0000 0119 
                 ; 0000 011A 
                 ; 0000 011B PORTC.0 = 1;//iksem - on
0001b8 9aa8      	SBI  0x15,0
                 ; 0000 011C 
                 ; 0000 011D //PORTC.1 = 1;//fonar on
                 ; 0000 011E 
                 ; 0000 011F 
                 ; 0000 0120 delay_ms(100);
0001b9 e6a4      	LDI  R26,LOW(100)
0001ba e0b0      	LDI  R27,0
0001bb 940e 0d64 	CALL _delay_ms
                 ; 0000 0121 SET_AD7799();
0001bd 940e 0781 	CALL _SET_AD7799
                 ; 0000 0122 delay_ms(100);
0001bf e6a4      	LDI  R26,LOW(100)
0001c0 e0b0      	LDI  R27,0
0001c1 940e 0d64 	CALL _delay_ms
                 ; 0000 0123 SET_AD7799();
0001c3 940e 0781 	CALL _SET_AD7799
                 ; 0000 0124 delay_ms(100);
0001c5 e6a4      	LDI  R26,LOW(100)
0001c6 e0b0      	LDI  R27,0
0001c7 940e 0d64 	CALL _delay_ms
                 ; 0000 0125 uart1SendString(N_string);//Set BLUETOOTH NAME
                +
0001c9 e0a0     +LDI R26 , LOW ( _0x26 + ( 0 ) )
0001ca e0b5     +LDI R27 , HIGH ( _0x26 + ( 0 ) )
                 	__POINTW2MN _0x26,0
0001cb 940e 07cf 	CALL _uart1SendString
                 ; 0000 0126 #asm("sei");
0001cd 9478      	sei
                 ; 0000 0127 
                 ; 0000 0128 while (1)
                 _0x27:
                 ; 0000 0129     {
                 ; 0000 012A      /*
                 ; 0000 012B       program_cycle_flag=0;
                 ; 0000 012C       while(program_cycle_flag!=1)
                 ; 0000 012D       {}
                 ; 0000 012E       program_cycle_flag=0;
                 ; 0000 012F      */
                 ; 0000 0130 
                 ; 0000 0131       #ifdef SPEEDFILTER
                 ; 0000 0132       TMP=middle(TK_SPEED_MAS[0],TK_SPEED_MAS[1],TK_SPEED_MAS[2]);
0001ce 91e0 0580 	LDS  R30,_TK_SPEED_MAS
0001d0 91f0 0581 	LDS  R31,_TK_SPEED_MAS+1
0001d2 93fa      	ST   -Y,R31
0001d3 93ea      	ST   -Y,R30
                +
0001d4 91e0 0582+LDS R30 , _TK_SPEED_MAS + ( 2 )
0001d6 91f0 0583+LDS R31 , _TK_SPEED_MAS + ( 2 ) + 1
                 	__GETW1MN _TK_SPEED_MAS,2
0001d8 93fa      	ST   -Y,R31
0001d9 93ea      	ST   -Y,R30
                +
0001da 91a0 0584+LDS R26 , _TK_SPEED_MAS + ( 4 )
0001dc 91b0 0585+LDS R27 , _TK_SPEED_MAS + ( 4 ) + 1
                 	__GETW2MN _TK_SPEED_MAS,4
0001de df89      	RCALL _middle
0001df 87e8      	STD  Y+8,R30
0001e0 87f9      	STD  Y+8+1,R31
                 ; 0000 0133       SEND_MAS[1]= TMP/100;
0001e1 85a8      	LDD  R26,Y+8
0001e2 85b9      	LDD  R27,Y+8+1
0001e3 e6e4      	LDI  R30,LOW(100)
0001e4 e0f0      	LDI  R31,HIGH(100)
0001e5 940e 0dcd 	CALL __DIVW21U
                +
0001e7 93e0 0541+STS _SEND_MAS + ( 1 ) , R30
                 	__PUTB1MN _SEND_MAS,1
                 ; 0000 0134       SEND_MAS[2]= TMP%100;
0001e9 85a8      	LDD  R26,Y+8
0001ea 85b9      	LDD  R27,Y+8+1
0001eb e6e4      	LDI  R30,LOW(100)
0001ec e0f0      	LDI  R31,HIGH(100)
0001ed 940e 0e0f 	CALL __MODW21U
                +
0001ef 93e0 0542+STS _SEND_MAS + ( 2 ) , R30
                 	__PUTB1MN _SEND_MAS,2
                 ; 0000 0135       TMP=middle(IK_SPEED_MAS[0],IK_SPEED_MAS[1],IK_SPEED_MAS[2]);
0001f1 91e0 057a 	LDS  R30,_IK_SPEED_MAS
0001f3 91f0 057b 	LDS  R31,_IK_SPEED_MAS+1
0001f5 93fa      	ST   -Y,R31
0001f6 93ea      	ST   -Y,R30
                +
0001f7 91e0 057c+LDS R30 , _IK_SPEED_MAS + ( 2 )
0001f9 91f0 057d+LDS R31 , _IK_SPEED_MAS + ( 2 ) + 1
                 	__GETW1MN _IK_SPEED_MAS,2
0001fb 93fa      	ST   -Y,R31
0001fc 93ea      	ST   -Y,R30
                +
0001fd 91a0 057e+LDS R26 , _IK_SPEED_MAS + ( 4 )
0001ff 91b0 057f+LDS R27 , _IK_SPEED_MAS + ( 4 ) + 1
                 	__GETW2MN _IK_SPEED_MAS,4
000201 df66      	RCALL _middle
000202 87e8      	STD  Y+8,R30
000203 87f9      	STD  Y+8+1,R31
                 ; 0000 0136       SEND_MAS[3]= TMP/100;
000204 85a8      	LDD  R26,Y+8
000205 85b9      	LDD  R27,Y+8+1
000206 e6e4      	LDI  R30,LOW(100)
000207 e0f0      	LDI  R31,HIGH(100)
000208 940e 0dcd 	CALL __DIVW21U
                +
00020a 93e0 0543+STS _SEND_MAS + ( 3 ) , R30
                 	__PUTB1MN _SEND_MAS,3
                 ; 0000 0137       SEND_MAS[4]= TMP%100;
00020c 85a8      	LDD  R26,Y+8
00020d 85b9      	LDD  R27,Y+8+1
00020e e6e4      	LDI  R30,LOW(100)
00020f e0f0      	LDI  R31,HIGH(100)
000210 940e 0e0f 	CALL __MODW21U
                +
000212 93e0 0544+STS _SEND_MAS + ( 4 ) , R30
                 	__PUTB1MN _SEND_MAS,4
                 ; 0000 0138       #else
                 ; 0000 0139       SEND_MAS[1]= TK_SPEED_KM_H/100;
                 ; 0000 013A       SEND_MAS[2]= TK_SPEED_KM_H%100;
                 ; 0000 013B       SEND_MAS[3]= IK_SPEED_KM_H/100;
                 ; 0000 013C       SEND_MAS[4]= IK_SPEED_KM_H%100;
                 ; 0000 013D       #endif
                 ; 0000 013E 
                 ; 0000 013F        if(flag_start==1)
000214 91a0 05aa 	LDS  R26,_flag_start
000216 30a1      	CPI  R26,LOW(0x1)
000217 f419      	BRNE _0x2A
                 ; 0000 0140        {
                 ; 0000 0141         TIME_OUT=10*60*30;
000218 e5e0      	LDI  R30,LOW(18000)
000219 e4f6      	LDI  R31,HIGH(18000)
00021a c009      	RJMP _0x11C
                 ; 0000 0142 
                 ; 0000 0143        // measuring_start_counter++;
                 ; 0000 0144        }//30 min
                 ; 0000 0145        else
                 _0x2A:
                 ; 0000 0146        {
                 ; 0000 0147         if(TIME_OUT==0)
00021b 81e8      	LD   R30,Y
00021c 81f9      	LDD  R31,Y+1
00021d 9730      	SBIW R30,0
00021e f411      	BRNE _0x2C
                 ; 0000 0148          PORTC.0 = 0;//iksem - off
00021f 98a8      	CBI  0x15,0
                 ; 0000 0149         else
000220 c005      	RJMP _0x2F
                 _0x2C:
                 ; 0000 014A          TIME_OUT--;
000221 81e8      	LD   R30,Y
000222 81f9      	LDD  R31,Y+1
000223 9731      	SBIW R30,1
                 _0x11C:
000224 83e8      	ST   Y,R30
000225 83f9      	STD  Y+1,R31
                 ; 0000 014B        }
                 _0x2F:
                 ; 0000 014C 
                 ; 0000 014D 
                 ; 0000 014E       while(AD7799_DDRDY==0) //!DDRDY
                 _0x30:
000226 9bb3      	SBIS 0x16,3
                 ; 0000 014F       {}
000227 cffe      	RJMP _0x30
                 ; 0000 0150 
                 ; 0000 0151       #ifdef ADC_FAULT_RESET
                 ; 0000 0152        TMPL=TCNT3L;//read low first
000228 91e0 0088 	LDS  R30,136
00022a e0f0      	LDI  R31,0
00022b 83ee      	STD  Y+6,R30
00022c 83ff      	STD  Y+6+1,R31
                 ; 0000 0153        TMP=TCNT3H;
00022d 91e0 0089 	LDS  R30,137
00022f e0f0      	LDI  R31,0
000230 87e8      	STD  Y+8,R30
000231 87f9      	STD  Y+8+1,R31
                 ; 0000 0154        TMP=(TMP<<8)+TMPL;
000232 85f8      	LDD  R31,Y+8
000233 e0e0      	LDI  R30,LOW(0)
000234 81ae      	LDD  R26,Y+6
000235 81bf      	LDD  R27,Y+6+1
000236 0fea      	ADD  R30,R26
000237 1ffb      	ADC  R31,R27
000238 87e8      	STD  Y+8,R30
000239 87f9      	STD  Y+8+1,R31
                 ; 0000 0155        if((TMP<(1080-250))||(TMP>(1080+250)))
00023a 85a8      	LDD  R26,Y+8
00023b 85b9      	LDD  R27,Y+8+1
00023c 33ae      	CPI  R26,LOW(0x33E)
00023d e0e3      	LDI  R30,HIGH(0x33E)
00023e 07be      	CPC  R27,R30
00023f f020      	BRLO _0x34
000240 33a3      	CPI  R26,LOW(0x533)
000241 e0e5      	LDI  R30,HIGH(0x533)
000242 07be      	CPC  R27,R30
000243 f060      	BRLO _0x33
                 _0x34:
                 ; 0000 0156        {
                 ; 0000 0157         if(ADC_fault_counter>5)
000244 91a0 05d6 	LDS  R26,_ADC_fault_counter
000246 30a6      	CPI  R26,LOW(0x6)
000247 f010      	BRLO _0x36
                 ; 0000 0158         {
                 ; 0000 0159          PORTC.0 = 0;//iksem - off
000248 98a8      	CBI  0x15,0
                 ; 0000 015A         }
                 ; 0000 015B         else
000249 c005      	RJMP _0x39
                 _0x36:
                 ; 0000 015C         {
                 ; 0000 015D          ADC_fault_counter++;
00024a 91e0 05d6 	LDS  R30,_ADC_fault_counter
00024c 5fef      	SUBI R30,-LOW(1)
00024d 93e0 05d6 	STS  _ADC_fault_counter,R30
                 ; 0000 015E         }
                 _0x39:
                 ; 0000 015F        }
                 ; 0000 0160        else
00024f c004      	RJMP _0x3A
                 _0x33:
                 ; 0000 0161        {
                 ; 0000 0162         ADC_fault_counter=0;
000250 e0e0      	LDI  R30,LOW(0)
000251 93e0 05d6 	STS  _ADC_fault_counter,R30
                 ; 0000 0163         PORTC.0 = 1;//iksem - on
000253 9aa8      	SBI  0x15,0
                 ; 0000 0164        }
                 _0x3A:
                 ; 0000 0165        TCNT3H=0;//write high first
000254 e0e0      	LDI  R30,LOW(0)
000255 93e0 0089 	STS  137,R30
                 ; 0000 0166        TCNT3L=0;
000257 93e0 0088 	STS  136,R30
                 ; 0000 0167       #endif
                 ; 0000 0168 
                 ; 0000 0169       delay_ms(1);
000259 e0a1      	LDI  R26,LOW(1)
00025a e0b0      	LDI  R27,0
00025b 940e 0d64 	CALL _delay_ms
                 ; 0000 016A       load_cell=READ_AD7799();
00025d 940e 07af 	CALL _READ_AD7799
00025f 93e0 05ac 	STS  _load_cell,R30
000261 93f0 05ad 	STS  _load_cell+1,R31
                 ; 0000 016B       delay_ms(1);
000263 e0a1      	LDI  R26,LOW(1)
000264 e0b0      	LDI  R27,0
000265 940e 0d64 	CALL _delay_ms
                 ; 0000 016C 
                 ; 0000 016D      //M----------------------------------------------
                 ; 0000 016E      #ifdef ADC_TO_KG
                 ; 0000 016F      load_cell=load_cell-ADC_0_KG;
                 ; 0000 0170      load_cell=(int)(((long int)load_cell*10000)/(long int)ADC_100_KG);
                 ; 0000 0171      if(load_cell<0)
                 ; 0000 0172      {load_cell=0;}
                 ; 0000 0173      #endif
                 ; 0000 0174      //load_cell=88 - 0kg
                 ; 0000 0175      //load_cell=835 - 11,1kg
                 ; 0000 0176      // 1 adc = 0,01486 kg
                 ; 0000 0177 
                 ; 0000 0178 
                 ; 0000 0179       M=load_cell_filter();
000267 de74      	RCALL _load_cell_filter
000268 83ec      	STD  Y+4,R30
000269 83fd      	STD  Y+4+1,R31
                 ; 0000 017A       if(M<0)
00026a 81ad      	LDD  R26,Y+5
00026b 23aa      	TST  R26
00026c f41a      	BRPL _0x3D
                 ; 0000 017B       M=0;
00026d e0e0      	LDI  R30,LOW(0)
00026e 83ec      	STD  Y+4,R30
00026f 83ed      	STD  Y+4+1,R30
                 ; 0000 017C       if(M>10000)
                 _0x3D:
000270 81ac      	LDD  R26,Y+4
000271 81bd      	LDD  R27,Y+4+1
000272 31a1      	CPI  R26,LOW(0x2711)
000273 e2e7      	LDI  R30,HIGH(0x2711)
000274 07be      	CPC  R27,R30
000275 f024      	BRLT _0x3E
                 ; 0000 017D       M=10000;
000276 e1e0      	LDI  R30,LOW(10000)
000277 e2f7      	LDI  R31,HIGH(10000)
000278 83ec      	STD  Y+4,R30
000279 83fd      	STD  Y+4+1,R31
                 ; 0000 017E       if(flag_start==0)
                 _0x3E:
00027a 91e0 05aa 	LDS  R30,_flag_start
00027c 30e0      	CPI  R30,0
00027d f411      	BRNE _0x3F
                 ; 0000 017F       {
                 ; 0000 0180        measuring_start_counter=0;
00027e e0e0      	LDI  R30,LOW(0)
00027f c007      	RJMP _0x11D
                 ; 0000 0181       }
                 ; 0000 0182       else
                 _0x3F:
                 ; 0000 0183       {
                 ; 0000 0184        if(measuring_start_counter<30)
000280 91a0 05ab 	LDS  R26,_measuring_start_counter
000282 31ae      	CPI  R26,LOW(0x1E)
000283 f428      	BRSH _0x41
                 ; 0000 0185         {measuring_start_counter++;}
000284 91e0 05ab 	LDS  R30,_measuring_start_counter
000286 5fef      	SUBI R30,-LOW(1)
                 _0x11D:
000287 93e0 05ab 	STS  _measuring_start_counter,R30
                 ; 0000 0186       }
                 _0x41:
                 ; 0000 0187 
                 ; 0000 0188       SEND_MAS[7]=M/100;
000289 81ac      	LDD  R26,Y+4
00028a 81bd      	LDD  R27,Y+4+1
00028b e6e4      	LDI  R30,LOW(100)
00028c e0f0      	LDI  R31,HIGH(100)
00028d 940e 0de0 	CALL __DIVW21
                +
00028f 93e0 0547+STS _SEND_MAS + ( 7 ) , R30
                 	__PUTB1MN _SEND_MAS,7
                 ; 0000 0189       SEND_MAS[8]=M%100;
000291 81ac      	LDD  R26,Y+4
000292 81bd      	LDD  R27,Y+4+1
000293 e6e4      	LDI  R30,LOW(100)
000294 e0f0      	LDI  R31,HIGH(100)
000295 940e 0e12 	CALL __MODW21
                +
000297 93e0 0548+STS _SEND_MAS + ( 8 ) , R30
                 	__PUTB1MN _SEND_MAS,8
                 ; 0000 018A       //---------------------------------------------
                 ; 0000 018B 
                 ; 0000 018C 
                 ; 0000 018D      //KKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKK
                 ; 0000 018E       if(ZADANIE_S==15)
000299 91a0 0514 	LDS  R26,_ZADANIE_S
00029b 91b0 0515 	LDS  R27,_ZADANIE_S+1
00029d 971f      	SBIW R26,15
00029e f421      	BRNE _0x42
                 ; 0000 018F        K=K_BY_KOEFFICIENTS_ASFT(M);
00029f 81ac      	LDD  R26,Y+4
0002a0 81bd      	LDD  R27,Y+4+1
0002a1 d35d      	RCALL _K_BY_KOEFFICIENTS_ASFT
0002a2 c003      	RJMP _0x11E
                 ; 0000 0190       else
                 _0x42:
                 ; 0000 0191        K=K_BY_KOEFFICIENTS_REAL(M);
0002a3 81ac      	LDD  R26,Y+4
0002a4 81bd      	LDD  R27,Y+4+1
0002a5 d2dd      	RCALL _K_BY_KOEFFICIENTS_REAL
                 _0x11E:
0002a6 87ea      	STD  Y+10,R30
0002a7 87fb      	STD  Y+10+1,R31
                 ; 0000 0192 
                 ; 0000 0193       SEND_MAS[5]=K/100;
0002a8 85aa      	LDD  R26,Y+10
0002a9 85bb      	LDD  R27,Y+10+1
0002aa e6e4      	LDI  R30,LOW(100)
0002ab e0f0      	LDI  R31,HIGH(100)
0002ac 940e 0dcd 	CALL __DIVW21U
                +
0002ae 93e0 0545+STS _SEND_MAS + ( 5 ) , R30
                 	__PUTB1MN _SEND_MAS,5
                 ; 0000 0194       SEND_MAS[6]=K%100;
0002b0 85aa      	LDD  R26,Y+10
0002b1 85bb      	LDD  R27,Y+10+1
0002b2 e6e4      	LDI  R30,LOW(100)
0002b3 e0f0      	LDI  R31,HIGH(100)
0002b4 940e 0e0f 	CALL __MODW21U
                +
0002b6 93e0 0546+STS _SEND_MAS + ( 6 ) , R30
                 	__PUTB1MN _SEND_MAS,6
                 ; 0000 0195 
                 ; 0000 0196      //KKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKK
                 ; 0000 0197 
                 ; 0000 0198      ADC_BAT=read_adc(0);
0002b8 e0a0      	LDI  R26,LOW(0)
0002b9 940e 0aab 	CALL _read_adc
0002bb 93e0 0586 	STS  _ADC_BAT,R30
0002bd 93f0 0587 	STS  _ADC_BAT+1,R31
                 ; 0000 0199      ADC_I=read_adc(1);//0.021¬ ‰‡Ú˜ËÍ‡ = 1¿ = 2.1*4 = 8.4 ¿÷œ (1024 = 2.56‚)
0002bf e0a1      	LDI  R26,LOW(1)
0002c0 940e 0aab 	CALL _read_adc
0002c2 93e0 0588 	STS  _ADC_I,R30
0002c4 93f0 0589 	STS  _ADC_I+1,R31
                 ; 0000 019A      BAT_SUM=(BAT_SUM*9)/10+ADC_BAT;
0002c6 91a0 058a 	LDS  R26,_BAT_SUM
0002c8 91b0 058b 	LDS  R27,_BAT_SUM+1
0002ca e0e9      	LDI  R30,LOW(9)
0002cb 940e 0dbd 	CALL __MULB1W2U
0002cd 01df      	MOVW R26,R30
0002ce e0ea      	LDI  R30,LOW(10)
0002cf e0f0      	LDI  R31,HIGH(10)
0002d0 940e 0dcd 	CALL __DIVW21U
0002d2 91a0 0586 	LDS  R26,_ADC_BAT
0002d4 91b0 0587 	LDS  R27,_ADC_BAT+1
0002d6 0fea      	ADD  R30,R26
0002d7 1ffb      	ADC  R31,R27
0002d8 93e0 058a 	STS  _BAT_SUM,R30
0002da 93f0 058b 	STS  _BAT_SUM+1,R31
                 ; 0000 019B      ADC_BAT=BAT_SUM/10;
0002dc 91a0 058a 	LDS  R26,_BAT_SUM
0002de 91b0 058b 	LDS  R27,_BAT_SUM+1
0002e0 e0ea      	LDI  R30,LOW(10)
0002e1 e0f0      	LDI  R31,HIGH(10)
0002e2 940e 0dcd 	CALL __DIVW21U
0002e4 93e0 0586 	STS  _ADC_BAT,R30
0002e6 93f0 0587 	STS  _ADC_BAT+1,R31
                 ; 0000 019C      if(flag_I_NULL<10)
0002e8 91a0 0590 	LDS  R26,_flag_I_NULL
0002ea 30aa      	CPI  R26,LOW(0xA)
0002eb f5b8      	BRSH _0x44
                 ; 0000 019D      {
                 ; 0000 019E       I_NULL=I_NULL+ADC_I;
0002ec 91e0 0588 	LDS  R30,_ADC_I
0002ee 91f0 0589 	LDS  R31,_ADC_I+1
0002f0 91a0 058c 	LDS  R26,_I_NULL
0002f2 91b0 058d 	LDS  R27,_I_NULL+1
0002f4 9180 058e 	LDS  R24,_I_NULL+2
0002f6 9190 058f 	LDS  R25,_I_NULL+3
0002f8 2766      	CLR  R22
0002f9 2777      	CLR  R23
0002fa 940e 0d6e 	CALL __ADDD12
0002fc 93e0 058c 	STS  _I_NULL,R30
0002fe 93f0 058d 	STS  _I_NULL+1,R31
000300 9360 058e 	STS  _I_NULL+2,R22
000302 9370 058f 	STS  _I_NULL+3,R23
                 ; 0000 019F 
                 ; 0000 01A0       if(flag_I_NULL==9)
000304 91a0 0590 	LDS  R26,_flag_I_NULL
000306 30a9      	CPI  R26,LOW(0x9)
000307 f4b1      	BRNE _0x45
                 ; 0000 01A1       I_NULL=I_NULL/10;
000308 91a0 058c 	LDS  R26,_I_NULL
00030a 91b0 058d 	LDS  R27,_I_NULL+1
00030c 9180 058e 	LDS  R24,_I_NULL+2
00030e 9190 058f 	LDS  R25,_I_NULL+3
                +
000310 e0ea     +LDI R30 , LOW ( 0xA )
000311 e0f0     +LDI R31 , HIGH ( 0xA )
000312 e060     +LDI R22 , BYTE3 ( 0xA )
000313 e070     +LDI R23 , BYTE4 ( 0xA )
                 	__GETD1N 0xA
000314 940e 0e0a 	CALL __DIVD21
000316 93e0 058c 	STS  _I_NULL,R30
000318 93f0 058d 	STS  _I_NULL+1,R31
00031a 9360 058e 	STS  _I_NULL+2,R22
00031c 9370 058f 	STS  _I_NULL+3,R23
                 ; 0000 01A2 
                 ; 0000 01A3       flag_I_NULL++;
                 _0x45:
00031e 91e0 0590 	LDS  R30,_flag_I_NULL
000320 5fef      	SUBI R30,-LOW(1)
000321 93e0 0590 	STS  _flag_I_NULL,R30
                 ; 0000 01A4      }
                 ; 0000 01A5      //BATTERY LEVEL--------------------------------------------------------
                 ; 0000 01A6       BAT=ADC_BAT;//163*4-100%(12.7) 150*4-0%(11.7)
                 _0x44:
                +
000323 9140 0586+LDS R20 , 0 + ( _ADC_BAT )
000325 9150 0587+LDS R21 , 0 + ( _ADC_BAT ) + 1
                 	__GETWRMN 20,21,0,_ADC_BAT
                 ; 0000 01A7 
                 ; 0000 01A8      // if(ADC_I>=(252*4))
                 ; 0000 01A9      //  I=0;
                 ; 0000 01AA      // else
                 ; 0000 01AB 
                 ; 0000 01AC 
                 ; 0000 01AD 
                 ; 0000 01AE       if(BAT<=610)
                +
000327 3643     +CPI R20 , LOW ( 611 )
000328 e0e2     +LDI R30 , HIGH ( 611 )
000329 075e     +CPC R21 , R30
                 	__CPWRN 20,21,611
00032a f410      	BRSH _0x46
                 ; 0000 01AF        {
                 ; 0000 01B0         SEND_MAS[23]=0;
00032b e0e0      	LDI  R30,LOW(0)
00032c c009      	RJMP _0x11F
                 ; 0000 01B1        }
                 ; 0000 01B2        else
                 _0x46:
                 ; 0000 01B3        {
                 ; 0000 01B4         if(BAT>=660)
                +
00032d 3944     +CPI R20 , LOW ( 660 )
00032e e0e2     +LDI R30 , HIGH ( 660 )
00032f 075e     +CPC R21 , R30
                 	__CPWRN 20,21,660
000330 f010      	BRLO _0x48
                 ; 0000 01B5          SEND_MAS[23]=100;
000331 e6e4      	LDI  R30,LOW(100)
000332 c003      	RJMP _0x11F
                 ; 0000 01B6         else
                 _0x48:
                 ; 0000 01B7          SEND_MAS[23]=(unsigned char)((BAT-610)*2);
000333 2fe4      	MOV  R30,R20
000334 56e2      	SUBI R30,LOW(98)
000335 0fee      	LSL  R30
                 _0x11F:
                +
000336 93e0 0557+STS _SEND_MAS + ( 23 ) , R30
                 	__PUTB1MN _SEND_MAS,23
                 ; 0000 01B8        }
                 ; 0000 01B9      //--------------------------------------------------------------------
                 ; 0000 01BA 
                 ; 0000 01BB      I=ADC_I;
000338 91e0 0588 	LDS  R30,_ADC_I
00033a 91f0 0589 	LDS  R31,_ADC_I+1
00033c 83ea      	STD  Y+2,R30
00033d 83fb      	STD  Y+2+1,R31
                 ; 0000 01BC      I=(int)(((long)(I_NULL-I)*100)/84);//0.021¬ ‰‡Ú˜ËÍ‡ = 1¿ = 2.1*4 = 8.4 ¿÷œ (1024 = 2.56‚) 2.52v=0
00033e 91a0 058c 	LDS  R26,_I_NULL
000340 91b0 058d 	LDS  R27,_I_NULL+1
000342 9180 058e 	LDS  R24,_I_NULL+2
000344 9190 058f 	LDS  R25,_I_NULL+3
000346 940e 0d90 	CALL __CWD1
000348 940e 0d78 	CALL __SUBD21
                +
00034a e6e4     +LDI R30 , LOW ( 0x64 )
00034b e0f0     +LDI R31 , HIGH ( 0x64 )
00034c e060     +LDI R22 , BYTE3 ( 0x64 )
00034d e070     +LDI R23 , BYTE4 ( 0x64 )
                 	__GETD1N 0x64
00034e 940e 0dc8 	CALL __MULD12
000350 01df      	MOVW R26,R30
000351 01cb      	MOVW R24,R22
                +
000352 e5e4     +LDI R30 , LOW ( 0x54 )
000353 e0f0     +LDI R31 , HIGH ( 0x54 )
000354 e060     +LDI R22 , BYTE3 ( 0x54 )
000355 e070     +LDI R23 , BYTE4 ( 0x54 )
                 	__GETD1N 0x54
000356 940e 0e0a 	CALL __DIVD21
000358 83ea      	STD  Y+2,R30
000359 83fb      	STD  Y+2+1,R31
                 ; 0000 01BD      if(I<0)
00035a 81ab      	LDD  R26,Y+3
00035b 23aa      	TST  R26
00035c f41a      	BRPL _0x4A
                 ; 0000 01BE      I=0;
00035d e0e0      	LDI  R30,LOW(0)
00035e 83ea      	STD  Y+2,R30
00035f 83eb      	STD  Y+2+1,R30
                 ; 0000 01BF 
                 ; 0000 01C0 
                 ; 0000 01C1       SEND_MAS[9]=I/100;
                 _0x4A:
000360 81aa      	LDD  R26,Y+2
000361 81bb      	LDD  R27,Y+2+1
000362 e6e4      	LDI  R30,LOW(100)
000363 e0f0      	LDI  R31,HIGH(100)
000364 940e 0de0 	CALL __DIVW21
                +
000366 93e0 0549+STS _SEND_MAS + ( 9 ) , R30
                 	__PUTB1MN _SEND_MAS,9
                 ; 0000 01C2       SEND_MAS[10]=I%100;
000368 81aa      	LDD  R26,Y+2
000369 81bb      	LDD  R27,Y+2+1
00036a e6e4      	LDI  R30,LOW(100)
00036b e0f0      	LDI  R31,HIGH(100)
00036c 940e 0e12 	CALL __MODW21
                +
00036e 93e0 054a+STS _SEND_MAS + ( 10 ) , R30
                 	__PUTB1MN _SEND_MAS,10
                 ; 0000 01C3 
                 ; 0000 01C4 
                 ; 0000 01C5     // ÓÌÚÓÎ¸Ì‡ˇ ÒÛÏÏ‡----------------------
                 ; 0000 01C6      Control_Sum_Send();
000370 d385      	RCALL _Control_Sum_Send
                 ; 0000 01C7     //---------------------------------------
                 ; 0000 01C8       if(flag_transmission==255)
000371 91a0 053a 	LDS  R26,_flag_transmission
000373 91b0 053b 	LDS  R27,_flag_transmission+1
000375 3faf      	CPI  R26,LOW(0xFF)
000376 e0e0      	LDI  R30,HIGH(0xFF)
000377 07be      	CPC  R27,R30
000378 f441      	BRNE _0x4B
                 ; 0000 01C9       {
                 ; 0000 01CA        uart1SendArray(SEND_MAS,26);
000379 e4e0      	LDI  R30,LOW(_SEND_MAS)
00037a e0f5      	LDI  R31,HIGH(_SEND_MAS)
00037b 93fa      	ST   -Y,R31
00037c 93ea      	ST   -Y,R30
00037d e1aa      	LDI  R26,LOW(26)
00037e 940e 07de 	CALL _uart1SendArray
                 ; 0000 01CB       }
                 ; 0000 01CC       else
000380 c02a      	RJMP _0x4C
                 _0x4B:
                 ; 0000 01CD       {
                 ; 0000 01CE        if(flag_transmission==248)
000381 91a0 053a 	LDS  R26,_flag_transmission
000383 91b0 053b 	LDS  R27,_flag_transmission+1
000385 3fa8      	CPI  R26,LOW(0xF8)
000386 e0e0      	LDI  R30,HIGH(0xF8)
000387 07be      	CPC  R27,R30
000388 f469      	BRNE _0x4D
                 ; 0000 01CF        {
                 ; 0000 01D0         uart1SendArray(SETUP_MAS,8);
000389 e1e6      	LDI  R30,LOW(_SETUP_MAS)
00038a e0f5      	LDI  R31,HIGH(_SETUP_MAS)
00038b 93fa      	ST   -Y,R31
00038c 93ea      	ST   -Y,R30
00038d e0a8      	LDI  R26,LOW(8)
00038e 940e 07de 	CALL _uart1SendArray
                 ; 0000 01D1         flag_transmission=255;
000390 efef      	LDI  R30,LOW(255)
000391 e0f0      	LDI  R31,HIGH(255)
000392 93e0 053a 	STS  _flag_transmission,R30
000394 93f0 053b 	STS  _flag_transmission+1,R31
                 ; 0000 01D2        }
                 ; 0000 01D3        if(flag_transmission==249)
                 _0x4D:
000396 91a0 053a 	LDS  R26,_flag_transmission
000398 91b0 053b 	LDS  R27,_flag_transmission+1
00039a 3fa9      	CPI  R26,LOW(0xF9)
00039b e0e0      	LDI  R30,HIGH(0xF9)
00039c 07be      	CPC  R27,R30
00039d f469      	BRNE _0x4E
                 ; 0000 01D4        {
                 ; 0000 01D5         uart1SendArray(CALIBR_MAS,10);
00039e e1ee      	LDI  R30,LOW(_CALIBR_MAS)
00039f e0f5      	LDI  R31,HIGH(_CALIBR_MAS)
0003a0 93fa      	ST   -Y,R31
0003a1 93ea      	ST   -Y,R30
0003a2 e0aa      	LDI  R26,LOW(10)
0003a3 940e 07de 	CALL _uart1SendArray
                 ; 0000 01D6         flag_transmission=255;
0003a5 efef      	LDI  R30,LOW(255)
0003a6 e0f0      	LDI  R31,HIGH(255)
0003a7 93e0 053a 	STS  _flag_transmission,R30
0003a9 93f0 053b 	STS  _flag_transmission+1,R31
                 ; 0000 01D7        }
                 ; 0000 01D8       }
                 _0x4E:
                 _0x4C:
                 ; 0000 01D9 
                 ; 0000 01DA 
                 ; 0000 01DB       #asm("cli")
0003ab 94f8      	cli
                 ; 0000 01DC       lights(252-led_cycle*28,led_cycle*28,252-led_cycle*28);
0003ac e1ac      	LDI  R26,LOW(28)
0003ad 023a      	MULS R19,R26
0003ae 01f0      	MOVW R30,R0
0003af efac      	LDI  R26,LOW(252)
0003b0 1bae      	SUB  R26,R30
0003b1 93aa      	ST   -Y,R26
0003b2 e1ac      	LDI  R26,LOW(28)
0003b3 023a      	MULS R19,R26
0003b4 920a      	ST   -Y,R0
0003b5 023a      	MULS R19,R26
0003b6 01f0      	MOVW R30,R0
0003b7 efac      	LDI  R26,LOW(252)
0003b8 1bae      	SUB  R26,R30
0003b9 d2cd      	RCALL _lights
                 ; 0000 01DD       #asm("sei")
0003ba 9478      	sei
                 ; 0000 01DE 
                 ; 0000 01DF       if(led_cycle==9)
0003bb 3039      	CPI  R19,9
0003bc f409      	BRNE _0x4F
                 ; 0000 01E0       flag_led_direction=1;
0003bd e001      	LDI  R16,LOW(1)
                 ; 0000 01E1 
                 ; 0000 01E2       if(led_cycle==0)
                 _0x4F:
0003be 3030      	CPI  R19,0
0003bf f409      	BRNE _0x50
                 ; 0000 01E3       flag_led_direction=0;
0003c0 e000      	LDI  R16,LOW(0)
                 ; 0000 01E4 
                 ; 0000 01E5       if(flag_led_direction==0)
                 _0x50:
0003c1 3000      	CPI  R16,0
0003c2 f411      	BRNE _0x51
                 ; 0000 01E6       led_cycle++;
0003c3 5f3f      	SUBI R19,-1
                 ; 0000 01E7       else
0003c4 c001      	RJMP _0x52
                 _0x51:
                 ; 0000 01E8       led_cycle--;
0003c5 5031      	SUBI R19,1
                 ; 0000 01E9 
                 ; 0000 01EA       if(main_cycle>=9)
                 _0x52:
0003c6 3019      	CPI  R17,9
0003c7 f010      	BRLO _0x53
                 ; 0000 01EB       main_cycle=0;
0003c8 e010      	LDI  R17,LOW(0)
                 ; 0000 01EC       else
0003c9 c001      	RJMP _0x54
                 _0x53:
                 ; 0000 01ED       main_cycle++;
0003ca 5f1f      	SUBI R17,-1
                 ; 0000 01EE 
                 ; 0000 01EF 
                 ; 0000 01F0     }
                 _0x54:
0003cb ce02      	RJMP _0x27
                 ; 0000 01F1 }
                 _0x55:
0003cc cfff      	RJMP _0x55
                 ; .FEND
                 
                 	.DSEG
                 _0x26:
000500           	.BYTE 0x12
                 ;
                 ;
                 ;//SPEED!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                 ;//SPEED!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                 ;//SPEED!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                 ;// External Interrupt 6 service routine
                 ;interrupt [EXT_INT6] void ext_int6_isr(void) //TK_SPEED
                 ; 0000 01F9 {
                 
                 	.CSEG
                 _ext_int6_isr:
                 ; .FSTART _ext_int6_isr
0003cd 920a      	ST   -Y,R0
0003ce 921a      	ST   -Y,R1
0003cf 936a      	ST   -Y,R22
0003d0 937a      	ST   -Y,R23
0003d1 938a      	ST   -Y,R24
0003d2 939a      	ST   -Y,R25
0003d3 93aa      	ST   -Y,R26
0003d4 93ba      	ST   -Y,R27
0003d5 93ea      	ST   -Y,R30
0003d6 93fa      	ST   -Y,R31
0003d7 b7ef      	IN   R30,SREG
0003d8 93ea      	ST   -Y,R30
                 ; 0000 01FA  unsigned char H,L;
                 ; 0000 01FB  TK_COUNT[0]=TK_COUNT[1];
0003d9 931a      	ST   -Y,R17
0003da 930a      	ST   -Y,R16
                 ;	H -> R17
                 ;	L -> R16
                +
0003db 91e0 056a+LDS R30 , _TK_COUNT + ( 4 )
0003dd 91f0 056b+LDS R31 , _TK_COUNT + ( 4 ) + 1
0003df 9160 056c+LDS R22 , _TK_COUNT + ( 4 ) + 2
0003e1 9170 056d+LDS R23 , _TK_COUNT + ( 4 ) + 3
                 	__GETD1MN _TK_COUNT,4
0003e3 93e0 0566 	STS  _TK_COUNT,R30
0003e5 93f0 0567 	STS  _TK_COUNT+1,R31
0003e7 9360 0568 	STS  _TK_COUNT+2,R22
0003e9 9370 0569 	STS  _TK_COUNT+3,R23
                 ; 0000 01FC  L=TCNT1L;
0003eb b50c      	IN   R16,44
                 ; 0000 01FD  H=TCNT1H;
0003ec b51d      	IN   R17,45
                 ; 0000 01FE  TK_COUNT[1]=(unsigned long)H*256+(unsigned long)L;
0003ed 2fe1      	MOV  R30,R17
0003ee e0f0      	LDI  R31,0
0003ef 940e 0d90 	CALL __CWD1
                +
0003f1 e0a0     +LDI R26 , LOW ( 0x100 )
0003f2 e0b1     +LDI R27 , HIGH ( 0x100 )
0003f3 e080     +LDI R24 , BYTE3 ( 0x100 )
0003f4 e090     +LDI R25 , BYTE4 ( 0x100 )
                 	__GETD2N 0x100
0003f5 940e 0d9d 	CALL __MULD12U
0003f7 01df      	MOVW R26,R30
0003f8 01cb      	MOVW R24,R22
0003f9 2fe0      	MOV  R30,R16
0003fa e0f0      	LDI  R31,0
0003fb 940e 0d90 	CALL __CWD1
0003fd 940e 0d6e 	CALL __ADDD12
                +
0003ff 93e0 056a+STS _TK_COUNT + ( 4 ) , R30
000401 93f0 056b+STS _TK_COUNT + ( 4 ) + 1 , R31
000403 9360 056c+STS _TK_COUNT + ( 4 ) + 2 , R22
000405 9370 056d+STS _TK_COUNT + ( 4 ) + 3 , R23
                 	__PUTD1MN _TK_COUNT,4
                 ; 0000 01FF  if(ovf_TK>0)
000407 91a0 055d 	LDS  R26,_ovf_TK
000409 30a1      	CPI  R26,LOW(0x1)
00040a f408      	BRSH PC+2
00040b c042      	RJMP _0x56
                 ; 0000 0200  {
                 ; 0000 0201   if(ovf_TK==2)
00040c 30a2      	CPI  R26,LOW(0x2)
00040d f4d1      	BRNE _0x57
                 ; 0000 0202   {
                 ; 0000 0203    TK_DELTA=0;
00040e e0e0      	LDI  R30,LOW(0)
00040f 93e0 0572 	STS  _TK_DELTA,R30
000411 93e0 0573 	STS  _TK_DELTA+1,R30
000413 93e0 0574 	STS  _TK_DELTA+2,R30
000415 93e0 0575 	STS  _TK_DELTA+3,R30
                 ; 0000 0204    TK_COUNT[0]=0;
000417 93e0 0566 	STS  _TK_COUNT,R30
000419 93e0 0567 	STS  _TK_COUNT+1,R30
00041b 93e0 0568 	STS  _TK_COUNT+2,R30
00041d 93e0 0569 	STS  _TK_COUNT+3,R30
                 ; 0000 0205    TK_COUNT[1]=0;
                +
00041f e6ea     +LDI R30 , LOW ( _TK_COUNT + ( 4 ) )
000420 e0f5     +LDI R31 , HIGH ( _TK_COUNT + ( 4 ) )
                 	__POINTW1MN _TK_COUNT,4
                +
000421 e0a0     +LDI R26 , LOW ( 0x0 )
000422 e0b0     +LDI R27 , HIGH ( 0x0 )
000423 e080     +LDI R24 , BYTE3 ( 0x0 )
000424 e090     +LDI R25 , BYTE4 ( 0x0 )
                 	__GETD2N 0x0
000425 940e 0e54 	CALL __PUTDZ20
                 ; 0000 0206   }
                 ; 0000 0207   else
000427 c022      	RJMP _0x58
                 _0x57:
                 ; 0000 0208   {
                 ; 0000 0209    TK_DELTA=(65536-TK_COUNT[0])+TK_COUNT[1];
000428 91a0 0566 	LDS  R26,_TK_COUNT
00042a 91b0 0567 	LDS  R27,_TK_COUNT+1
00042c 9180 0568 	LDS  R24,_TK_COUNT+2
00042e 9190 0569 	LDS  R25,_TK_COUNT+3
                +
000430 e0e0     +LDI R30 , LOW ( 0x10000 )
000431 e0f0     +LDI R31 , HIGH ( 0x10000 )
000432 e061     +LDI R22 , BYTE3 ( 0x10000 )
000433 e070     +LDI R23 , BYTE4 ( 0x10000 )
                 	__GETD1N 0x10000
000434 940e 0d73 	CALL __SUBD12
000436 01df      	MOVW R26,R30
000437 01cb      	MOVW R24,R22
                +
000438 91e0 056a+LDS R30 , _TK_COUNT + ( 4 )
00043a 91f0 056b+LDS R31 , _TK_COUNT + ( 4 ) + 1
00043c 9160 056c+LDS R22 , _TK_COUNT + ( 4 ) + 2
00043e 9170 056d+LDS R23 , _TK_COUNT + ( 4 ) + 3
                 	__GETD1MN _TK_COUNT,4
000440 940e 0d6e 	CALL __ADDD12
000442 93e0 0572 	STS  _TK_DELTA,R30
000444 93f0 0573 	STS  _TK_DELTA+1,R31
000446 9360 0574 	STS  _TK_DELTA+2,R22
000448 9370 0575 	STS  _TK_DELTA+3,R23
                 ; 0000 020A   }
                 _0x58:
                 ; 0000 020B   ovf_TK=0;
00044a e0e0      	LDI  R30,LOW(0)
00044b 93e0 055d 	STS  _ovf_TK,R30
                 ; 0000 020C  }
                 ; 0000 020D  else
00044d c01a      	RJMP _0x59
                 _0x56:
                 ; 0000 020E  {
                 ; 0000 020F   TK_DELTA=TK_COUNT[1]-TK_COUNT[0];
                +
00044e 91e0 056a+LDS R30 , _TK_COUNT + ( 4 )
000450 91f0 056b+LDS R31 , _TK_COUNT + ( 4 ) + 1
000452 9160 056c+LDS R22 , _TK_COUNT + ( 4 ) + 2
000454 9170 056d+LDS R23 , _TK_COUNT + ( 4 ) + 3
                 	__GETD1MN _TK_COUNT,4
000456 91a0 0566 	LDS  R26,_TK_COUNT
000458 91b0 0567 	LDS  R27,_TK_COUNT+1
00045a 9180 0568 	LDS  R24,_TK_COUNT+2
00045c 9190 0569 	LDS  R25,_TK_COUNT+3
00045e 940e 0d73 	CALL __SUBD12
000460 93e0 0572 	STS  _TK_DELTA,R30
000462 93f0 0573 	STS  _TK_DELTA+1,R31
000464 9360 0574 	STS  _TK_DELTA+2,R22
000466 9370 0575 	STS  _TK_DELTA+3,R23
                 ; 0000 0210  }
                 _0x59:
                 ; 0000 0211 }
000468 c09b      	RJMP _0x126
                 ; .FEND
                 ;
                 ;
                 ;// External Interrupt 7 service routine
                 ;interrupt [EXT_INT7] void ext_int7_isr(void) //IK_SPEED
                 ; 0000 0216 {
                 _ext_int7_isr:
                 ; .FSTART _ext_int7_isr
000469 920a      	ST   -Y,R0
00046a 921a      	ST   -Y,R1
00046b 936a      	ST   -Y,R22
00046c 937a      	ST   -Y,R23
00046d 938a      	ST   -Y,R24
00046e 939a      	ST   -Y,R25
00046f 93aa      	ST   -Y,R26
000470 93ba      	ST   -Y,R27
000471 93ea      	ST   -Y,R30
000472 93fa      	ST   -Y,R31
000473 b7ef      	IN   R30,SREG
000474 93ea      	ST   -Y,R30
                 ; 0000 0217  unsigned char H,L;
                 ; 0000 0218  IK_COUNT[0]=IK_COUNT[1];
000475 931a      	ST   -Y,R17
000476 930a      	ST   -Y,R16
                 ;	H -> R17
                 ;	L -> R16
                +
000477 91e0 0562+LDS R30 , _IK_COUNT + ( 4 )
000479 91f0 0563+LDS R31 , _IK_COUNT + ( 4 ) + 1
00047b 9160 0564+LDS R22 , _IK_COUNT + ( 4 ) + 2
00047d 9170 0565+LDS R23 , _IK_COUNT + ( 4 ) + 3
                 	__GETD1MN _IK_COUNT,4
00047f 93e0 055e 	STS  _IK_COUNT,R30
000481 93f0 055f 	STS  _IK_COUNT+1,R31
000483 9360 0560 	STS  _IK_COUNT+2,R22
000485 9370 0561 	STS  _IK_COUNT+3,R23
                 ; 0000 0219  L=TCNT1L;
000487 b50c      	IN   R16,44
                 ; 0000 021A  H=TCNT1H;
000488 b51d      	IN   R17,45
                 ; 0000 021B  IK_COUNT[1]=(unsigned long)H*256+(unsigned long)L;
000489 2fe1      	MOV  R30,R17
00048a e0f0      	LDI  R31,0
00048b 940e 0d90 	CALL __CWD1
                +
00048d e0a0     +LDI R26 , LOW ( 0x100 )
00048e e0b1     +LDI R27 , HIGH ( 0x100 )
00048f e080     +LDI R24 , BYTE3 ( 0x100 )
000490 e090     +LDI R25 , BYTE4 ( 0x100 )
                 	__GETD2N 0x100
000491 940e 0d9d 	CALL __MULD12U
000493 01df      	MOVW R26,R30
000494 01cb      	MOVW R24,R22
000495 2fe0      	MOV  R30,R16
000496 e0f0      	LDI  R31,0
000497 940e 0d90 	CALL __CWD1
000499 940e 0d6e 	CALL __ADDD12
                +
00049b 93e0 0562+STS _IK_COUNT + ( 4 ) , R30
00049d 93f0 0563+STS _IK_COUNT + ( 4 ) + 1 , R31
00049f 9360 0564+STS _IK_COUNT + ( 4 ) + 2 , R22
0004a1 9370 0565+STS _IK_COUNT + ( 4 ) + 3 , R23
                 	__PUTD1MN _IK_COUNT,4
                 ; 0000 021C  if(ovf_IK>0)
0004a3 91a0 055c 	LDS  R26,_ovf_IK
0004a5 30a1      	CPI  R26,LOW(0x1)
0004a6 f408      	BRSH PC+2
0004a7 c042      	RJMP _0x5A
                 ; 0000 021D  {
                 ; 0000 021E   if(ovf_IK==2)
0004a8 30a2      	CPI  R26,LOW(0x2)
0004a9 f4d1      	BRNE _0x5B
                 ; 0000 021F   {
                 ; 0000 0220    IK_DELTA=0;
0004aa e0e0      	LDI  R30,LOW(0)
0004ab 93e0 056e 	STS  _IK_DELTA,R30
0004ad 93e0 056f 	STS  _IK_DELTA+1,R30
0004af 93e0 0570 	STS  _IK_DELTA+2,R30
0004b1 93e0 0571 	STS  _IK_DELTA+3,R30
                 ; 0000 0221    IK_COUNT[0]=0;
0004b3 93e0 055e 	STS  _IK_COUNT,R30
0004b5 93e0 055f 	STS  _IK_COUNT+1,R30
0004b7 93e0 0560 	STS  _IK_COUNT+2,R30
0004b9 93e0 0561 	STS  _IK_COUNT+3,R30
                 ; 0000 0222    IK_COUNT[1]=0;
                +
0004bb e6e2     +LDI R30 , LOW ( _IK_COUNT + ( 4 ) )
0004bc e0f5     +LDI R31 , HIGH ( _IK_COUNT + ( 4 ) )
                 	__POINTW1MN _IK_COUNT,4
                +
0004bd e0a0     +LDI R26 , LOW ( 0x0 )
0004be e0b0     +LDI R27 , HIGH ( 0x0 )
0004bf e080     +LDI R24 , BYTE3 ( 0x0 )
0004c0 e090     +LDI R25 , BYTE4 ( 0x0 )
                 	__GETD2N 0x0
0004c1 940e 0e54 	CALL __PUTDZ20
                 ; 0000 0223   }
                 ; 0000 0224   else
0004c3 c022      	RJMP _0x5C
                 _0x5B:
                 ; 0000 0225   {
                 ; 0000 0226    IK_DELTA=(65536-IK_COUNT[0])+IK_COUNT[1];
0004c4 91a0 055e 	LDS  R26,_IK_COUNT
0004c6 91b0 055f 	LDS  R27,_IK_COUNT+1
0004c8 9180 0560 	LDS  R24,_IK_COUNT+2
0004ca 9190 0561 	LDS  R25,_IK_COUNT+3
                +
0004cc e0e0     +LDI R30 , LOW ( 0x10000 )
0004cd e0f0     +LDI R31 , HIGH ( 0x10000 )
0004ce e061     +LDI R22 , BYTE3 ( 0x10000 )
0004cf e070     +LDI R23 , BYTE4 ( 0x10000 )
                 	__GETD1N 0x10000
0004d0 940e 0d73 	CALL __SUBD12
0004d2 01df      	MOVW R26,R30
0004d3 01cb      	MOVW R24,R22
                +
0004d4 91e0 0562+LDS R30 , _IK_COUNT + ( 4 )
0004d6 91f0 0563+LDS R31 , _IK_COUNT + ( 4 ) + 1
0004d8 9160 0564+LDS R22 , _IK_COUNT + ( 4 ) + 2
0004da 9170 0565+LDS R23 , _IK_COUNT + ( 4 ) + 3
                 	__GETD1MN _IK_COUNT,4
0004dc 940e 0d6e 	CALL __ADDD12
0004de 93e0 056e 	STS  _IK_DELTA,R30
0004e0 93f0 056f 	STS  _IK_DELTA+1,R31
0004e2 9360 0570 	STS  _IK_DELTA+2,R22
0004e4 9370 0571 	STS  _IK_DELTA+3,R23
                 ; 0000 0227   }
                 _0x5C:
                 ; 0000 0228   ovf_IK=0;
0004e6 e0e0      	LDI  R30,LOW(0)
0004e7 93e0 055c 	STS  _ovf_IK,R30
                 ; 0000 0229  }
                 ; 0000 022A  else
0004e9 c01a      	RJMP _0x5D
                 _0x5A:
                 ; 0000 022B  {
                 ; 0000 022C   IK_DELTA=IK_COUNT[1]-IK_COUNT[0];
                +
0004ea 91e0 0562+LDS R30 , _IK_COUNT + ( 4 )
0004ec 91f0 0563+LDS R31 , _IK_COUNT + ( 4 ) + 1
0004ee 9160 0564+LDS R22 , _IK_COUNT + ( 4 ) + 2
0004f0 9170 0565+LDS R23 , _IK_COUNT + ( 4 ) + 3
                 	__GETD1MN _IK_COUNT,4
0004f2 91a0 055e 	LDS  R26,_IK_COUNT
0004f4 91b0 055f 	LDS  R27,_IK_COUNT+1
0004f6 9180 0560 	LDS  R24,_IK_COUNT+2
0004f8 9190 0561 	LDS  R25,_IK_COUNT+3
0004fa 940e 0d73 	CALL __SUBD12
0004fc 93e0 056e 	STS  _IK_DELTA,R30
0004fe 93f0 056f 	STS  _IK_DELTA+1,R31
000500 9360 0570 	STS  _IK_DELTA+2,R22
000502 9370 0571 	STS  _IK_DELTA+3,R23
                 ; 0000 022D  }
                 _0x5D:
                 ; 0000 022E }
                 _0x126:
000504 9109      	LD   R16,Y+
000505 9119      	LD   R17,Y+
000506 91e9      	LD   R30,Y+
000507 bfef      	OUT  SREG,R30
000508 91f9      	LD   R31,Y+
000509 91e9      	LD   R30,Y+
00050a 91b9      	LD   R27,Y+
00050b 91a9      	LD   R26,Y+
00050c 9199      	LD   R25,Y+
00050d 9189      	LD   R24,Y+
00050e 9179      	LD   R23,Y+
00050f 9169      	LD   R22,Y+
000510 9019      	LD   R1,Y+
000511 9009      	LD   R0,Y+
000512 9518      	RETI
                 ; .FEND
                 ;
                 ;
                 ;
                 ;
                 ;
                 ;void init_all(void)
                 ; 0000 0235 {
                 _init_all:
                 ; .FSTART _init_all
                 ; 0000 0236 
                 ; 0000 0237  // Port B initialization
                 ; 0000 0238  DDRB.4=1;
000513 9abc      	SBI  0x17,4
                 ; 0000 0239  DDRB.6=1;
000514 9abe      	SBI  0x17,6
                 ; 0000 023A 
                 ; 0000 023B  // Port C initialization
                 ; 0000 023C  // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=Out Func0=Out
                 ; 0000 023D  // State7=T State6=T State5=T State4=T State3=T State2=T State1=0 State0=0
                 ; 0000 023E  PORTC=0x00;
000515 e0e0      	LDI  R30,LOW(0)
000516 bbe5      	OUT  0x15,R30
                 ; 0000 023F  DDRC=0x03;
000517 e0e3      	LDI  R30,LOW(3)
000518 bbe4      	OUT  0x14,R30
                 ; 0000 0240  PORTC.2=0;//GPS on
000519 98aa      	CBI  0x15,2
                 ; 0000 0241  DDRC.2=1;
00051a 9aa2      	SBI  0x14,2
                 ; 0000 0242 
                 ; 0000 0243 
                 ; 0000 0244  // Timer/Counter 0 initialization
                 ; 0000 0245  // Clock source: System Clock
                 ; 0000 0246  // Clock value: 1382,400 kHz
                 ; 0000 0247  // Mode: Phase correct PWM top=0xFF
                 ; 0000 0248  // OC0 output: Inverted PWM
                 ; 0000 0249  ASSR=0x00;
00051b e0e0      	LDI  R30,LOW(0)
00051c bfe0      	OUT  0x30,R30
                 ; 0000 024A  TCCR0=0x72;
00051d e7e2      	LDI  R30,LOW(114)
00051e bfe3      	OUT  0x33,R30
                 ; 0000 024B  TCNT0=0x00;
00051f e0e0      	LDI  R30,LOW(0)
000520 bfe2      	OUT  0x32,R30
                 ; 0000 024C  OCR0=255;
000521 efef      	LDI  R30,LOW(255)
000522 bfe1      	OUT  0x31,R30
                 ; 0000 024D 
                 ; 0000 024E  // Timer/Counter 1 initialization
                 ; 0000 024F // Clock source: System Clock
                 ; 0000 0250 // Clock value: 172,800 kHz
                 ; 0000 0251 // Mode: Normal top=FFFFh
                 ; 0000 0252 // OC1A output: Discon.
                 ; 0000 0253 // OC1B output: Discon.
                 ; 0000 0254 // OC1C output: Discon.
                 ; 0000 0255 // Noise Canceler: Off
                 ; 0000 0256 // Input Capture on Falling Edge
                 ; 0000 0257 // Timer 1 Overflow Interrupt: On
                 ; 0000 0258 // Input Capture Interrupt: Off
                 ; 0000 0259 // Compare A Match Interrupt: Off
                 ; 0000 025A // Compare B Match Interrupt: Off
                 ; 0000 025B // Compare C Match Interrupt: Off
                 ; 0000 025C TCCR1A=0x00;
000523 e0e0      	LDI  R30,LOW(0)
000524 bdef      	OUT  0x2F,R30
                 ; 0000 025D TCCR1B=0x03;
000525 e0e3      	LDI  R30,LOW(3)
000526 bdee      	OUT  0x2E,R30
                 ; 0000 025E TCNT1H=0x00;
000527 e0e0      	LDI  R30,LOW(0)
000528 bded      	OUT  0x2D,R30
                 ; 0000 025F TCNT1L=0x00;
000529 bdec      	OUT  0x2C,R30
                 ; 0000 0260 ICR1H=0x00;
00052a bde7      	OUT  0x27,R30
                 ; 0000 0261 ICR1L=0x00;
00052b bde6      	OUT  0x26,R30
                 ; 0000 0262 OCR1AH=0x00;
00052c bdeb      	OUT  0x2B,R30
                 ; 0000 0263 OCR1AL=0x00;
00052d bdea      	OUT  0x2A,R30
                 ; 0000 0264 OCR1BH=0x00;
00052e bde9      	OUT  0x29,R30
                 ; 0000 0265 OCR1BL=0x00;
00052f bde8      	OUT  0x28,R30
                 ; 0000 0266 OCR1CH=0x00;
000530 93e0 0079 	STS  121,R30
                 ; 0000 0267 OCR1CL=0x00;
000532 93e0 0078 	STS  120,R30
                 ; 0000 0268 
                 ; 0000 0269 
                 ; 0000 026A 
                 ; 0000 026B  // Timer/Counter 2 initialization
                 ; 0000 026C  // Clock source: System Clock
                 ; 0000 026D  // Clock value: 10,800 kHz
                 ; 0000 026E  // Mode: Normal top=0xFF
                 ; 0000 026F  // OC2 output: Disconnected
                 ; 0000 0270  TCCR2=0x05;
000534 e0e5      	LDI  R30,LOW(5)
000535 bde5      	OUT  0x25,R30
                 ; 0000 0271  TCNT2=0x00;
000536 e0e0      	LDI  R30,LOW(0)
000537 bde4      	OUT  0x24,R30
                 ; 0000 0272  OCR2=0x00;
000538 bde3      	OUT  0x23,R30
                 ; 0000 0273 
                 ; 0000 0274 
                 ; 0000 0275 // Timer/Counter 3 initialization
                 ; 0000 0276 // Clock source: System Clock
                 ; 0000 0277 // Clock value: 10,800 kHz
                 ; 0000 0278 // Mode: Normal top=0xFFFF
                 ; 0000 0279 // OC3A output: Discon.
                 ; 0000 027A // OC3B output: Discon.
                 ; 0000 027B // OC3C output: Discon.
                 ; 0000 027C // Noise Canceler: Off
                 ; 0000 027D // Input Capture on Falling Edge
                 ; 0000 027E // Timer3 Overflow Interrupt: Off
                 ; 0000 027F // Input Capture Interrupt: Off
                 ; 0000 0280 // Compare A Match Interrupt: Off
                 ; 0000 0281 // Compare B Match Interrupt: Off
                 ; 0000 0282 // Compare C Match Interrupt: Off
                 ; 0000 0283 TCCR3A=0x00;
000539 93e0 008b 	STS  139,R30
                 ; 0000 0284 TCCR3B=0x05;
00053b e0e5      	LDI  R30,LOW(5)
00053c 93e0 008a 	STS  138,R30
                 ; 0000 0285 TCNT3H=0x00;
00053e e0e0      	LDI  R30,LOW(0)
00053f 93e0 0089 	STS  137,R30
                 ; 0000 0286 TCNT3L=0x00;
000541 93e0 0088 	STS  136,R30
                 ; 0000 0287 ICR3H=0x00;
000543 93e0 0081 	STS  129,R30
                 ; 0000 0288 ICR3L=0x00;
000545 93e0 0080 	STS  128,R30
                 ; 0000 0289 OCR3AH=0x00;
000547 93e0 0087 	STS  135,R30
                 ; 0000 028A OCR3AL=0x00;
000549 93e0 0086 	STS  134,R30
                 ; 0000 028B OCR3BH=0x00;
00054b 93e0 0085 	STS  133,R30
                 ; 0000 028C OCR3BL=0x00;
00054d 93e0 0084 	STS  132,R30
                 ; 0000 028D OCR3CH=0x00;
00054f 93e0 0083 	STS  131,R30
                 ; 0000 028E OCR3CL=0x00;
000551 93e0 0082 	STS  130,R30
                 ; 0000 028F 
                 ; 0000 0290 
                 ; 0000 0291  // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 0292  TIMSK=0x44;
000553 e4e4      	LDI  R30,LOW(68)
000554 bfe7      	OUT  0x37,R30
                 ; 0000 0293 
                 ; 0000 0294  ETIMSK=0x00;
000555 e0e0      	LDI  R30,LOW(0)
000556 93e0 007d 	STS  125,R30
                 ; 0000 0295 
                 ; 0000 0296  // External Interrupt(s) initialization
                 ; 0000 0297  // INT0: Off
                 ; 0000 0298  // INT1: Off
                 ; 0000 0299  // INT2: Off
                 ; 0000 029A  // INT3: Off
                 ; 0000 029B  // INT4: Off
                 ; 0000 029C  // INT5: Off
                 ; 0000 029D  // INT6: On
                 ; 0000 029E  // INT6 Mode: Rising Edge
                 ; 0000 029F  // INT7: On
                 ; 0000 02A0  // INT7 Mode: Rising Edge
                 ; 0000 02A1  EICRA=0x00;
000558 93e0 006a 	STS  106,R30
                 ; 0000 02A2  EICRB=0xF0;
00055a efe0      	LDI  R30,LOW(240)
00055b bfea      	OUT  0x3A,R30
                 ; 0000 02A3  EIMSK=0xC0;
00055c ece0      	LDI  R30,LOW(192)
00055d bfe9      	OUT  0x39,R30
                 ; 0000 02A4  EIFR=0xC0;
00055e bfe8      	OUT  0x38,R30
                 ; 0000 02A5 
                 ; 0000 02A6  // USART0 initialization
                 ; 0000 02A7  // Communication Parameters: 8 Data, 1 Stop, No Parity
                 ; 0000 02A8  // USART0 Receiver: On
                 ; 0000 02A9  // USART0 Transmitter: On
                 ; 0000 02AA  // USART0 Mode: Asynchronous
                 ; 0000 02AB  // USART0 Baud Rate: 9600
                 ; 0000 02AC  UCSR0A=0x00;
00055f e0e0      	LDI  R30,LOW(0)
000560 b9eb      	OUT  0xB,R30
                 ; 0000 02AD  UCSR0B=0x98;
000561 e9e8      	LDI  R30,LOW(152)
000562 b9ea      	OUT  0xA,R30
                 ; 0000 02AE  UCSR0C=0x06;
000563 e0e6      	LDI  R30,LOW(6)
000564 93e0 0095 	STS  149,R30
                 ; 0000 02AF  UBRR0H=0x00;
000566 e0e0      	LDI  R30,LOW(0)
000567 93e0 0090 	STS  144,R30
                 ; 0000 02B0  UBRR0L=0x47;
000569 e4e7      	LDI  R30,LOW(71)
00056a b9e9      	OUT  0x9,R30
                 ; 0000 02B1 
                 ; 0000 02B2  // USART1 initialization
                 ; 0000 02B3  // Communication Parameters: 8 Data, 1 Stop, No Parity
                 ; 0000 02B4  // USART1 Receiver: On
                 ; 0000 02B5  // USART1 Transmitter: On
                 ; 0000 02B6  // USART1 Mode: Asynchronous
                 ; 0000 02B7  // USART1 Baud Rate: 9600
                 ; 0000 02B8  UCSR1A=0x00;
00056b e0e0      	LDI  R30,LOW(0)
00056c 93e0 009b 	STS  155,R30
                 ; 0000 02B9  UCSR1B=0x98;
00056e e9e8      	LDI  R30,LOW(152)
00056f 93e0 009a 	STS  154,R30
                 ; 0000 02BA  UCSR1C=0x06;
000571 e0e6      	LDI  R30,LOW(6)
000572 93e0 009d 	STS  157,R30
                 ; 0000 02BB  UBRR1H=0x00;
000574 e0e0      	LDI  R30,LOW(0)
000575 93e0 0098 	STS  152,R30
                 ; 0000 02BC  UBRR1L=0x47;
000577 e4e7      	LDI  R30,LOW(71)
000578 93e0 0099 	STS  153,R30
                 ; 0000 02BD 
                 ; 0000 02BE  // Analog Comparator initialization
                 ; 0000 02BF  // Analog Comparator: Off
                 ; 0000 02C0  // Analog Comparator Input Capture by Timer/Counter 1: Off
                 ; 0000 02C1  ACSR=0x80;
00057a e8e0      	LDI  R30,LOW(128)
00057b b9e8      	OUT  0x8,R30
                 ; 0000 02C2  SFIOR=0x00;
00057c e0e0      	LDI  R30,LOW(0)
00057d bde0      	OUT  0x20,R30
                 ; 0000 02C3 
                 ; 0000 02C4  // ADC initialization
                 ; 0000 02C5  // ADC Clock frequency: 86,400 kHz
                 ; 0000 02C6  // ADC Voltage Reference: Int., cap. on AREF
                 ; 0000 02C7  ADMUX=ADC_VREF_TYPE & 0xff;
00057e ece0      	LDI  R30,LOW(192)
00057f b9e7      	OUT  0x7,R30
                 ; 0000 02C8  ADCSRA=0x87;
000580 e8e7      	LDI  R30,LOW(135)
000581 b9e6      	OUT  0x6,R30
                 ; 0000 02C9 }
000582 9508      	RET
                 ; .FEND
                 ;
                 ;unsigned int K_BY_KOEFFICIENTS_REAL(unsigned int M)
                 ; 0000 02CC {
                 _K_BY_KOEFFICIENTS_REAL:
                 ; .FSTART _K_BY_KOEFFICIENTS_REAL
                 ; 0000 02CD unsigned long F,W,K;
                 ; 0000 02CE //WEIGHT_NULL=6679, LOADCELL_NULL=618, DELTA_WEIGHT10KG=748, DELTA_LOADCELL10KG=772
                 ; 0000 02CF if(M<LOADCELL_NULL)
000583 93ba      	ST   -Y,R27
000584 93aa      	ST   -Y,R26
000585 972c      	SBIW R28,12
                 ;	M -> Y+12
                 ;	F -> Y+8
                 ;	W -> Y+4
                 ;	K -> Y+0
000586 85ac      	LDD  R26,Y+12
000587 85bd      	LDD  R27,Y+12+1
000588 15a6      	CP   R26,R6
000589 05b7      	CPC  R27,R7
00058a f418      	BRSH _0x66
                 ; 0000 02D0  return 0;
00058b e0e0      	LDI  R30,LOW(0)
00058c e0f0      	LDI  R31,HIGH(0)
00058d c0e9      	RJMP _0x2060005
                 ; 0000 02D1 
                 ; 0000 02D2 F=((M-(unsigned long)LOADCELL_NULL)*1000)/((unsigned long)DELTA_LOADCELL10KG);
                 _0x66:
00058e 01f3      	MOVW R30,R6
00058f 2766      	CLR  R22
000590 2777      	CLR  R23
000591 85ac      	LDD  R26,Y+12
000592 85bd      	LDD  R27,Y+12+1
000593 2788      	CLR  R24
000594 2799      	CLR  R25
000595 940e 0d78 	CALL __SUBD21
                +
000597 eee8     +LDI R30 , LOW ( 0x3E8 )
000598 e0f3     +LDI R31 , HIGH ( 0x3E8 )
000599 e060     +LDI R22 , BYTE3 ( 0x3E8 )
00059a e070     +LDI R23 , BYTE4 ( 0x3E8 )
                 	__GETD1N 0x3E8
00059b 940e 0d9d 	CALL __MULD12U
00059d 01df      	MOVW R26,R30
00059e 01cb      	MOVW R24,R22
00059f 01f5      	MOVW R30,R10
0005a0 2766      	CLR  R22
0005a1 2777      	CLR  R23
0005a2 940e 0de5 	CALL __DIVD21U
                +
0005a4 87e8     +STD Y + 8 , R30
0005a5 87f9     +STD Y + 8 + 1 , R31
0005a6 876a     +STD Y + 8 + 2 , R22
0005a7 877b     +STD Y + 8 + 3 , R23
                 	__PUTD1S 8
                 ; 0000 02D3 W=(unsigned long)WEIGHT_NULL-((unsigned long)DELTA_WEIGHT10KG*F)/1000;
0005a8 01f2      	MOVW R30,R4
0005a9 2766      	CLR  R22
0005aa 2777      	CLR  R23
0005ab 937f      	PUSH R23
0005ac 936f      	PUSH R22
0005ad 93ff      	PUSH R31
0005ae 93ef      	PUSH R30
0005af 01f4      	MOVW R30,R8
0005b0 2766      	CLR  R22
0005b1 2777      	CLR  R23
                +
0005b2 85a8     +LDD R26 , Y + 8
0005b3 85b9     +LDD R27 , Y + 8 + 1
0005b4 858a     +LDD R24 , Y + 8 + 2
0005b5 859b     +LDD R25 , Y + 8 + 3
                 	__GETD2S 8
0005b6 940e 0d9d 	CALL __MULD12U
0005b8 01df      	MOVW R26,R30
0005b9 01cb      	MOVW R24,R22
                +
0005ba eee8     +LDI R30 , LOW ( 0x3E8 )
0005bb e0f3     +LDI R31 , HIGH ( 0x3E8 )
0005bc e060     +LDI R22 , BYTE3 ( 0x3E8 )
0005bd e070     +LDI R23 , BYTE4 ( 0x3E8 )
                 	__GETD1N 0x3E8
0005be 940e 0de5 	CALL __DIVD21U
0005c0 91af      	POP  R26
0005c1 91bf      	POP  R27
0005c2 918f      	POP  R24
0005c3 919f      	POP  R25
0005c4 940e 0d78 	CALL __SUBD21
                +
0005c6 83ac     +STD Y + 4 , R26
0005c7 83bd     +STD Y + 4 + 1 , R27
0005c8 838e     +STD Y + 4 + 2 , R24
0005c9 839f     +STD Y + 4 + 3 , R25
                 	__PUTD2S 4
                 ; 0000 02D4 if(W>0)
                +
0005ca 81ac     +LDD R26 , Y + 4
0005cb 81bd     +LDD R27 , Y + 4 + 1
0005cc 818e     +LDD R24 , Y + 4 + 2
0005cd 819f     +LDD R25 , Y + 4 + 3
                 	__GETD2S 4
0005ce 940e 0e76 	CALL __CPD02
0005d0 f4b8      	BRSH _0x67
                 ; 0000 02D5  K=((F*1000)/W) - 28; //frCoef -
                +
0005d1 85e8     +LDD R30 , Y + 8
0005d2 85f9     +LDD R31 , Y + 8 + 1
0005d3 856a     +LDD R22 , Y + 8 + 2
0005d4 857b     +LDD R23 , Y + 8 + 3
                 	__GETD1S 8
                +
0005d5 eea8     +LDI R26 , LOW ( 0x3E8 )
0005d6 e0b3     +LDI R27 , HIGH ( 0x3E8 )
0005d7 e080     +LDI R24 , BYTE3 ( 0x3E8 )
0005d8 e090     +LDI R25 , BYTE4 ( 0x3E8 )
                 	__GETD2N 0x3E8
0005d9 940e 0d9d 	CALL __MULD12U
0005db 01df      	MOVW R26,R30
0005dc 01cb      	MOVW R24,R22
                +
0005dd 81ec     +LDD R30 , Y + 4
0005de 81fd     +LDD R31 , Y + 4 + 1
0005df 816e     +LDD R22 , Y + 4 + 2
0005e0 817f     +LDD R23 , Y + 4 + 3
                 	__GETD1S 4
0005e1 940e 0de5 	CALL __DIVD21U
                +
0005e3 51ec     +SUBI R30 , LOW ( 28 )
0005e4 40f0     +SBCI R31 , HIGH ( 28 )
0005e5 4060     +SBCI R22 , BYTE3 ( 28 )
0005e6 4070     +SBCI R23 , BYTE4 ( 28 )
                 	__SUBD1N 28
0005e7 c004      	RJMP _0x120
                 ; 0000 02D6 else
                 _0x67:
                 ; 0000 02D7  K=1800;
                +
0005e8 e0e8     +LDI R30 , LOW ( 0x708 )
0005e9 e0f7     +LDI R31 , HIGH ( 0x708 )
0005ea e060     +LDI R22 , BYTE3 ( 0x708 )
0005eb e070     +LDI R23 , BYTE4 ( 0x708 )
                 	__GETD1N 0x708
                 _0x120:
0005ec 940e 0e4f 	CALL __PUTD1S0
                 ; 0000 02D8 
                 ; 0000 02D9 if(K>1800)
0005ee 940e 0e4a 	CALL __GETD2S0
                +
0005f0 30a9     +CPI R26 , LOW ( 0x709 )
0005f1 e0e7     +LDI R30 , HIGH ( 0x709 )
0005f2 07be     +CPC R27 , R30
0005f3 e0e0     +LDI R30 , BYTE3 ( 0x709 )
0005f4 078e     +CPC R24 , R30
0005f5 e0e0     +LDI R30 , BYTE4 ( 0x709 )
0005f6 079e     +CPC R25 , R30
                 	__CPD2N 0x709
0005f7 f030      	BRLO _0x69
                 ; 0000 02DA  K=1800;
                +
0005f8 e0e8     +LDI R30 , LOW ( 0x708 )
0005f9 e0f7     +LDI R31 , HIGH ( 0x708 )
0005fa e060     +LDI R22 , BYTE3 ( 0x708 )
0005fb e070     +LDI R23 , BYTE4 ( 0x708 )
                 	__GETD1N 0x708
0005fc 940e 0e4f 	CALL __PUTD1S0
                 ; 0000 02DB return K;
                 _0x69:
0005fe c076      	RJMP _0x2060004
                 ; 0000 02DC }
                 ; .FEND
                 ;
                 ;unsigned int K_BY_KOEFFICIENTS_ASFT(unsigned int M)
                 ; 0000 02DF {
                 _K_BY_KOEFFICIENTS_ASFT:
                 ; .FSTART _K_BY_KOEFFICIENTS_ASFT
                 ; 0000 02E0  long F,W,K;
                 ; 0000 02E1 //WEIGHT_NULL=6679, LOADCELL_NULL=618, DELTA_WEIGHT10KG=748, DELTA_LOADCELL10KG=772
                 ; 0000 02E2 
                 ; 0000 02E3  F=(long)M-LOADCELL_NULL;
0005ff 93ba      	ST   -Y,R27
000600 93aa      	ST   -Y,R26
000601 972c      	SBIW R28,12
                 ;	M -> Y+12
                 ;	F -> Y+8
                 ;	W -> Y+4
                 ;	K -> Y+0
000602 85ac      	LDD  R26,Y+12
000603 85bd      	LDD  R27,Y+12+1
000604 2788      	CLR  R24
000605 2799      	CLR  R25
000606 01f3      	MOVW R30,R6
000607 2766      	CLR  R22
000608 2777      	CLR  R23
000609 940e 0d78 	CALL __SUBD21
                +
00060b 87a8     +STD Y + 8 , R26
00060c 87b9     +STD Y + 8 + 1 , R27
00060d 878a     +STD Y + 8 + 2 , R24
00060e 879b     +STD Y + 8 + 3 , R25
                 	__PUTD2S 8
                 ; 0000 02E4  if(F<0)
00060f 85ab      	LDD  R26,Y+11
000610 23aa      	TST  R26
000611 f42a      	BRPL _0x6A
                 ; 0000 02E5   F=0;
000612 e0e0      	LDI  R30,LOW(0)
                +
000613 87e8     +STD Y + 8 , R30
000614 87e9     +STD Y + 8 + 1 , R30
000615 87ea     +STD Y + 8 + 2 , R30
000616 87eb     +STD Y + 8 + 3 , R30
                 	__CLRD1S 8
                 ; 0000 02E6   F=(F*1000)/DELTA_LOADCELL10KG;
                 _0x6A:
                +
000617 85e8     +LDD R30 , Y + 8
000618 85f9     +LDD R31 , Y + 8 + 1
000619 856a     +LDD R22 , Y + 8 + 2
00061a 857b     +LDD R23 , Y + 8 + 3
                 	__GETD1S 8
                +
00061b eea8     +LDI R26 , LOW ( 0x3E8 )
00061c e0b3     +LDI R27 , HIGH ( 0x3E8 )
00061d e080     +LDI R24 , BYTE3 ( 0x3E8 )
00061e e090     +LDI R25 , BYTE4 ( 0x3E8 )
                 	__GETD2N 0x3E8
00061f 940e 0dc8 	CALL __MULD12
000621 01df      	MOVW R26,R30
000622 01cb      	MOVW R24,R22
000623 01f5      	MOVW R30,R10
000624 2766      	CLR  R22
000625 2777      	CLR  R23
000626 940e 0e0a 	CALL __DIVD21
                +
000628 87e8     +STD Y + 8 , R30
000629 87f9     +STD Y + 8 + 1 , R31
00062a 876a     +STD Y + 8 + 2 , R22
00062b 877b     +STD Y + 8 + 3 , R23
                 	__PUTD1S 8
                 ; 0000 02E7  W=WEIGHT_NULL;
00062c 01f2      	MOVW R30,R4
00062d 2766      	CLR  R22
00062e 2777      	CLR  R23
                +
00062f 83ec     +STD Y + 4 , R30
000630 83fd     +STD Y + 4 + 1 , R31
000631 836e     +STD Y + 4 + 2 , R22
000632 837f     +STD Y + 4 + 3 , R23
                 	__PUTD1S 4
                 ; 0000 02E8  K=(F*1000)/W;
                +
000633 85e8     +LDD R30 , Y + 8
000634 85f9     +LDD R31 , Y + 8 + 1
000635 856a     +LDD R22 , Y + 8 + 2
000636 857b     +LDD R23 , Y + 8 + 3
                 	__GETD1S 8
                +
000637 eea8     +LDI R26 , LOW ( 0x3E8 )
000638 e0b3     +LDI R27 , HIGH ( 0x3E8 )
000639 e080     +LDI R24 , BYTE3 ( 0x3E8 )
00063a e090     +LDI R25 , BYTE4 ( 0x3E8 )
                 	__GETD2N 0x3E8
00063b 940e 0dc8 	CALL __MULD12
00063d 01df      	MOVW R26,R30
00063e 01cb      	MOVW R24,R22
                +
00063f 81ec     +LDD R30 , Y + 4
000640 81fd     +LDD R31 , Y + 4 + 1
000641 816e     +LDD R22 , Y + 4 + 2
000642 817f     +LDD R23 , Y + 4 + 3
                 	__GETD1S 4
000643 940e 0e0a 	CALL __DIVD21
000645 940e 0e4f 	CALL __PUTD1S0
                 ; 0000 02E9 
                 ; 0000 02EA if(K>3000)
000647 940e 0e4a 	CALL __GETD2S0
                +
000649 3ba9     +CPI R26 , LOW ( 0xBB9 )
00064a e0eb     +LDI R30 , HIGH ( 0xBB9 )
00064b 07be     +CPC R27 , R30
00064c e0e0     +LDI R30 , BYTE3 ( 0xBB9 )
00064d 078e     +CPC R24 , R30
00064e e0e0     +LDI R30 , BYTE4 ( 0xBB9 )
00064f 079e     +CPC R25 , R30
                 	__CPD2N 0xBB9
000650 f034      	BRLT _0x6B
                 ; 0000 02EB  K=3000;
                +
000651 ebe8     +LDI R30 , LOW ( 0xBB8 )
000652 e0fb     +LDI R31 , HIGH ( 0xBB8 )
000653 e060     +LDI R22 , BYTE3 ( 0xBB8 )
000654 e070     +LDI R23 , BYTE4 ( 0xBB8 )
                 	__GETD1N 0xBB8
000655 940e 0e4f 	CALL __PUTD1S0
                 ; 0000 02EC 
                 ; 0000 02ED  if(K>100)
                 _0x6B:
000657 940e 0e4a 	CALL __GETD2S0
                +
000659 36a5     +CPI R26 , LOW ( 0x65 )
00065a e0e0     +LDI R30 , HIGH ( 0x65 )
00065b 07be     +CPC R27 , R30
00065c e0e0     +LDI R30 , BYTE3 ( 0x65 )
00065d 078e     +CPC R24 , R30
00065e e0e0     +LDI R30 , BYTE4 ( 0x65 )
00065f 079e     +CPC R25 , R30
                 	__CPD2N 0x65
000660 f0a4      	BRLT _0x6C
                 ; 0000 02EE   K=1000000/(1000000/(unsigned long)K+430-637);
000661 940e 0e45 	CALL __GETD1S0
                +
000663 e4a0     +LDI R26 , LOW ( 0xF4240 )
000664 e4b2     +LDI R27 , HIGH ( 0xF4240 )
000665 e08f     +LDI R24 , BYTE3 ( 0xF4240 )
000666 e090     +LDI R25 , BYTE4 ( 0xF4240 )
                 	__GETD2N 0xF4240
000667 940e 0de5 	CALL __DIVD21U
                +
000669 5cef     +SUBI R30 , LOW ( 207 )
00066a 40f0     +SBCI R31 , HIGH ( 207 )
00066b 4060     +SBCI R22 , BYTE3 ( 207 )
00066c 4070     +SBCI R23 , BYTE4 ( 207 )
                 	__SUBD1N 207
                +
00066d e4a0     +LDI R26 , LOW ( 0xF4240 )
00066e e4b2     +LDI R27 , HIGH ( 0xF4240 )
00066f e08f     +LDI R24 , BYTE3 ( 0xF4240 )
000670 e090     +LDI R25 , BYTE4 ( 0xF4240 )
                 	__GETD2N 0xF4240
000671 940e 0de5 	CALL __DIVD21U
000673 940e 0e4f 	CALL __PUTD1S0
                 ; 0000 02EF  return K;
                 _0x6C:
                 _0x2060004:
000675 81e8      	LD   R30,Y
000676 81f9      	LDD  R31,Y+1
                 _0x2060005:
000677 962e      	ADIW R28,14
000678 9508      	RET
                 ; 0000 02F0 }
                 ; .FEND
                 ;
                 ;
                 ;
                 ;void led_zero(void)
                 ; 0000 02F5 {
                 _led_zero:
                 ; .FSTART _led_zero
                 ; 0000 02F6     PORTB.6 = 1;
000679 9ac6      	SBI  0x18,6
                 ; 0000 02F7     #asm("nop");
00067a 0000      	nop
                 ; 0000 02F8     PORTB.6 = 0;
00067b 98c6      	CBI  0x18,6
                 ; 0000 02F9     #asm("nop");
00067c 0000      	nop
                 ; 0000 02FA     #asm("nop");
00067d 0000      	nop
                 ; 0000 02FB     #asm("nop");
00067e 0000      	nop
                 ; 0000 02FC }
00067f 9508      	RET
                 ; .FEND
                 ;
                 ;void led_one(void)
                 ; 0000 02FF {
                 _led_one:
                 ; .FSTART _led_one
                 ; 0000 0300     PORTB.6 = 1;
000680 9ac6      	SBI  0x18,6
                 ; 0000 0301     #asm("nop");
000681 0000      	nop
                 ; 0000 0302     #asm("nop");
000682 0000      	nop
                 ; 0000 0303     #asm("nop");
000683 0000      	nop
                 ; 0000 0304     #asm("nop");
000684 0000      	nop
                 ; 0000 0305     PORTB.6 = 0;
000685 98c6      	CBI  0x18,6
                 ; 0000 0306 }
000686 9508      	RET
                 ; .FEND
                 ;
                 ;void lights(char G, char R, char B)
                 ; 0000 0309 {
                 _lights:
                 ; .FSTART _lights
                 ; 0000 030A     unsigned char i;
                 ; 0000 030B     for(i = 0b10000000; i >= 0b00000001; i = i >> 1)
000687 93aa      	ST   -Y,R26
000688 931a      	ST   -Y,R17
                 ;	G -> Y+3
                 ;	R -> Y+2
                 ;	B -> Y+1
                 ;	i -> R17
000689 e810      	LDI  R17,LOW(128)
                 _0x76:
00068a 3011      	CPI  R17,1
00068b f050      	BRLO _0x77
                 ; 0000 030C     {
                 ; 0000 030D         if((G & i) > 0)
00068c 2fe1      	MOV  R30,R17
00068d 81ab      	LDD  R26,Y+3
00068e 23ea      	AND  R30,R26
00068f 30e1      	CPI  R30,LOW(0x1)
000690 f010      	BRLO _0x78
                 ; 0000 030E             led_one();
000691 dfee      	RCALL _led_one
                 ; 0000 030F         else
000692 c001      	RJMP _0x79
                 _0x78:
                 ; 0000 0310             led_zero();
000693 dfe5      	RCALL _led_zero
                 ; 0000 0311     }
                 _0x79:
000694 9516      	LSR  R17
000695 cff4      	RJMP _0x76
                 _0x77:
                 ; 0000 0312 
                 ; 0000 0313     for(i = 0b10000000; i >= 0b00000001; i = i >> 1)
000696 e810      	LDI  R17,LOW(128)
                 _0x7B:
000697 3011      	CPI  R17,1
000698 f050      	BRLO _0x7C
                 ; 0000 0314     {
                 ; 0000 0315         if((R & i) > 0)
000699 2fe1      	MOV  R30,R17
00069a 81aa      	LDD  R26,Y+2
00069b 23ea      	AND  R30,R26
00069c 30e1      	CPI  R30,LOW(0x1)
00069d f010      	BRLO _0x7D
                 ; 0000 0316             led_one();
00069e dfe1      	RCALL _led_one
                 ; 0000 0317         else
00069f c001      	RJMP _0x7E
                 _0x7D:
                 ; 0000 0318             led_zero();
0006a0 dfd8      	RCALL _led_zero
                 ; 0000 0319     }
                 _0x7E:
0006a1 9516      	LSR  R17
0006a2 cff4      	RJMP _0x7B
                 _0x7C:
                 ; 0000 031A 
                 ; 0000 031B     for(i = 0b10000000; i >= 0b00000001; i = i >> 1)
0006a3 e810      	LDI  R17,LOW(128)
                 _0x80:
0006a4 3011      	CPI  R17,1
0006a5 f050      	BRLO _0x81
                 ; 0000 031C     {
                 ; 0000 031D         if((B & i) > 0)
0006a6 2fe1      	MOV  R30,R17
0006a7 81a9      	LDD  R26,Y+1
0006a8 23ea      	AND  R30,R26
0006a9 30e1      	CPI  R30,LOW(0x1)
0006aa f010      	BRLO _0x82
                 ; 0000 031E             led_one();
0006ab dfd4      	RCALL _led_one
                 ; 0000 031F         else
0006ac c001      	RJMP _0x83
                 _0x82:
                 ; 0000 0320             led_zero();
0006ad dfcb      	RCALL _led_zero
                 ; 0000 0321     }
                 _0x83:
0006ae 9516      	LSR  R17
0006af cff4      	RJMP _0x80
                 _0x81:
                 ; 0000 0322 }
0006b0 8118      	LDD  R17,Y+0
0006b1 c65f      	RJMP _0x2060001
                 ; .FEND
                 ;
                 ;void Read_Setup_Calibr(void)
                 ; 0000 0325 {
                 _Read_Setup_Calibr:
                 ; .FSTART _Read_Setup_Calibr
                 ; 0000 0326 
                 ; 0000 0327 //unsigned char CALIBR_MAS[10]={249,66,94,7,9,7,2,8,24,(66+94+7+9+7+2+8+24)/8};
                 ; 0000 0328  //unsigned int WEIGHT_NULL=6694, LOADCELL_NULL=709, DELTA_WEIGHT10KG=702, DELTA_LOADCELL10KG=824;
                 ; 0000 0329  ZADANIE_S=SETUP_MAS[3];
                +
0006b2 91e0 0519+LDS R30 , _SETUP_MAS + ( 3 )
                 	__GETB1MN _SETUP_MAS,3
0006b4 e0f0      	LDI  R31,0
0006b5 93e0 0514 	STS  _ZADANIE_S,R30
0006b7 93f0 0515 	STS  _ZADANIE_S+1,R31
                 ; 0000 032A  R_IK=SETUP_MAS[1];
                +
0006b9 90c0 0517+LDS R12 , _SETUP_MAS + ( 1 )
                 	__GETBRMN 12,_SETUP_MAS,1
0006bb 24dd      	CLR  R13
                 ; 0000 032B  R_TK=SETUP_MAS[2]+200;
                +
0006bc 91e0 0518+LDS R30 , _SETUP_MAS + ( 2 )
                 	__GETB1MN _SETUP_MAS,2
0006be e0f0      	LDI  R31,0
0006bf 53e8      	SUBI R30,LOW(-200)
0006c0 4fff      	SBCI R31,HIGH(-200)
0006c1 93e0 0512 	STS  _R_TK,R30
0006c3 93f0 0513 	STS  _R_TK+1,R31
                 ; 0000 032C 
                 ; 0000 032D  #ifdef FIXWEIGHT
                 ; 0000 032E  WEIGHT_NULL=(unsigned int)DEFAULT_CALIBR_MAS[1]*100+(unsigned int)DEFAULT_CALIBR_MAS[2];
                +
0006c5 91a0 0531+LDS R26 , _DEFAULT_CALIBR_MAS + ( 1 )
                 	__GETB2MN _DEFAULT_CALIBR_MAS,1
0006c7 e6e4      	LDI  R30,LOW(100)
0006c8 9fea      	MUL  R30,R26
0006c9 01f0      	MOVW R30,R0
0006ca 01df      	MOVW R26,R30
                +
0006cb 91e0 0532+LDS R30 , _DEFAULT_CALIBR_MAS + ( 2 )
                 	__GETB1MN _DEFAULT_CALIBR_MAS,2
0006cd e0f0      	LDI  R31,0
0006ce 0fea      	ADD  R30,R26
0006cf 1ffb      	ADC  R31,R27
0006d0 012f      	MOVW R4,R30
                 ; 0000 032F  #else
                 ; 0000 0330  WEIGHT_NULL=(unsigned int)CALIBR_MAS[1]*100+(unsigned int)CALIBR_MAS[2];
                 ; 0000 0331  #endif
                 ; 0000 0332 
                 ; 0000 0333  LOADCELL_NULL=(unsigned int)CALIBR_MAS[3]*100+(unsigned int)CALIBR_MAS[4];
                +
0006d1 91a0 0521+LDS R26 , _CALIBR_MAS + ( 3 )
                 	__GETB2MN _CALIBR_MAS,3
0006d3 e6e4      	LDI  R30,LOW(100)
0006d4 9fea      	MUL  R30,R26
0006d5 01f0      	MOVW R30,R0
0006d6 01df      	MOVW R26,R30
                +
0006d7 91e0 0522+LDS R30 , _CALIBR_MAS + ( 4 )
                 	__GETB1MN _CALIBR_MAS,4
0006d9 e0f0      	LDI  R31,0
0006da 0fea      	ADD  R30,R26
0006db 1ffb      	ADC  R31,R27
0006dc 013f      	MOVW R6,R30
                 ; 0000 0334  DELTA_WEIGHT10KG=(unsigned int)CALIBR_MAS[5]*100+(unsigned int)CALIBR_MAS[6];
                +
0006dd 91a0 0523+LDS R26 , _CALIBR_MAS + ( 5 )
                 	__GETB2MN _CALIBR_MAS,5
0006df e6e4      	LDI  R30,LOW(100)
0006e0 9fea      	MUL  R30,R26
0006e1 01f0      	MOVW R30,R0
0006e2 01df      	MOVW R26,R30
                +
0006e3 91e0 0524+LDS R30 , _CALIBR_MAS + ( 6 )
                 	__GETB1MN _CALIBR_MAS,6
0006e5 e0f0      	LDI  R31,0
0006e6 0fea      	ADD  R30,R26
0006e7 1ffb      	ADC  R31,R27
0006e8 014f      	MOVW R8,R30
                 ; 0000 0335  DELTA_LOADCELL10KG=(unsigned int)CALIBR_MAS[7]*100+(unsigned int)CALIBR_MAS[8];
                +
0006e9 91a0 0525+LDS R26 , _CALIBR_MAS + ( 7 )
                 	__GETB2MN _CALIBR_MAS,7
0006eb e6e4      	LDI  R30,LOW(100)
0006ec 9fea      	MUL  R30,R26
0006ed 01f0      	MOVW R30,R0
0006ee 01df      	MOVW R26,R30
                +
0006ef 91e0 0526+LDS R30 , _CALIBR_MAS + ( 8 )
                 	__GETB1MN _CALIBR_MAS,8
0006f1 e0f0      	LDI  R31,0
0006f2 0fea      	ADD  R30,R26
0006f3 1ffb      	ADC  R31,R27
0006f4 015f      	MOVW R10,R30
                 ; 0000 0336 }
0006f5 9508      	RET
                 ; .FEND
                 ;
                 ;void Control_Sum_Send(void)
                 ; 0000 0339 {
                 _Control_Sum_Send:
                 ; .FSTART _Control_Sum_Send
                 ; 0000 033A  unsigned char tmp=0;
                 ; 0000 033B  unsigned int S=0;
                 ; 0000 033C 
                 ; 0000 033D  for(tmp=1;tmp<25;tmp++)
0006f6 940e 0e7e 	CALL __SAVELOCR4
                 ;	tmp -> R17
                 ;	S -> R18,R19
0006f8 e010      	LDI  R17,0
                +
0006f9 e020     +LDI R18 , LOW ( 0 )
0006fa e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
0006fb e011      	LDI  R17,LOW(1)
                 _0x85:
0006fc 3119      	CPI  R17,25
0006fd f450      	BRSH _0x86
                 ; 0000 033E   S=S+SEND_MAS[tmp];
0006fe 2fe1      	MOV  R30,R17
0006ff e0f0      	LDI  R31,0
000700 5ce0      	SUBI R30,LOW(-_SEND_MAS)
000701 4ffa      	SBCI R31,HIGH(-_SEND_MAS)
000702 81e0      	LD   R30,Z
000703 e0f0      	LDI  R31,0
                +
000704 0f2e     +ADD R18 , R30
000705 1f3f     +ADC R19 , R31
                 	__ADDWRR 18,19,30,31
000706 5f1f      	SUBI R17,-1
000707 cff4      	RJMP _0x85
                 _0x86:
                 ; 0000 033F SEND_MAS[25]=S/24;
000708 01d9      	MOVW R26,R18
000709 e1e8      	LDI  R30,LOW(24)
00070a e0f0      	LDI  R31,HIGH(24)
00070b 940e 0dcd 	CALL __DIVW21U
                +
00070d 93e0 0559+STS _SEND_MAS + ( 25 ) , R30
                 	__PUTB1MN _SEND_MAS,25
                 ; 0000 0340 }
00070f c5ff      	RJMP _0x2060002
                 ; .FEND
                 ;
                 ;void Control_Sum_Calibr(void)
                 ; 0000 0343 {
                 _Control_Sum_Calibr:
                 ; .FSTART _Control_Sum_Calibr
                 ; 0000 0344  unsigned char tmp=0;
                 ; 0000 0345  unsigned int S=0;
                 ; 0000 0346 
                 ; 0000 0347  for(tmp=1;tmp<9;tmp++)
000710 940e 0e7e 	CALL __SAVELOCR4
                 ;	tmp -> R17
                 ;	S -> R18,R19
000712 e010      	LDI  R17,0
                +
000713 e020     +LDI R18 , LOW ( 0 )
000714 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
000715 e011      	LDI  R17,LOW(1)
                 _0x88:
000716 3019      	CPI  R17,9
000717 f450      	BRSH _0x89
                 ; 0000 0348   S=S+CALIBR_MAS[tmp];
000718 2fe1      	MOV  R30,R17
000719 e0f0      	LDI  R31,0
00071a 5ee2      	SUBI R30,LOW(-_CALIBR_MAS)
00071b 4ffa      	SBCI R31,HIGH(-_CALIBR_MAS)
00071c 81e0      	LD   R30,Z
00071d e0f0      	LDI  R31,0
                +
00071e 0f2e     +ADD R18 , R30
00071f 1f3f     +ADC R19 , R31
                 	__ADDWRR 18,19,30,31
000720 5f1f      	SUBI R17,-1
000721 cff4      	RJMP _0x88
                 _0x89:
                 ; 0000 0349 CALIBR_MAS[9]=S/8;
000722 01f9      	MOVW R30,R18
000723 940e 0d89 	CALL __LSRW3
                +
000725 93e0 0527+STS _CALIBR_MAS + ( 9 ) , R30
                 	__PUTB1MN _CALIBR_MAS,9
                 ; 0000 034A }
000727 c5e7      	RJMP _0x2060002
                 ; .FEND
                 ;
                 ;
                 ;void Control_Sum_Setup(void)
                 ; 0000 034E {
                 _Control_Sum_Setup:
                 ; .FSTART _Control_Sum_Setup
                 ; 0000 034F  unsigned char tmp=0;
                 ; 0000 0350  unsigned int S=0;
                 ; 0000 0351 
                 ; 0000 0352  for(tmp=1;tmp<7;tmp++)
000728 940e 0e7e 	CALL __SAVELOCR4
                 ;	tmp -> R17
                 ;	S -> R18,R19
00072a e010      	LDI  R17,0
                +
00072b e020     +LDI R18 , LOW ( 0 )
00072c e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
00072d e011      	LDI  R17,LOW(1)
                 _0x8B:
00072e 3017      	CPI  R17,7
00072f f450      	BRSH _0x8C
                 ; 0000 0353   S=S+SETUP_MAS[tmp];
000730 2fe1      	MOV  R30,R17
000731 e0f0      	LDI  R31,0
000732 5eea      	SUBI R30,LOW(-_SETUP_MAS)
000733 4ffa      	SBCI R31,HIGH(-_SETUP_MAS)
000734 81e0      	LD   R30,Z
000735 e0f0      	LDI  R31,0
                +
000736 0f2e     +ADD R18 , R30
000737 1f3f     +ADC R19 , R31
                 	__ADDWRR 18,19,30,31
000738 5f1f      	SUBI R17,-1
000739 cff4      	RJMP _0x8B
                 _0x8C:
                 ; 0000 0354 SETUP_MAS[7]=S/6;
00073a 01d9      	MOVW R26,R18
00073b e0e6      	LDI  R30,LOW(6)
00073c e0f0      	LDI  R31,HIGH(6)
00073d 940e 0dcd 	CALL __DIVW21U
                +
00073f 93e0 051d+STS _SETUP_MAS + ( 7 ) , R30
                 	__PUTB1MN _SETUP_MAS,7
                 ; 0000 0355 }
000741 c5cd      	RJMP _0x2060002
                 ; .FEND
                 ;
                 ;// Timer 1 overflow interrupt service routine
                 ;interrupt [TIM1_OVF] void timer1_ovf_isr(void)
                 ; 0000 0359 {
                 _timer1_ovf_isr:
                 ; .FSTART _timer1_ovf_isr
000742 93aa      	ST   -Y,R26
000743 93ea      	ST   -Y,R30
000744 b7ef      	IN   R30,SREG
000745 93ea      	ST   -Y,R30
                 ; 0000 035A if(ovf_IK<2)
000746 91a0 055c 	LDS  R26,_ovf_IK
000748 30a2      	CPI  R26,LOW(0x2)
000749 f428      	BRSH _0x8D
                 ; 0000 035B  {
                 ; 0000 035C   ovf_IK++;
00074a 91e0 055c 	LDS  R30,_ovf_IK
00074c 5fef      	SUBI R30,-LOW(1)
00074d 93e0 055c 	STS  _ovf_IK,R30
                 ; 0000 035D  }
                 ; 0000 035E if(ovf_TK<2)
                 _0x8D:
00074f 91a0 055d 	LDS  R26,_ovf_TK
000751 30a2      	CPI  R26,LOW(0x2)
000752 f428      	BRSH _0x8E
                 ; 0000 035F  {
                 ; 0000 0360   ovf_TK++;
000753 91e0 055d 	LDS  R30,_ovf_TK
000755 5fef      	SUBI R30,-LOW(1)
000756 93e0 055d 	STS  _ovf_TK,R30
                 ; 0000 0361  }
                 ; 0000 0362 }
                 _0x8E:
000758 91e9      	LD   R30,Y+
000759 bfef      	OUT  SREG,R30
00075a 91e9      	LD   R30,Y+
00075b 91a9      	LD   R26,Y+
00075c 9518      	RETI
                 ; .FEND
                 ;//***********************************************************************************************************
                 ;//***********************************************************************************************************
                 ;//***********************************************************************************************************
                 ;
                 ;
                 ;
                 ;
                 ;void delay(unsigned int d)
                 ; 0000 036B {
                 _delay:
                 ; .FSTART _delay
                 ; 0000 036C  unsigned int y;
                 ; 0000 036D  for(y=0;y<d;y++)
00075d 93ba      	ST   -Y,R27
00075e 93aa      	ST   -Y,R26
00075f 931a      	ST   -Y,R17
000760 930a      	ST   -Y,R16
                 ;	d -> Y+2
                 ;	y -> R16,R17
                +
000761 e000     +LDI R16 , LOW ( 0 )
000762 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x90:
000763 81ea      	LDD  R30,Y+2
000764 81fb      	LDD  R31,Y+2+1
000765 170e      	CP   R16,R30
000766 071f      	CPC  R17,R31
000767 f418      	BRSH _0x91
                 ; 0000 036E  {}
                +
000768 5f0f     +SUBI R16 , LOW ( - 1 )
000769 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
00076a cff8      	RJMP _0x90
                 _0x91:
                 ; 0000 036F }
00076b 8119      	LDD  R17,Y+1
00076c 8108      	LDD  R16,Y+0
00076d c5a3      	RJMP _0x2060001
                 ; .FEND
                 ;
                 ;
                 ;
                 ;void SPI_MasterInit(void)
                 ; 0000 0374 {
                 _SPI_MasterInit:
                 ; .FSTART _SPI_MasterInit
                 ; 0000 0375 // DDRB.1=1; //SCK
                 ; 0000 0376 // PORTB.1=0;
                 ; 0000 0377 // DDRB.2=1; //MOSI
                 ; 0000 0378 // PORTB.2=1;
                 ; 0000 0379 // DDRB.3=0; //MISO
                 ; 0000 037A // PORTB.3=0;
                 ; 0000 037B 
                 ; 0000 037C  DDRB |= (1 << 0) | (1 << 1) | (1 << 2); //SS, SCK, MOSI - out
00076e b3e7      	IN   R30,0x17
00076f 60e7      	ORI  R30,LOW(0x7)
000770 bbe7      	OUT  0x17,R30
                 ; 0000 037D  DDRB &= ~(1 << 3); //MISO - in
000771 98bb      	CBI  0x17,3
                 ; 0000 037E  SPCR = (1<<SPE) | (1<<MSTR) | (1<<CPOL) | (1<<CPHA);
000772 e5ec      	LDI  R30,LOW(92)
000773 b9ed      	OUT  0xD,R30
                 ; 0000 037F }
000774 9508      	RET
                 ; .FEND
                 ;
                 ;
                 ;unsigned char SPI_MasterReceive(void)
                 ; 0000 0383 {
                 _SPI_MasterReceive:
                 ; .FSTART _SPI_MasterReceive
                 ; 0000 0384 //unsigned char t,x=0;
                 ; 0000 0385 //
                 ; 0000 0386 // for(t=128;t>=1;t=t/2)
                 ; 0000 0387 // {
                 ; 0000 0388 //  PORTB.1=1;
                 ; 0000 0389 //  delay(100);
                 ; 0000 038A //  PORTB.1=0;
                 ; 0000 038B //  if(!PINB.3)
                 ; 0000 038C //    x=x+t;
                 ; 0000 038D //  delay(100);
                 ; 0000 038E // }
                 ; 0000 038F // return x;
                 ; 0000 0390 
                 ; 0000 0391  SPI_MasterTransmit(0xFF);
000775 efaf      	LDI  R26,LOW(255)
000776 d004      	RCALL _SPI_MasterTransmit
                 ; 0000 0392  while(!(SPSR & (1<<SPIF)))
                 _0x92:
000777 9b77      	SBIS 0xE,7
                 ; 0000 0393   continue;
000778 cffe      	RJMP _0x92
                 ; 0000 0394  return SPDR;
000779 b1ef      	IN   R30,0xF
00077a 9508      	RET
                 ; 0000 0395 }
                 ; .FEND
                 ;
                 ;
                 ;void SPI_MasterTransmit(unsigned char x)
                 ; 0000 0399 {
                 _SPI_MasterTransmit:
                 ; .FSTART _SPI_MasterTransmit
                 ; 0000 039A //unsigned char t;
                 ; 0000 039B //
                 ; 0000 039C // for(t=128;t>=1;t=t/2)
                 ; 0000 039D // {
                 ; 0000 039E // PORTB.1=1;
                 ; 0000 039F // delay(200);
                 ; 0000 03A0 // if(x&t)
                 ; 0000 03A1 //  PORTB.2=0;
                 ; 0000 03A2 // else
                 ; 0000 03A3 //  PORTB.2=1;
                 ; 0000 03A4 // delay(200);
                 ; 0000 03A5 // PORTB.1=0;
                 ; 0000 03A6 // delay(200);
                 ; 0000 03A7 // }
                 ; 0000 03A8 // PORTB.2=1;
                 ; 0000 03A9 // delay(300);
                 ; 0000 03AA 
                 ; 0000 03AB  SPDR = x;
00077b 93aa      	ST   -Y,R26
                 ;	x -> Y+0
00077c 81e8      	LD   R30,Y
00077d b9ef      	OUT  0xF,R30
                 ; 0000 03AC  while(!(SPSR & (1<<SPIF)))
                 _0x95:
00077e 9b77      	SBIS 0xE,7
                 ; 0000 03AD   continue;
00077f cffe      	RJMP _0x95
                 ; 0000 03AE }
000780 c337      	RJMP _0x2060003
                 ; .FEND
                 ;
                 ;
                 ;
                 ;void SET_AD7799(void)
                 ; 0000 03B3 {
                 _SET_AD7799:
                 ; .FSTART _SET_AD7799
                 ; 0000 03B4  delay_ms(100);
000781 e6a4      	LDI  R26,LOW(100)
000782 e0b0      	LDI  R27,0
000783 940e 0d64 	CALL _delay_ms
                 ; 0000 03B5  SPI_MasterTransmit(0b11111111);
000785 efaf      	LDI  R26,LOW(255)
000786 dff4      	RCALL _SPI_MasterTransmit
                 ; 0000 03B6  SPI_MasterTransmit(0b11111111);
000787 efaf      	LDI  R26,LOW(255)
000788 dff2      	RCALL _SPI_MasterTransmit
                 ; 0000 03B7  SPI_MasterTransmit(0b11111111);
000789 efaf      	LDI  R26,LOW(255)
00078a dff0      	RCALL _SPI_MasterTransmit
                 ; 0000 03B8  SPI_MasterTransmit(0b11111111);
00078b efaf      	LDI  R26,LOW(255)
00078c dfee      	RCALL _SPI_MasterTransmit
                 ; 0000 03B9  delay_ms(100);
00078d e6a4      	LDI  R26,LOW(100)
00078e e0b0      	LDI  R27,0
00078f 940e 0d64 	CALL _delay_ms
                 ; 0000 03BA  SPI_MasterTransmit(0x10);    //conf
000791 e1a0      	LDI  R26,LOW(16)
000792 dfe8      	RCALL _SPI_MasterTransmit
                 ; 0000 03BB  delay(10000);
000793 e1a0      	LDI  R26,LOW(10000)
000794 e2b7      	LDI  R27,HIGH(10000)
000795 dfc7      	RCALL _delay
                 ; 0000 03BC  //#ifdef ADC_TO_KG
                 ; 0000 03BD  //SPI_MasterTransmit(0b00000111); //bipolar and *128
                 ; 0000 03BE  //#else
                 ; 0000 03BF  SPI_MasterTransmit(0b00010111); //unipolar and *128
000796 e1a7      	LDI  R26,LOW(23)
000797 dfe3      	RCALL _SPI_MasterTransmit
                 ; 0000 03C0  //#endif
                 ; 0000 03C1  SPI_MasterTransmit(0b00010000);
000798 e1a0      	LDI  R26,LOW(16)
000799 dfe1      	RCALL _SPI_MasterTransmit
                 ; 0000 03C2  delay(10000);
00079a e1a0      	LDI  R26,LOW(10000)
00079b e2b7      	LDI  R27,HIGH(10000)
00079c dfc0      	RCALL _delay
                 ; 0000 03C3 
                 ; 0000 03C4 
                 ; 0000 03C5  SPI_MasterTransmit(0x08);  //mode
00079d e0a8      	LDI  R26,LOW(8)
00079e dfdc      	RCALL _SPI_MasterTransmit
                 ; 0000 03C6  delay(10000);
00079f e1a0      	LDI  R26,LOW(10000)
0007a0 e2b7      	LDI  R27,HIGH(10000)
0007a1 dfbb      	RCALL _delay
                 ; 0000 03C7  SPI_MasterTransmit(0b00000000);
0007a2 e0a0      	LDI  R26,LOW(0)
0007a3 dfd7      	RCALL _SPI_MasterTransmit
                 ; 0000 03C8  //SPI_MasterTransmit(0b00001111);
                 ; 0000 03C9 
                 ; 0000 03CA  SPI_MasterTransmit(0b00001100);//10Hz
0007a4 e0ac      	LDI  R26,LOW(12)
0007a5 dfd5      	RCALL _SPI_MasterTransmit
                 ; 0000 03CB  //SPI_MasterTransmit(0b00001000);//20Hz
                 ; 0000 03CC  delay(10000);
0007a6 e1a0      	LDI  R26,LOW(10000)
0007a7 e2b7      	LDI  R27,HIGH(10000)
0007a8 dfb4      	RCALL _delay
                 ; 0000 03CD  SPI_MasterTransmit(0x5C);
0007a9 e5ac      	LDI  R26,LOW(92)
0007aa dfd0      	RCALL _SPI_MasterTransmit
                 ; 0000 03CE  delay(10000);
0007ab e1a0      	LDI  R26,LOW(10000)
0007ac e2b7      	LDI  R27,HIGH(10000)
0007ad dfaf      	RCALL _delay
                 ; 0000 03CF }
0007ae 9508      	RET
                 ; .FEND
                 ;
                 ; unsigned int READ_AD7799(void)
                 ; 0000 03D2 {
                 _READ_AD7799:
                 ; .FSTART _READ_AD7799
                 ; 0000 03D3  unsigned char a1,a2;
                 ; 0000 03D4  unsigned int M;
                 ; 0000 03D5         delay(100);
0007af 940e 0e7e 	CALL __SAVELOCR4
                 ;	a1 -> R17
                 ;	a2 -> R16
                 ;	M -> R18,R19
0007b1 e6a4      	LDI  R26,LOW(100)
0007b2 e0b0      	LDI  R27,0
0007b3 dfa9      	RCALL _delay
                 ; 0000 03D6         a1=SPI_MasterReceive();
0007b4 dfc0      	RCALL _SPI_MasterReceive
0007b5 2f1e      	MOV  R17,R30
                 ; 0000 03D7         a2=SPI_MasterReceive();
0007b6 dfbe      	RCALL _SPI_MasterReceive
0007b7 2f0e      	MOV  R16,R30
                 ; 0000 03D8         SPI_MasterReceive();
0007b8 dfbc      	RCALL _SPI_MasterReceive
                 ; 0000 03D9         M=(unsigned int)a1*256+(unsigned int)a2;
0007b9 2fa1      	MOV  R26,R17
0007ba e0b0      	LDI  R27,0
0007bb e0e0      	LDI  R30,LOW(256)
0007bc e0f1      	LDI  R31,HIGH(256)
0007bd 940e 0d95 	CALL __MULW12U
0007bf 01df      	MOVW R26,R30
0007c0 2fe0      	MOV  R30,R16
0007c1 e0f0      	LDI  R31,0
0007c2 0fea      	ADD  R30,R26
0007c3 1ffb      	ADC  R31,R27
0007c4 019f      	MOVW R18,R30
                 ; 0000 03DA         return M;
0007c5 c549      	RJMP _0x2060002
                 ; 0000 03DB         //return a2;
                 ; 0000 03DC }
                 ; .FEND
                 ;
                 ;
                 ;void uart1SendByte(char data)
                 ; 0000 03E0 {
                 _uart1SendByte:
                 ; .FSTART _uart1SendByte
                 ; 0000 03E1     while(!( UCSR1A & (1 << UDRE)));
0007c6 93aa      	ST   -Y,R26
                 ;	data -> Y+0
                 _0x98:
0007c7 91e0 009b 	LDS  R30,155
0007c9 72e0      	ANDI R30,LOW(0x20)
0007ca f3e1      	BREQ _0x98
                 ; 0000 03E2     UDR1 = data;
0007cb 81e8      	LD   R30,Y
0007cc 93e0 009c 	STS  156,R30
                 ; 0000 03E3 }
0007ce c2e9      	RJMP _0x2060003
                 ; .FEND
                 ;
                 ;void uart1SendString(char *str)
                 ; 0000 03E6 {
                 _uart1SendString:
                 ; .FSTART _uart1SendString
                 ; 0000 03E7     while(*str)
0007cf 93ba      	ST   -Y,R27
0007d0 93aa      	ST   -Y,R26
                 ;	*str -> Y+0
                 _0x9B:
0007d1 81a8      	LD   R26,Y
0007d2 81b9      	LDD  R27,Y+1
0007d3 91ec      	LD   R30,X
0007d4 30e0      	CPI  R30,0
0007d5 f031      	BREQ _0x9D
                 ; 0000 03E8     {
                 ; 0000 03E9         uart1SendByte(*str++);
0007d6 91ed      	LD   R30,X+
0007d7 83a8      	ST   Y,R26
0007d8 83b9      	STD  Y+1,R27
0007d9 2fae      	MOV  R26,R30
0007da dfeb      	RCALL _uart1SendByte
                 ; 0000 03EA     }
0007db cff5      	RJMP _0x9B
                 _0x9D:
                 ; 0000 03EB }
0007dc 9622      	ADIW R28,2
0007dd 9508      	RET
                 ; .FEND
                 ;
                 ;void uart1SendArray(unsigned char *array, unsigned char size)
                 ; 0000 03EE {
                 _uart1SendArray:
                 ; .FSTART _uart1SendArray
                 ; 0000 03EF    unsigned char i;
                 ; 0000 03F0     for(i = 0; i < size; ++i)
0007de 93aa      	ST   -Y,R26
0007df 931a      	ST   -Y,R17
                 ;	*array -> Y+2
                 ;	size -> Y+1
                 ;	i -> R17
0007e0 e010      	LDI  R17,LOW(0)
                 _0x9F:
0007e1 81e9      	LDD  R30,Y+1
0007e2 171e      	CP   R17,R30
0007e3 f448      	BRSH _0xA0
                 ; 0000 03F1     {
                 ; 0000 03F2         uart1SendByte(array[i]);
0007e4 81aa      	LDD  R26,Y+2
0007e5 81bb      	LDD  R27,Y+2+1
0007e6 27ee      	CLR  R30
0007e7 0fa1      	ADD  R26,R17
0007e8 1fbe      	ADC  R27,R30
0007e9 91ac      	LD   R26,X
0007ea dfdb      	RCALL _uart1SendByte
                 ; 0000 03F3     }
0007eb 5f1f      	SUBI R17,-LOW(1)
0007ec cff4      	RJMP _0x9F
                 _0xA0:
                 ; 0000 03F4 }
0007ed 8118      	LDD  R17,Y+0
0007ee c522      	RJMP _0x2060001
                 ; .FEND
                 ;
                 ;// USART0 Receiver interrupt service routine
                 ;interrupt [USART0_RXC] void usart0_rx_isr(void)
                 ; 0000 03F8 {
                 _usart0_rx_isr:
                 ; .FSTART _usart0_rx_isr
0007ef 920a      	ST   -Y,R0
0007f0 921a      	ST   -Y,R1
0007f1 939a      	ST   -Y,R25
0007f2 93aa      	ST   -Y,R26
0007f3 93ba      	ST   -Y,R27
0007f4 93ea      	ST   -Y,R30
0007f5 93fa      	ST   -Y,R31
0007f6 b7ef      	IN   R30,SREG
0007f7 93ea      	ST   -Y,R30
                 ; 0000 03F9 char simvol;
                 ; 0000 03FA simvol=UDR0;
0007f8 931a      	ST   -Y,R17
                 ;	simvol -> R17
0007f9 b11c      	IN   R17,12
                 ; 0000 03FB 
                 ; 0000 03FC      if(simvol=='P')
0007fa 3510      	CPI  R17,80
0007fb f439      	BRNE _0xA1
                 ; 0000 03FD    {
                 ; 0000 03FE     GPS_flag_gp=1;
0007fc e0e1      	LDI  R30,LOW(1)
0007fd 93e0 0597 	STS  _GPS_flag_gp,R30
                 ; 0000 03FF     GPS_zap_counter=0;
0007ff e0e0      	LDI  R30,LOW(0)
000800 93e0 0591 	STS  _GPS_zap_counter,R30
                 ; 0000 0400     goto exit_int;
000802 c1e1      	RJMP _0xA2
                 ; 0000 0401    }
                 ; 0000 0402     if(GPS_flag_gp==1)
                 _0xA1:
000803 91a0 0597 	LDS  R26,_GPS_flag_gp
000805 30a1      	CPI  R26,LOW(0x1)
000806 f431      	BRNE _0xA3
                 ; 0000 0403    {
                 ; 0000 0404     GPS_string_name[0]=simvol;
000807 9310 0594 	STS  _GPS_string_name,R17
                 ; 0000 0405     GPS_flag_gp=2;
000809 e0e2      	LDI  R30,LOW(2)
00080a 93e0 0597 	STS  _GPS_flag_gp,R30
                 ; 0000 0406     goto exit_int;
00080c c1d7      	RJMP _0xA2
                 ; 0000 0407    }
                 ; 0000 0408     if(GPS_flag_gp==2)
                 _0xA3:
00080d 91a0 0597 	LDS  R26,_GPS_flag_gp
00080f 30a2      	CPI  R26,LOW(0x2)
000810 f431      	BRNE _0xA4
                 ; 0000 0409    {
                 ; 0000 040A     GPS_string_name[1]=simvol;
                +
000811 9310 0595+STS _GPS_string_name + ( 1 ) , R17
                 	__PUTBMRN _GPS_string_name,1,17
                 ; 0000 040B     GPS_flag_gp=3;
000813 e0e3      	LDI  R30,LOW(3)
000814 93e0 0597 	STS  _GPS_flag_gp,R30
                 ; 0000 040C     goto exit_int;
000816 c1cd      	RJMP _0xA2
                 ; 0000 040D    }
                 ; 0000 040E     if(GPS_flag_gp==3)
                 _0xA4:
000817 91a0 0597 	LDS  R26,_GPS_flag_gp
000819 30a3      	CPI  R26,LOW(0x3)
00081a f4d1      	BRNE _0xA5
                 ; 0000 040F    {
                 ; 0000 0410     GPS_string_name[2]=simvol;
                +
00081b 9310 0596+STS _GPS_string_name + ( 2 ) , R17
                 	__PUTBMRN _GPS_string_name,2,17
                 ; 0000 0411     if(GPS_string_name[0]=='G'&&GPS_string_name[1]=='G'&&GPS_string_name[2]=='A')
00081d 91a0 0594 	LDS  R26,_GPS_string_name
00081f 34a7      	CPI  R26,LOW(0x47)
000820 f441      	BRNE _0xA7
                +
000821 91a0 0595+LDS R26 , _GPS_string_name + ( 1 )
                 	__GETB2MN _GPS_string_name,1
000823 34a7      	CPI  R26,LOW(0x47)
000824 f421      	BRNE _0xA7
                +
000825 91a0 0596+LDS R26 , _GPS_string_name + ( 2 )
                 	__GETB2MN _GPS_string_name,2
000827 34a1      	CPI  R26,LOW(0x41)
000828 f009      	BREQ _0xA8
                 _0xA7:
000829 c007      	RJMP _0xA6
                 _0xA8:
                 ; 0000 0412       {GPS_flag_gp=4;
00082a e0e4      	LDI  R30,LOW(4)
00082b 93e0 0597 	STS  _GPS_flag_gp,R30
                 ; 0000 0413        GPS_flag_ready=0;
00082d e0e0      	LDI  R30,LOW(0)
00082e 93e0 0593 	STS  _GPS_flag_ready,R30
                 ; 0000 0414        }
                 ; 0000 0415     else
000830 c003      	RJMP _0xA9
                 _0xA6:
                 ; 0000 0416      GPS_flag_gp=0;
000831 e0e0      	LDI  R30,LOW(0)
000832 93e0 0597 	STS  _GPS_flag_gp,R30
                 ; 0000 0417     goto exit_int;
                 _0xA9:
000834 c1af      	RJMP _0xA2
                 ; 0000 0418    }
                 ; 0000 0419 
                 ; 0000 041A     if((GPS_flag_gp==4)&&(simvol==','))
                 _0xA5:
000835 91a0 0597 	LDS  R26,_GPS_flag_gp
000837 30a4      	CPI  R26,LOW(0x4)
000838 f411      	BRNE _0xAB
000839 321c      	CPI  R17,44
00083a f009      	BREQ _0xAC
                 _0xAB:
00083b c009      	RJMP _0xAA
                 _0xAC:
                 ; 0000 041B     {
                 ; 0000 041C      GPS_zap_counter++;
00083c 91e0 0591 	LDS  R30,_GPS_zap_counter
00083e 5fef      	SUBI R30,-LOW(1)
00083f 93e0 0591 	STS  _GPS_zap_counter,R30
                 ; 0000 041D      GPS_sim_counter=0;
000841 e0e0      	LDI  R30,LOW(0)
000842 93e0 0592 	STS  _GPS_sim_counter,R30
                 ; 0000 041E      goto exit_int;
000844 c19f      	RJMP _0xA2
                 ; 0000 041F     }
                 ; 0000 0420 
                 ; 0000 0421 
                 ; 0000 0422    if(GPS_flag_gp==4)
                 _0xAA:
000845 91a0 0597 	LDS  R26,_GPS_flag_gp
000847 30a4      	CPI  R26,LOW(0x4)
000848 f009      	BREQ PC+2
000849 c19a      	RJMP _0xAD
                 ; 0000 0423    {
                 ; 0000 0424 
                 ; 0000 0425     if(GPS_zap_counter==2)//shir
00084a 91a0 0591 	LDS  R26,_GPS_zap_counter
00084c 30a2      	CPI  R26,LOW(0x2)
00084d f009      	BREQ PC+2
00084e c088      	RJMP _0xAE
                 ; 0000 0426     {
                 ; 0000 0427      switch(GPS_sim_counter)
00084f 91e0 0592 	LDS  R30,_GPS_sim_counter
000851 e0f0      	LDI  R31,0
                 ; 0000 0428      {
                 ; 0000 0429       case 0:
000852 9730      	SBIW R30,0
000853 f461      	BRNE _0xB2
                 ; 0000 042A        GPS_shir[0]=(simvol-48)*10;
000854 2fe1      	MOV  R30,R17
000855 e0f0      	LDI  R31,0
000856 97f0      	SBIW R30,48
000857 e0aa      	LDI  R26,LOW(10)
000858 e0b0      	LDI  R27,HIGH(10)
000859 940e 0dc3 	CALL __MULW12
00085b 93e0 0598 	STS  _GPS_shir,R30
00085d 93f0 0599 	STS  _GPS_shir+1,R31
                 ; 0000 042B       break;
00085f c071      	RJMP _0xB1
                 ; 0000 042C       case 1:
                 _0xB2:
000860 30e1      	CPI  R30,LOW(0x1)
000861 e0a0      	LDI  R26,HIGH(0x1)
000862 07fa      	CPC  R31,R26
000863 f471      	BRNE _0xB3
                 ; 0000 042D        GPS_shir[0]=GPS_shir[0]+(simvol-48);
000864 2fe1      	MOV  R30,R17
000865 e0f0      	LDI  R31,0
000866 97f0      	SBIW R30,48
000867 91a0 0598 	LDS  R26,_GPS_shir
000869 91b0 0599 	LDS  R27,_GPS_shir+1
00086b 0fea      	ADD  R30,R26
00086c 1ffb      	ADC  R31,R27
00086d 93e0 0598 	STS  _GPS_shir,R30
00086f 93f0 0599 	STS  _GPS_shir+1,R31
                 ; 0000 042E       break;
000871 c05f      	RJMP _0xB1
                 ; 0000 042F       case 2:
                 _0xB3:
000872 30e2      	CPI  R30,LOW(0x2)
000873 e0a0      	LDI  R26,HIGH(0x2)
000874 07fa      	CPC  R31,R26
000875 f461      	BRNE _0xB4
                 ; 0000 0430        GPS_shir[1]=(simvol-48)*10;
000876 2fe1      	MOV  R30,R17
000877 e0f0      	LDI  R31,0
000878 97f0      	SBIW R30,48
000879 e0aa      	LDI  R26,LOW(10)
00087a e0b0      	LDI  R27,HIGH(10)
00087b 940e 0dc3 	CALL __MULW12
                +
00087d 93e0 059a+STS _GPS_shir + ( 2 ) , R30
00087f 93f0 059b+STS _GPS_shir + ( 2 ) + 1 , R31
                 	__PUTW1MN _GPS_shir,2
                 ; 0000 0431       break;
000881 c04f      	RJMP _0xB1
                 ; 0000 0432       case 3:
                 _0xB4:
000882 30e3      	CPI  R30,LOW(0x3)
000883 e0a0      	LDI  R26,HIGH(0x3)
000884 07fa      	CPC  R31,R26
000885 f471      	BRNE _0xB5
                 ; 0000 0433        GPS_shir[1]=GPS_shir[1]+(simvol-48);
                +
000886 91a0 059a+LDS R26 , _GPS_shir + ( 2 )
000888 91b0 059b+LDS R27 , _GPS_shir + ( 2 ) + 1
                 	__GETW2MN _GPS_shir,2
00088a 2fe1      	MOV  R30,R17
00088b e0f0      	LDI  R31,0
00088c 97f0      	SBIW R30,48
00088d 0fea      	ADD  R30,R26
00088e 1ffb      	ADC  R31,R27
                +
00088f 93e0 059a+STS _GPS_shir + ( 2 ) , R30
000891 93f0 059b+STS _GPS_shir + ( 2 ) + 1 , R31
                 	__PUTW1MN _GPS_shir,2
                 ; 0000 0434       break;
000893 c03d      	RJMP _0xB1
                 ; 0000 0435       case 5:
                 _0xB5:
000894 30e5      	CPI  R30,LOW(0x5)
000895 e0a0      	LDI  R26,HIGH(0x5)
000896 07fa      	CPC  R31,R26
000897 f441      	BRNE _0xB6
                 ; 0000 0436        GPS_shir[2]=(simvol-48)*1000;
000898 2fe1      	MOV  R30,R17
000899 e0f0      	LDI  R31,0
00089a 97f0      	SBIW R30,48
00089b eea8      	LDI  R26,LOW(1000)
00089c e0b3      	LDI  R27,HIGH(1000)
00089d 940e 0dc3 	CALL __MULW12
00089f c02d      	RJMP _0x121
                 ; 0000 0437       break;
                 ; 0000 0438       case 6:
                 _0xB6:
0008a0 30e6      	CPI  R30,LOW(0x6)
0008a1 e0a0      	LDI  R26,HIGH(0x6)
0008a2 07fa      	CPC  R31,R26
0008a3 f461      	BRNE _0xB7
                 ; 0000 0439        GPS_shir[2]=GPS_shir[2]+(simvol-48)*100;
0008a4 2fe1      	MOV  R30,R17
0008a5 e0f0      	LDI  R31,0
0008a6 97f0      	SBIW R30,48
0008a7 e6a4      	LDI  R26,LOW(100)
0008a8 e0b0      	LDI  R27,HIGH(100)
0008a9 940e 0dc3 	CALL __MULW12
                +
0008ab 91a0 059c+LDS R26 , _GPS_shir + ( 4 )
0008ad 91b0 059d+LDS R27 , _GPS_shir + ( 4 ) + 1
                 	__GETW2MN _GPS_shir,4
0008af c01b      	RJMP _0x122
                 ; 0000 043A       break;
                 ; 0000 043B       case 7:
                 _0xB7:
0008b0 30e7      	CPI  R30,LOW(0x7)
0008b1 e0a0      	LDI  R26,HIGH(0x7)
0008b2 07fa      	CPC  R31,R26
0008b3 f461      	BRNE _0xB8
                 ; 0000 043C        GPS_shir[2]=GPS_shir[2]+(simvol-48)*10;
0008b4 2fe1      	MOV  R30,R17
0008b5 e0f0      	LDI  R31,0
0008b6 97f0      	SBIW R30,48
0008b7 e0aa      	LDI  R26,LOW(10)
0008b8 e0b0      	LDI  R27,HIGH(10)
0008b9 940e 0dc3 	CALL __MULW12
                +
0008bb 91a0 059c+LDS R26 , _GPS_shir + ( 4 )
0008bd 91b0 059d+LDS R27 , _GPS_shir + ( 4 ) + 1
                 	__GETW2MN _GPS_shir,4
0008bf c00b      	RJMP _0x122
                 ; 0000 043D       break;
                 ; 0000 043E       case 8:
                 _0xB8:
0008c0 30e8      	CPI  R30,LOW(0x8)
0008c1 e0a0      	LDI  R26,HIGH(0x8)
0008c2 07fa      	CPC  R31,R26
0008c3 f469      	BRNE _0xB1
                 ; 0000 043F        GPS_shir[2]=GPS_shir[2]+(simvol-48);
                +
0008c4 91a0 059c+LDS R26 , _GPS_shir + ( 4 )
0008c6 91b0 059d+LDS R27 , _GPS_shir + ( 4 ) + 1
                 	__GETW2MN _GPS_shir,4
0008c8 2fe1      	MOV  R30,R17
0008c9 e0f0      	LDI  R31,0
0008ca 97f0      	SBIW R30,48
                 _0x122:
0008cb 0fea      	ADD  R30,R26
0008cc 1ffb      	ADC  R31,R27
                 _0x121:
                +
0008cd 93e0 059c+STS _GPS_shir + ( 4 ) , R30
0008cf 93f0 059d+STS _GPS_shir + ( 4 ) + 1 , R31
                 	__PUTW1MN _GPS_shir,4
                 ; 0000 0440      }
                 _0xB1:
                 ; 0000 0441      GPS_sim_counter++;
0008d1 91e0 0592 	LDS  R30,_GPS_sim_counter
0008d3 5fef      	SUBI R30,-LOW(1)
0008d4 93e0 0592 	STS  _GPS_sim_counter,R30
                 ; 0000 0442 
                 ; 0000 0443      goto exit_int;
0008d6 c10d      	RJMP _0xA2
                 ; 0000 0444     }
                 ; 0000 0445    if(GPS_zap_counter==3)
                 _0xAE:
0008d7 91a0 0591 	LDS  R26,_GPS_zap_counter
0008d9 30a3      	CPI  R26,LOW(0x3)
0008da f439      	BRNE _0xBA
                 ; 0000 0446     {GPS_shir[3]=simvol;
                +
0008db e9ae     +LDI R26 , LOW ( _GPS_shir + ( 6 ) )
0008dc e0b5     +LDI R27 , HIGH ( _GPS_shir + ( 6 ) )
                 	__POINTW2MN _GPS_shir,6
0008dd 2fe1      	MOV  R30,R17
0008de e0f0      	LDI  R31,0
0008df 93ed      	ST   X+,R30
0008e0 93fc      	ST   X,R31
                 ; 0000 0447      goto exit_int;}
0008e1 c102      	RJMP _0xA2
                 ; 0000 0448    if(GPS_zap_counter==4)//dolg
                 _0xBA:
0008e2 91a0 0591 	LDS  R26,_GPS_zap_counter
0008e4 30a4      	CPI  R26,LOW(0x4)
0008e5 f009      	BREQ PC+2
0008e6 c09e      	RJMP _0xBB
                 ; 0000 0449     {
                 ; 0000 044A      switch(GPS_sim_counter)
0008e7 91e0 0592 	LDS  R30,_GPS_sim_counter
0008e9 e0f0      	LDI  R31,0
                 ; 0000 044B      {
                 ; 0000 044C       case 0:
0008ea 9730      	SBIW R30,0
0008eb f461      	BRNE _0xBF
                 ; 0000 044D     GPS_dolg[0]=(simvol-48)*100;
0008ec 2fe1      	MOV  R30,R17
0008ed e0f0      	LDI  R31,0
0008ee 97f0      	SBIW R30,48
0008ef e6a4      	LDI  R26,LOW(100)
0008f0 e0b0      	LDI  R27,HIGH(100)
0008f1 940e 0dc3 	CALL __MULW12
0008f3 93e0 05a0 	STS  _GPS_dolg,R30
0008f5 93f0 05a1 	STS  _GPS_dolg+1,R31
                 ; 0000 044E       break;
0008f7 c087      	RJMP _0xBE
                 ; 0000 044F       case 1:
                 _0xBF:
0008f8 30e1      	CPI  R30,LOW(0x1)
0008f9 e0a0      	LDI  R26,HIGH(0x1)
0008fa 07fa      	CPC  R31,R26
0008fb f491      	BRNE _0xC0
                 ; 0000 0450     GPS_dolg[0]=GPS_dolg[0]+(simvol-48)*10;
0008fc 2fe1      	MOV  R30,R17
0008fd e0f0      	LDI  R31,0
0008fe 97f0      	SBIW R30,48
0008ff e0aa      	LDI  R26,LOW(10)
000900 e0b0      	LDI  R27,HIGH(10)
000901 940e 0dc3 	CALL __MULW12
000903 91a0 05a0 	LDS  R26,_GPS_dolg
000905 91b0 05a1 	LDS  R27,_GPS_dolg+1
000907 0fea      	ADD  R30,R26
000908 1ffb      	ADC  R31,R27
000909 93e0 05a0 	STS  _GPS_dolg,R30
00090b 93f0 05a1 	STS  _GPS_dolg+1,R31
                 ; 0000 0451       break;
00090d c071      	RJMP _0xBE
                 ; 0000 0452       case 2:
                 _0xC0:
00090e 30e2      	CPI  R30,LOW(0x2)
00090f e0a0      	LDI  R26,HIGH(0x2)
000910 07fa      	CPC  R31,R26
000911 f471      	BRNE _0xC1
                 ; 0000 0453     GPS_dolg[0]=GPS_dolg[0]+(simvol-48);
000912 2fe1      	MOV  R30,R17
000913 e0f0      	LDI  R31,0
000914 97f0      	SBIW R30,48
000915 91a0 05a0 	LDS  R26,_GPS_dolg
000917 91b0 05a1 	LDS  R27,_GPS_dolg+1
000919 0fea      	ADD  R30,R26
00091a 1ffb      	ADC  R31,R27
00091b 93e0 05a0 	STS  _GPS_dolg,R30
00091d 93f0 05a1 	STS  _GPS_dolg+1,R31
                 ; 0000 0454       break;
00091f c05f      	RJMP _0xBE
                 ; 0000 0455       case 3:
                 _0xC1:
000920 30e3      	CPI  R30,LOW(0x3)
000921 e0a0      	LDI  R26,HIGH(0x3)
000922 07fa      	CPC  R31,R26
000923 f461      	BRNE _0xC2
                 ; 0000 0456        GPS_dolg[1]=(simvol-48)*10;
000924 2fe1      	MOV  R30,R17
000925 e0f0      	LDI  R31,0
000926 97f0      	SBIW R30,48
000927 e0aa      	LDI  R26,LOW(10)
000928 e0b0      	LDI  R27,HIGH(10)
000929 940e 0dc3 	CALL __MULW12
                +
00092b 93e0 05a2+STS _GPS_dolg + ( 2 ) , R30
00092d 93f0 05a3+STS _GPS_dolg + ( 2 ) + 1 , R31
                 	__PUTW1MN _GPS_dolg,2
                 ; 0000 0457       break;
00092f c04f      	RJMP _0xBE
                 ; 0000 0458       case 4:
                 _0xC2:
000930 30e4      	CPI  R30,LOW(0x4)
000931 e0a0      	LDI  R26,HIGH(0x4)
000932 07fa      	CPC  R31,R26
000933 f471      	BRNE _0xC3
                 ; 0000 0459        GPS_dolg[1]=GPS_dolg[1]+(simvol-48);
                +
000934 91a0 05a2+LDS R26 , _GPS_dolg + ( 2 )
000936 91b0 05a3+LDS R27 , _GPS_dolg + ( 2 ) + 1
                 	__GETW2MN _GPS_dolg,2
000938 2fe1      	MOV  R30,R17
000939 e0f0      	LDI  R31,0
00093a 97f0      	SBIW R30,48
00093b 0fea      	ADD  R30,R26
00093c 1ffb      	ADC  R31,R27
                +
00093d 93e0 05a2+STS _GPS_dolg + ( 2 ) , R30
00093f 93f0 05a3+STS _GPS_dolg + ( 2 ) + 1 , R31
                 	__PUTW1MN _GPS_dolg,2
                 ; 0000 045A       break;
000941 c03d      	RJMP _0xBE
                 ; 0000 045B       case 6:
                 _0xC3:
000942 30e6      	CPI  R30,LOW(0x6)
000943 e0a0      	LDI  R26,HIGH(0x6)
000944 07fa      	CPC  R31,R26
000945 f441      	BRNE _0xC4
                 ; 0000 045C        GPS_dolg[2]=(simvol-48)*1000;
000946 2fe1      	MOV  R30,R17
000947 e0f0      	LDI  R31,0
000948 97f0      	SBIW R30,48
000949 eea8      	LDI  R26,LOW(1000)
00094a e0b3      	LDI  R27,HIGH(1000)
00094b 940e 0dc3 	CALL __MULW12
00094d c02d      	RJMP _0x123
                 ; 0000 045D       break;
                 ; 0000 045E       case 7:
                 _0xC4:
00094e 30e7      	CPI  R30,LOW(0x7)
00094f e0a0      	LDI  R26,HIGH(0x7)
000950 07fa      	CPC  R31,R26
000951 f461      	BRNE _0xC5
                 ; 0000 045F        GPS_dolg[2]=GPS_dolg[2]+(simvol-48)*100;
000952 2fe1      	MOV  R30,R17
000953 e0f0      	LDI  R31,0
000954 97f0      	SBIW R30,48
000955 e6a4      	LDI  R26,LOW(100)
000956 e0b0      	LDI  R27,HIGH(100)
000957 940e 0dc3 	CALL __MULW12
                +
000959 91a0 05a4+LDS R26 , _GPS_dolg + ( 4 )
00095b 91b0 05a5+LDS R27 , _GPS_dolg + ( 4 ) + 1
                 	__GETW2MN _GPS_dolg,4
00095d c01b      	RJMP _0x124
                 ; 0000 0460       break;
                 ; 0000 0461       case 8:
                 _0xC5:
00095e 30e8      	CPI  R30,LOW(0x8)
00095f e0a0      	LDI  R26,HIGH(0x8)
000960 07fa      	CPC  R31,R26
000961 f461      	BRNE _0xC6
                 ; 0000 0462        GPS_dolg[2]=GPS_dolg[2]+(simvol-48)*10;
000962 2fe1      	MOV  R30,R17
000963 e0f0      	LDI  R31,0
000964 97f0      	SBIW R30,48
000965 e0aa      	LDI  R26,LOW(10)
000966 e0b0      	LDI  R27,HIGH(10)
000967 940e 0dc3 	CALL __MULW12
                +
000969 91a0 05a4+LDS R26 , _GPS_dolg + ( 4 )
00096b 91b0 05a5+LDS R27 , _GPS_dolg + ( 4 ) + 1
                 	__GETW2MN _GPS_dolg,4
00096d c00b      	RJMP _0x124
                 ; 0000 0463       break;
                 ; 0000 0464       case 9:
                 _0xC6:
00096e 30e9      	CPI  R30,LOW(0x9)
00096f e0a0      	LDI  R26,HIGH(0x9)
000970 07fa      	CPC  R31,R26
000971 f469      	BRNE _0xBE
                 ; 0000 0465        GPS_dolg[2]=GPS_dolg[2]+(simvol-48);
                +
000972 91a0 05a4+LDS R26 , _GPS_dolg + ( 4 )
000974 91b0 05a5+LDS R27 , _GPS_dolg + ( 4 ) + 1
                 	__GETW2MN _GPS_dolg,4
000976 2fe1      	MOV  R30,R17
000977 e0f0      	LDI  R31,0
000978 97f0      	SBIW R30,48
                 _0x124:
000979 0fea      	ADD  R30,R26
00097a 1ffb      	ADC  R31,R27
                 _0x123:
                +
00097b 93e0 05a4+STS _GPS_dolg + ( 4 ) , R30
00097d 93f0 05a5+STS _GPS_dolg + ( 4 ) + 1 , R31
                 	__PUTW1MN _GPS_dolg,4
                 ; 0000 0466      }
                 _0xBE:
                 ; 0000 0467      GPS_sim_counter++;
00097f 91e0 0592 	LDS  R30,_GPS_sim_counter
000981 5fef      	SUBI R30,-LOW(1)
000982 93e0 0592 	STS  _GPS_sim_counter,R30
                 ; 0000 0468      goto exit_int;
000984 c05f      	RJMP _0xA2
                 ; 0000 0469     }
                 ; 0000 046A    if(GPS_zap_counter==5)
                 _0xBB:
000985 91a0 0591 	LDS  R26,_GPS_zap_counter
000987 30a5      	CPI  R26,LOW(0x5)
000988 f439      	BRNE _0xC8
                 ; 0000 046B     {
                 ; 0000 046C      GPS_dolg[3]=simvol;
                +
000989 eaa6     +LDI R26 , LOW ( _GPS_dolg + ( 6 ) )
00098a e0b5     +LDI R27 , HIGH ( _GPS_dolg + ( 6 ) )
                 	__POINTW2MN _GPS_dolg,6
00098b 2fe1      	MOV  R30,R17
00098c e0f0      	LDI  R31,0
00098d 93ed      	ST   X+,R30
00098e 93fc      	ST   X,R31
                 ; 0000 046D      goto exit_int;
00098f c054      	RJMP _0xA2
                 ; 0000 046E     }
                 ; 0000 046F     if(GPS_zap_counter==6)
                 _0xC8:
000990 91a0 0591 	LDS  R26,_GPS_zap_counter
000992 30a6      	CPI  R26,LOW(0x6)
000993 f009      	BREQ PC+2
000994 c04f      	RJMP _0xC9
                 ; 0000 0470     {
                 ; 0000 0471      GPS_solve=simvol;
000995 9310 05a8 	STS  _GPS_solve,R17
                 ; 0000 0472      GPS_flag_ready=1;
000997 e0e1      	LDI  R30,LOW(1)
000998 93e0 0593 	STS  _GPS_flag_ready,R30
                 ; 0000 0473      GPS_flag_gp=0;
00099a e0e0      	LDI  R30,LOW(0)
00099b 93e0 0597 	STS  _GPS_flag_gp,R30
                 ; 0000 0474      GPS_zap_counter=0;
00099d 93e0 0591 	STS  _GPS_zap_counter,R30
                 ; 0000 0475      GPS_ON_COUNTER=0;
00099f 93e0 05a9 	STS  _GPS_ON_COUNTER,R30
                 ; 0000 0476 
                 ; 0000 0477       SEND_MAS[12]=1;
0009a1 e0e1      	LDI  R30,LOW(1)
                +
0009a2 93e0 054c+STS _SEND_MAS + ( 12 ) , R30
                 	__PUTB1MN _SEND_MAS,12
                 ; 0000 0478 
                 ; 0000 0479      SEND_MAS[13]=(unsigned char)GPS_shir[0];
0009a4 91e0 0598 	LDS  R30,_GPS_shir
                +
0009a6 93e0 054d+STS _SEND_MAS + ( 13 ) , R30
                 	__PUTB1MN _SEND_MAS,13
                 ; 0000 047A      SEND_MAS[14]=(unsigned char)GPS_shir[1];
                +
0009a8 91e0 059a+LDS R30 , _GPS_shir + ( 2 )
                 	__GETB1MN _GPS_shir,2
                +
0009aa 93e0 054e+STS _SEND_MAS + ( 14 ) , R30
                 	__PUTB1MN _SEND_MAS,14
                 ; 0000 047B      SEND_MAS[15]=(unsigned char)(GPS_shir[2]/100);
                +
0009ac 91a0 059c+LDS R26 , _GPS_shir + ( 4 )
0009ae 91b0 059d+LDS R27 , _GPS_shir + ( 4 ) + 1
                 	__GETW2MN _GPS_shir,4
0009b0 e6e4      	LDI  R30,LOW(100)
0009b1 e0f0      	LDI  R31,HIGH(100)
0009b2 940e 0dcd 	CALL __DIVW21U
                +
0009b4 93e0 054f+STS _SEND_MAS + ( 15 ) , R30
                 	__PUTB1MN _SEND_MAS,15
                 ; 0000 047C      SEND_MAS[16]=(unsigned char)(GPS_shir[2]%100);
                +
0009b6 91a0 059c+LDS R26 , _GPS_shir + ( 4 )
0009b8 91b0 059d+LDS R27 , _GPS_shir + ( 4 ) + 1
                 	__GETW2MN _GPS_shir,4
0009ba e6e4      	LDI  R30,LOW(100)
0009bb e0f0      	LDI  R31,HIGH(100)
0009bc 940e 0e0f 	CALL __MODW21U
                +
0009be 93e0 0550+STS _SEND_MAS + ( 16 ) , R30
                 	__PUTB1MN _SEND_MAS,16
                 ; 0000 047D 
                 ; 0000 047E      SEND_MAS[17]=(unsigned char)GPS_dolg[0];
0009c0 91e0 05a0 	LDS  R30,_GPS_dolg
                +
0009c2 93e0 0551+STS _SEND_MAS + ( 17 ) , R30
                 	__PUTB1MN _SEND_MAS,17
                 ; 0000 047F      SEND_MAS[18]=(unsigned char)GPS_dolg[1];
                +
0009c4 91e0 05a2+LDS R30 , _GPS_dolg + ( 2 )
                 	__GETB1MN _GPS_dolg,2
                +
0009c6 93e0 0552+STS _SEND_MAS + ( 18 ) , R30
                 	__PUTB1MN _SEND_MAS,18
                 ; 0000 0480      SEND_MAS[19]=(unsigned char)(GPS_dolg[2]/100);
                +
0009c8 91a0 05a4+LDS R26 , _GPS_dolg + ( 4 )
0009ca 91b0 05a5+LDS R27 , _GPS_dolg + ( 4 ) + 1
                 	__GETW2MN _GPS_dolg,4
0009cc e6e4      	LDI  R30,LOW(100)
0009cd e0f0      	LDI  R31,HIGH(100)
0009ce 940e 0dcd 	CALL __DIVW21U
                +
0009d0 93e0 0553+STS _SEND_MAS + ( 19 ) , R30
                 	__PUTB1MN _SEND_MAS,19
                 ; 0000 0481      SEND_MAS[20]=(unsigned char)(GPS_dolg[2]%100);
                +
0009d2 91a0 05a4+LDS R26 , _GPS_dolg + ( 4 )
0009d4 91b0 05a5+LDS R27 , _GPS_dolg + ( 4 ) + 1
                 	__GETW2MN _GPS_dolg,4
0009d6 e6e4      	LDI  R30,LOW(100)
0009d7 e0f0      	LDI  R31,HIGH(100)
0009d8 940e 0e0f 	CALL __MODW21U
                +
0009da 93e0 0554+STS _SEND_MAS + ( 20 ) , R30
                 	__PUTB1MN _SEND_MAS,20
                 ; 0000 0482 
                 ; 0000 0483      SEND_MAS[21]=(unsigned char)GPS_shir[3];
                +
0009dc 91e0 059e+LDS R30 , _GPS_shir + ( 6 )
                 	__GETB1MN _GPS_shir,6
                +
0009de 93e0 0555+STS _SEND_MAS + ( 21 ) , R30
                 	__PUTB1MN _SEND_MAS,21
                 ; 0000 0484      SEND_MAS[22]=(unsigned char)GPS_dolg[3];
                +
0009e0 91e0 05a6+LDS R30 , _GPS_dolg + ( 6 )
                 	__GETB1MN _GPS_dolg,6
                +
0009e2 93e0 0556+STS _SEND_MAS + ( 22 ) , R30
                 	__PUTB1MN _SEND_MAS,22
                 ; 0000 0485 
                 ; 0000 0486     }
                 ; 0000 0487   }
                 _0xC9:
                 ; 0000 0488 
                 ; 0000 0489 
                 ; 0000 048A  exit_int:
                 _0xAD:
                 _0xA2:
                 ; 0000 048B }
0009e4 9119      	LD   R17,Y+
0009e5 91e9      	LD   R30,Y+
0009e6 bfef      	OUT  SREG,R30
0009e7 91f9      	LD   R31,Y+
0009e8 91e9      	LD   R30,Y+
0009e9 91b9      	LD   R27,Y+
0009ea 91a9      	LD   R26,Y+
0009eb 9199      	LD   R25,Y+
0009ec 9019      	LD   R1,Y+
0009ed 9009      	LD   R0,Y+
0009ee 9518      	RETI
                 ; .FEND
                 ;
                 ;
                 ;// USART1 Receiver interrupt service routine
                 ;interrupt [USART1_RXC] void usart1_rx_isr(void)
                 ; 0000 0490 {
                 _usart1_rx_isr:
                 ; .FSTART _usart1_rx_isr
0009ef 920a      	ST   -Y,R0
0009f0 921a      	ST   -Y,R1
0009f1 92fa      	ST   -Y,R15
0009f2 936a      	ST   -Y,R22
0009f3 937a      	ST   -Y,R23
0009f4 938a      	ST   -Y,R24
0009f5 939a      	ST   -Y,R25
0009f6 93aa      	ST   -Y,R26
0009f7 93ba      	ST   -Y,R27
0009f8 93ea      	ST   -Y,R30
0009f9 93fa      	ST   -Y,R31
0009fa b7ef      	IN   R30,SREG
0009fb 93ea      	ST   -Y,R30
                 ; 0000 0491  char data;
                 ; 0000 0492   data=UDR1;
0009fc 931a      	ST   -Y,R17
                 ;	data -> R17
0009fd 9110 009c 	LDS  R17,156
                 ; 0000 0493  if((receive_counter==0)||(data>245))
0009ff 91a0 053e 	LDS  R26,_receive_counter
000a01 91b0 053f 	LDS  R27,_receive_counter+1
000a03 9710      	SBIW R26,0
000a04 f019      	BREQ _0xCB
000a05 3f16      	CPI  R17,246
000a06 f408      	BRSH _0xCB
000a07 c05f      	RJMP _0xCA
                 _0xCB:
                 ; 0000 0494  {
                 ; 0000 0495   receive_counter=0;
000a08 e0e0      	LDI  R30,LOW(0)
000a09 93e0 053e 	STS  _receive_counter,R30
000a0b 93e0 053f 	STS  _receive_counter+1,R30
                 ; 0000 0496   switch(data)
000a0d 2fe1      	MOV  R30,R17
000a0e e0f0      	LDI  R31,0
                 ; 0000 0497   {
                 ; 0000 0498    //setup request
                 ; 0000 0499    case 246:
000a0f 3fe6      	CPI  R30,LOW(0xF6)
000a10 e0a0      	LDI  R26,HIGH(0xF6)
000a11 07fa      	CPC  R31,R26
000a12 f439      	BRNE _0xD0
                 ; 0000 049A    flag_transmission=248;
000a13 efe8      	LDI  R30,LOW(248)
000a14 e0f0      	LDI  R31,HIGH(248)
000a15 93e0 053a 	STS  _flag_transmission,R30
000a17 93f0 053b 	STS  _flag_transmission+1,R31
                 ; 0000 049B    break;
000a19 c04c      	RJMP _0xCF
                 ; 0000 049C 
                 ; 0000 049D    //calibr request
                 ; 0000 049E    case 247:
                 _0xD0:
000a1a 3fe7      	CPI  R30,LOW(0xF7)
000a1b e0a0      	LDI  R26,HIGH(0xF7)
000a1c 07fa      	CPC  R31,R26
000a1d f439      	BRNE _0xD1
                 ; 0000 049F    flag_transmission=249;
000a1e efe9      	LDI  R30,LOW(249)
000a1f e0f0      	LDI  R31,HIGH(249)
000a20 93e0 053a 	STS  _flag_transmission,R30
000a22 93f0 053b 	STS  _flag_transmission+1,R31
                 ; 0000 04A0    break;
000a24 c041      	RJMP _0xCF
                 ; 0000 04A1 
                 ; 0000 04A2    //setup table
                 ; 0000 04A3    case 248:
                 _0xD1:
000a25 3fe8      	CPI  R30,LOW(0xF8)
000a26 e0a0      	LDI  R26,HIGH(0xF8)
000a27 07fa      	CPC  R31,R26
000a28 f469      	BRNE _0xD2
                 ; 0000 04A4    flag_receive=248;
000a29 efe8      	LDI  R30,LOW(248)
000a2a e0f0      	LDI  R31,HIGH(248)
000a2b 93e0 053c 	STS  _flag_receive,R30
000a2d 93f0 053d 	STS  _flag_receive+1,R31
                 ; 0000 04A5    receive_counter=7;
000a2f e0e7      	LDI  R30,LOW(7)
000a30 e0f0      	LDI  R31,HIGH(7)
000a31 93e0 053e 	STS  _receive_counter,R30
000a33 93f0 053f 	STS  _receive_counter+1,R31
                 ; 0000 04A6    break;
000a35 c030      	RJMP _0xCF
                 ; 0000 04A7 
                 ; 0000 04A8    //calibr table
                 ; 0000 04A9    case 249:
                 _0xD2:
000a36 3fe9      	CPI  R30,LOW(0xF9)
000a37 e0a0      	LDI  R26,HIGH(0xF9)
000a38 07fa      	CPC  R31,R26
000a39 f469      	BRNE _0xD3
                 ; 0000 04AA    flag_receive=249;
000a3a efe9      	LDI  R30,LOW(249)
000a3b e0f0      	LDI  R31,HIGH(249)
000a3c 93e0 053c 	STS  _flag_receive,R30
000a3e 93f0 053d 	STS  _flag_receive+1,R31
                 ; 0000 04AB    receive_counter=9;
000a40 e0e9      	LDI  R30,LOW(9)
000a41 e0f0      	LDI  R31,HIGH(9)
000a42 93e0 053e 	STS  _receive_counter,R30
000a44 93f0 053f 	STS  _receive_counter+1,R31
                 ; 0000 04AC    break;
000a46 c01f      	RJMP _0xCF
                 ; 0000 04AD 
                 ; 0000 04AE     //system on
                 ; 0000 04AF    case 250:
                 _0xD3:
000a47 3fea      	CPI  R30,LOW(0xFA)
000a48 e0a0      	LDI  R26,HIGH(0xFA)
000a49 07fa      	CPC  R31,R26
000a4a f441      	BRNE _0xD4
                 ; 0000 04B0     if(flag_I_NULL<10)//If the current null calibration has not finished
000a4b 91a0 0590 	LDS  R26,_flag_I_NULL
000a4d 30aa      	CPI  R26,LOW(0xA)
000a4e f0b8      	BRLO _0xCF
                 ; 0000 04B1      break;
                 ; 0000 04B2     flag_start=1;
000a4f e0e1      	LDI  R30,LOW(1)
000a50 93e0 05aa 	STS  _flag_start,R30
                 ; 0000 04B3    break;
000a52 c013      	RJMP _0xCF
                 ; 0000 04B4 
                 ; 0000 04B5    //system off
                 ; 0000 04B6    case 251:
                 _0xD4:
000a53 3feb      	CPI  R30,LOW(0xFB)
000a54 e0a0      	LDI  R26,HIGH(0xFB)
000a55 07fa      	CPC  R31,R26
000a56 f421      	BRNE _0xD6
                 ; 0000 04B7    flag_start=0;
000a57 e0e0      	LDI  R30,LOW(0)
000a58 93e0 05aa 	STS  _flag_start,R30
                 ; 0000 04B8    break;
000a5a c00b      	RJMP _0xCF
                 ; 0000 04B9 
                 ; 0000 04BA    case 252:
                 _0xD6:
000a5b 3fec      	CPI  R30,LOW(0xFC)
000a5c e0a0      	LDI  R26,HIGH(0xFC)
000a5d 07fa      	CPC  R31,R26
000a5e f411      	BRNE _0xD7
                 ; 0000 04BB    PORTC.1 = 1;//fonar on
000a5f 9aa9      	SBI  0x15,1
                 ; 0000 04BC    break;
000a60 c005      	RJMP _0xCF
                 ; 0000 04BD 
                 ; 0000 04BE    case 253:
                 _0xD7:
000a61 3fed      	CPI  R30,LOW(0xFD)
000a62 e0a0      	LDI  R26,HIGH(0xFD)
000a63 07fa      	CPC  R31,R26
000a64 f409      	BRNE _0xCF
                 ; 0000 04BF    PORTC.1 = 0;//fonar off
000a65 98a9      	CBI  0x15,1
                 ; 0000 04C0    break;
                 ; 0000 04C1   }
                 _0xCF:
                 ; 0000 04C2  }
                 ; 0000 04C3  else
000a66 c035      	RJMP _0xDD
                 _0xCA:
                 ; 0000 04C4  {
                 ; 0000 04C5    if(flag_receive==248)
000a67 91a0 053c 	LDS  R26,_flag_receive
000a69 91b0 053d 	LDS  R27,_flag_receive+1
000a6b 3fa8      	CPI  R26,LOW(0xF8)
000a6c e0e0      	LDI  R30,HIGH(0xF8)
000a6d 07be      	CPC  R27,R30
000a6e f479      	BRNE _0xDE
                 ; 0000 04C6    {
                 ; 0000 04C7     SETUP_MAS[8-receive_counter]=data;
000a6f 91a0 053e 	LDS  R26,_receive_counter
000a71 91b0 053f 	LDS  R27,_receive_counter+1
000a73 e0e8      	LDI  R30,LOW(8)
000a74 e0f0      	LDI  R31,HIGH(8)
000a75 1bea      	SUB  R30,R26
000a76 0bfb      	SBC  R31,R27
000a77 5eea      	SUBI R30,LOW(-_SETUP_MAS)
000a78 4ffa      	SBCI R31,HIGH(-_SETUP_MAS)
000a79 8310      	ST   Z,R17
                 ; 0000 04C8     if(receive_counter==1)
000a7a 9711      	SBIW R26,1
000a7b f411      	BRNE _0xDF
                 ; 0000 04C9     {
                 ; 0000 04CA      save_to_eeprom();
000a7c d23a      	RCALL _save_to_eeprom
                 ; 0000 04CB      Read_Setup_Calibr();
000a7d dc34      	RCALL _Read_Setup_Calibr
                 ; 0000 04CC     }
                 ; 0000 04CD    }
                 _0xDF:
                 ; 0000 04CE 
                 ; 0000 04CF     if(flag_receive==249)
                 _0xDE:
000a7e 91a0 053c 	LDS  R26,_flag_receive
000a80 91b0 053d 	LDS  R27,_flag_receive+1
000a82 3fa9      	CPI  R26,LOW(0xF9)
000a83 e0e0      	LDI  R30,HIGH(0xF9)
000a84 07be      	CPC  R27,R30
000a85 f479      	BRNE _0xE0
                 ; 0000 04D0     {
                 ; 0000 04D1      CALIBR_MAS[10-receive_counter]=data;
000a86 91a0 053e 	LDS  R26,_receive_counter
000a88 91b0 053f 	LDS  R27,_receive_counter+1
000a8a e0ea      	LDI  R30,LOW(10)
000a8b e0f0      	LDI  R31,HIGH(10)
000a8c 1bea      	SUB  R30,R26
000a8d 0bfb      	SBC  R31,R27
000a8e 5ee2      	SUBI R30,LOW(-_CALIBR_MAS)
000a8f 4ffa      	SBCI R31,HIGH(-_CALIBR_MAS)
000a90 8310      	ST   Z,R17
                 ; 0000 04D2      if(receive_counter==1)
000a91 9711      	SBIW R26,1
000a92 f411      	BRNE _0xE1
                 ; 0000 04D3      {
                 ; 0000 04D4       save_to_eeprom();
000a93 d223      	RCALL _save_to_eeprom
                 ; 0000 04D5       Read_Setup_Calibr();
000a94 dc1d      	RCALL _Read_Setup_Calibr
                 ; 0000 04D6      }
                 ; 0000 04D7     }
                 _0xE1:
                 ; 0000 04D8 
                 ; 0000 04D9    receive_counter--;
                 _0xE0:
000a95 e3ae      	LDI  R26,LOW(_receive_counter)
000a96 e0b5      	LDI  R27,HIGH(_receive_counter)
000a97 91ed      	LD   R30,X+
000a98 91fd      	LD   R31,X+
000a99 9731      	SBIW R30,1
000a9a 93fe      	ST   -X,R31
000a9b 93ee      	ST   -X,R30
                 ; 0000 04DA  }
                 _0xDD:
                 ; 0000 04DB }
000a9c 9119      	LD   R17,Y+
000a9d 91e9      	LD   R30,Y+
000a9e bfef      	OUT  SREG,R30
000a9f 91f9      	LD   R31,Y+
000aa0 91e9      	LD   R30,Y+
000aa1 91b9      	LD   R27,Y+
000aa2 91a9      	LD   R26,Y+
000aa3 9199      	LD   R25,Y+
000aa4 9189      	LD   R24,Y+
000aa5 9179      	LD   R23,Y+
000aa6 9169      	LD   R22,Y+
000aa7 90f9      	LD   R15,Y+
000aa8 9019      	LD   R1,Y+
000aa9 9009      	LD   R0,Y+
000aaa 9518      	RETI
                 ; .FEND
                 ;
                 ;
                 ;
                 ;
                 ;
                 ;// Read the AD conversion result
                 ;unsigned int read_adc(unsigned char adc_input)
                 ; 0000 04E3 {
                 _read_adc:
                 ; .FSTART _read_adc
                 ; 0000 04E4  ADMUX=adc_input | (ADC_VREF_TYPE & 0xff);
000aab 93aa      	ST   -Y,R26
                 ;	adc_input -> Y+0
000aac 81e8      	LD   R30,Y
000aad 6ce0      	ORI  R30,LOW(0xC0)
000aae b9e7      	OUT  0x7,R30
                 ; 0000 04E5  // Delay needed for the stabilization of the ADC input voltage
                 ; 0000 04E6  delay_us(7);
                +
000aaf e18a     +LDI R24 , LOW ( 26 )
                +__DELAY_USB_LOOP :
000ab0 958a     +DEC R24
000ab1 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 26
                 ; 0000 04E7  // Start the AD conversion
                 ; 0000 04E8  ADCSRA|=0x40;
000ab2 9a36      	SBI  0x6,6
                 ; 0000 04E9  // Wait for the AD conversion to complete
                 ; 0000 04EA  while ((ADCSRA & 0x10)==0);
                 _0xE2:
000ab3 9b34      	SBIS 0x6,4
000ab4 cffe      	RJMP _0xE2
                 ; 0000 04EB   ADCSRA|=0x10;
000ab5 9a34      	SBI  0x6,4
                 ; 0000 04EC  return ADCW;
000ab6 b1e4      	IN   R30,0x4
000ab7 b1f5      	IN   R31,0x4+1
                 _0x2060003:
000ab8 9621      	ADIW R28,1
000ab9 9508      	RET
                 ; 0000 04ED }
                 ; .FEND
                 ;
                 ;
                 ;
                 ; unsigned char NEW_REGULATOR(unsigned int Z,unsigned int S)//s 1000=1
                 ; 0000 04F2  {
                 _NEW_REGULATOR:
                 ; .FSTART _NEW_REGULATOR
                 ; 0000 04F3   int U,E;
                 ; 0000 04F4 
                 ; 0000 04F5   E=150-S;//z always 150
000aba 93ba      	ST   -Y,R27
000abb 93aa      	ST   -Y,R26
000abc 940e 0e7e 	CALL __SAVELOCR4
                 ;	Z -> Y+6
                 ;	S -> Y+4
                 ;	U -> R16,R17
                 ;	E -> R18,R19
000abe 81ac      	LDD  R26,Y+4
000abf 81bd      	LDD  R27,Y+4+1
000ac0 e9e6      	LDI  R30,LOW(150)
000ac1 e0f0      	LDI  R31,HIGH(150)
000ac2 1bea      	SUB  R30,R26
000ac3 0bfb      	SBC  R31,R27
000ac4 019f      	MOVW R18,R30
                 ; 0000 04F6   PID_I_S=PID_I_S+E;
000ac5 91a0 05d7 	LDS  R26,_PID_I_S
000ac7 91b0 05d8 	LDS  R27,_PID_I_S+1
000ac9 0fea      	ADD  R30,R26
000aca 1ffb      	ADC  R31,R27
000acb 93e0 05d7 	STS  _PID_I_S,R30
000acd 93f0 05d8 	STS  _PID_I_S+1,R31
                 ; 0000 04F7   if(PID_I_S>1000)
000acf 91a0 05d7 	LDS  R26,_PID_I_S
000ad1 91b0 05d8 	LDS  R27,_PID_I_S+1
000ad3 3ea9      	CPI  R26,LOW(0x3E9)
000ad4 e0e3      	LDI  R30,HIGH(0x3E9)
000ad5 07be      	CPC  R27,R30
000ad6 f034      	BRLT _0xE5
                 ; 0000 04F8    PID_I_S=1000;
000ad7 eee8      	LDI  R30,LOW(1000)
000ad8 e0f3      	LDI  R31,HIGH(1000)
000ad9 93e0 05d7 	STS  _PID_I_S,R30
000adb 93f0 05d8 	STS  _PID_I_S+1,R31
                 ; 0000 04F9   if(PID_I_S<0)
                 _0xE5:
000add 91a0 05d8 	LDS  R26,_PID_I_S+1
000adf 23aa      	TST  R26
000ae0 f42a      	BRPL _0xE6
                 ; 0000 04FA    PID_I_S=0;
000ae1 e0e0      	LDI  R30,LOW(0)
000ae2 93e0 05d7 	STS  _PID_I_S,R30
000ae4 93e0 05d8 	STS  _PID_I_S+1,R30
                 ; 0000 04FB 
                 ; 0000 04FC    if(S<30)
                 _0xE6:
000ae6 81ac      	LDD  R26,Y+4
000ae7 81bd      	LDD  R27,Y+4+1
000ae8 975e      	SBIW R26,30
000ae9 f430      	BRSH _0xE7
                 ; 0000 04FD     PID_I_S=800;
000aea e2e0      	LDI  R30,LOW(800)
000aeb e0f3      	LDI  R31,HIGH(800)
000aec 93e0 05d7 	STS  _PID_I_S,R30
000aee 93f0 05d8 	STS  _PID_I_S+1,R31
                 ; 0000 04FE 
                 ; 0000 04FF    U=PID_I_S;
                 _0xE7:
                +
000af0 9100 05d7+LDS R16 , 0 + ( _PID_I_S )
000af2 9110 05d8+LDS R17 , 0 + ( _PID_I_S ) + 1
                 	__GETWRMN 16,17,0,_PID_I_S
                 ; 0000 0500 
                 ; 0000 0501 
                 ; 0000 0502  U=U/4;
000af4 01d8      	MOVW R26,R16
000af5 e0e4      	LDI  R30,LOW(4)
000af6 e0f0      	LDI  R31,HIGH(4)
000af7 940e 0de0 	CALL __DIVW21
000af9 018f      	MOVW R16,R30
                 ; 0000 0503   if(U<0)
000afa 2311      	TST  R17
000afb f412      	BRPL _0xE8
                 ; 0000 0504    U=0;
                +
000afc e000     +LDI R16 , LOW ( 0 )
000afd e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 ; 0000 0505   if(U>255)
                 _0xE8:
                +
000afe 3000     +CPI R16 , LOW ( 256 )
000aff e0e1     +LDI R30 , HIGH ( 256 )
000b00 071e     +CPC R17 , R30
                 	__CPWRN 16,17,256
000b01 f014      	BRLT _0xE9
                 ; 0000 0506    U=255;
                +
000b02 ef0f     +LDI R16 , LOW ( 255 )
000b03 e010     +LDI R17 , HIGH ( 255 )
                 	__GETWRN 16,17,255
                 ; 0000 0507   return (unsigned char)U;
                 _0xE9:
000b04 2fe0      	MOV  R30,R16
000b05 940e 0e85 	CALL __LOADLOCR4
000b07 9628      	ADIW R28,8
000b08 9508      	RET
                 ; 0000 0508  }
                 ; .FEND
                 ;
                 ;
                 ;// Timer2 overflow interrupt service routine
                 ;////100HZ Program cycle
                 ;interrupt [TIM2_OVF] void timer2_ovf_isr(void)
                 ; 0000 050E {
                 _timer2_ovf_isr:
                 ; .FSTART _timer2_ovf_isr
000b09 920a      	ST   -Y,R0
000b0a 921a      	ST   -Y,R1
000b0b 92fa      	ST   -Y,R15
000b0c 936a      	ST   -Y,R22
000b0d 937a      	ST   -Y,R23
000b0e 938a      	ST   -Y,R24
000b0f 939a      	ST   -Y,R25
000b10 93aa      	ST   -Y,R26
000b11 93ba      	ST   -Y,R27
000b12 93ea      	ST   -Y,R30
000b13 93fa      	ST   -Y,R31
000b14 b7ef      	IN   R30,SREG
000b15 93ea      	ST   -Y,R30
                 ; 0000 050F  int SCOLGENIE=0;
                 ; 0000 0510  unsigned char PWM=0;
                 ; 0000 0511 
                 ; 0000 0512  TCNT2=148;//100HZ
000b16 940e 0e7e 	CALL __SAVELOCR4
                 ;	SCOLGENIE -> R16,R17
                 ;	PWM -> R19
                +
000b18 e000     +LDI R16 , LOW ( 0 )
000b19 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
000b1a e030      	LDI  R19,0
000b1b e9e4      	LDI  R30,LOW(148)
000b1c bde4      	OUT  0x24,R30
                 ; 0000 0513  //Speed---------------------------------------------------------------------------
                 ; 0000 0514   if((IK_DELTA>400)&&(ovf_IK<2))   //   ~~160km/h             172,800 kHz
000b1d 91a0 056e 	LDS  R26,_IK_DELTA
000b1f 91b0 056f 	LDS  R27,_IK_DELTA+1
000b21 9180 0570 	LDS  R24,_IK_DELTA+2
000b23 9190 0571 	LDS  R25,_IK_DELTA+3
                +
000b25 39a1     +CPI R26 , LOW ( 0x191 )
000b26 e0e1     +LDI R30 , HIGH ( 0x191 )
000b27 07be     +CPC R27 , R30
000b28 e0e0     +LDI R30 , BYTE3 ( 0x191 )
000b29 078e     +CPC R24 , R30
000b2a e0e0     +LDI R30 , BYTE4 ( 0x191 )
000b2b 079e     +CPC R25 , R30
                 	__CPD2N 0x191
000b2c f020      	BRLO _0xEB
000b2d 91a0 055c 	LDS  R26,_ovf_IK
000b2f 30a2      	CPI  R26,LOW(0x2)
000b30 f008      	BRLO _0xEC
                 _0xEB:
000b31 c01a      	RJMP _0xEA
                 _0xEC:
                 ; 0000 0515           {
                 ; 0000 0516            IK_SPEED_KM_H=(unsigned int)(((unsigned long)R_IK*2255)/IK_DELTA);
000b32 01d6      	MOVW R26,R12
000b33 2788      	CLR  R24
000b34 2799      	CLR  R25
                +
000b35 ecef     +LDI R30 , LOW ( 0x8CF )
000b36 e0f8     +LDI R31 , HIGH ( 0x8CF )
000b37 e060     +LDI R22 , BYTE3 ( 0x8CF )
000b38 e070     +LDI R23 , BYTE4 ( 0x8CF )
                 	__GETD1N 0x8CF
000b39 940e 0d9d 	CALL __MULD12U
000b3b 01df      	MOVW R26,R30
000b3c 01cb      	MOVW R24,R22
000b3d 91e0 056e 	LDS  R30,_IK_DELTA
000b3f 91f0 056f 	LDS  R31,_IK_DELTA+1
000b41 9160 0570 	LDS  R22,_IK_DELTA+2
000b43 9170 0571 	LDS  R23,_IK_DELTA+3
000b45 940e 0de5 	CALL __DIVD21U
000b47 93e0 0576 	STS  _IK_SPEED_KM_H,R30
000b49 93f0 0577 	STS  _IK_SPEED_KM_H+1,R31
                 ; 0000 0517           }
                 ; 0000 0518   else
000b4b c005      	RJMP _0xED
                 _0xEA:
                 ; 0000 0519           {
                 ; 0000 051A            IK_SPEED_KM_H=0;
000b4c e0e0      	LDI  R30,LOW(0)
000b4d 93e0 0576 	STS  _IK_SPEED_KM_H,R30
000b4f 93e0 0577 	STS  _IK_SPEED_KM_H+1,R30
                 ; 0000 051B           }
                 _0xED:
                 ; 0000 051C           IK_SPEED_MAS[0]=IK_SPEED_MAS[1];
                +
000b51 91e0 057c+LDS R30 , _IK_SPEED_MAS + ( 2 )
000b53 91f0 057d+LDS R31 , _IK_SPEED_MAS + ( 2 ) + 1
                 	__GETW1MN _IK_SPEED_MAS,2
000b55 93e0 057a 	STS  _IK_SPEED_MAS,R30
000b57 93f0 057b 	STS  _IK_SPEED_MAS+1,R31
                 ; 0000 051D           IK_SPEED_MAS[1]=IK_SPEED_MAS[2];
                +
000b59 91e0 057e+LDS R30 , _IK_SPEED_MAS + ( 4 )
000b5b 91f0 057f+LDS R31 , _IK_SPEED_MAS + ( 4 ) + 1
                 	__GETW1MN _IK_SPEED_MAS,4
                +
000b5d 93e0 057c+STS _IK_SPEED_MAS + ( 2 ) , R30
000b5f 93f0 057d+STS _IK_SPEED_MAS + ( 2 ) + 1 , R31
                 	__PUTW1MN _IK_SPEED_MAS,2
                 ; 0000 051E           IK_SPEED_MAS[2]=IK_SPEED_KM_H;
000b61 91e0 0576 	LDS  R30,_IK_SPEED_KM_H
000b63 91f0 0577 	LDS  R31,_IK_SPEED_KM_H+1
                +
000b65 93e0 057e+STS _IK_SPEED_MAS + ( 4 ) , R30
000b67 93f0 057f+STS _IK_SPEED_MAS + ( 4 ) + 1 , R31
                 	__PUTW1MN _IK_SPEED_MAS,4
                 ; 0000 051F 
                 ; 0000 0520   if((TK_DELTA>400)&&(ovf_TK<2))   //   ~~160            172,800 kHz
000b69 91a0 0572 	LDS  R26,_TK_DELTA
000b6b 91b0 0573 	LDS  R27,_TK_DELTA+1
000b6d 9180 0574 	LDS  R24,_TK_DELTA+2
000b6f 9190 0575 	LDS  R25,_TK_DELTA+3
                +
000b71 39a1     +CPI R26 , LOW ( 0x191 )
000b72 e0e1     +LDI R30 , HIGH ( 0x191 )
000b73 07be     +CPC R27 , R30
000b74 e0e0     +LDI R30 , BYTE3 ( 0x191 )
000b75 078e     +CPC R24 , R30
000b76 e0e0     +LDI R30 , BYTE4 ( 0x191 )
000b77 079e     +CPC R25 , R30
                 	__CPD2N 0x191
000b78 f020      	BRLO _0xEF
000b79 91a0 055d 	LDS  R26,_ovf_TK
000b7b 30a2      	CPI  R26,LOW(0x2)
000b7c f008      	BRLO _0xF0
                 _0xEF:
000b7d c01d      	RJMP _0xEE
                 _0xF0:
                 ; 0000 0521           {
                 ; 0000 0522            TK_SPEED_KM_H=(unsigned int)(((unsigned long)R_TK*2171)/TK_DELTA);
000b7e 91a0 0512 	LDS  R26,_R_TK
000b80 91b0 0513 	LDS  R27,_R_TK+1
000b82 2788      	CLR  R24
000b83 2799      	CLR  R25
                +
000b84 e7eb     +LDI R30 , LOW ( 0x87B )
000b85 e0f8     +LDI R31 , HIGH ( 0x87B )
000b86 e060     +LDI R22 , BYTE3 ( 0x87B )
000b87 e070     +LDI R23 , BYTE4 ( 0x87B )
                 	__GETD1N 0x87B
000b88 940e 0d9d 	CALL __MULD12U
000b8a 01df      	MOVW R26,R30
000b8b 01cb      	MOVW R24,R22
000b8c 91e0 0572 	LDS  R30,_TK_DELTA
000b8e 91f0 0573 	LDS  R31,_TK_DELTA+1
000b90 9160 0574 	LDS  R22,_TK_DELTA+2
000b92 9170 0575 	LDS  R23,_TK_DELTA+3
000b94 940e 0de5 	CALL __DIVD21U
000b96 93e0 0578 	STS  _TK_SPEED_KM_H,R30
000b98 93f0 0579 	STS  _TK_SPEED_KM_H+1,R31
                 ; 0000 0523           }
                 ; 0000 0524   else
000b9a c005      	RJMP _0xF1
                 _0xEE:
                 ; 0000 0525           {
                 ; 0000 0526            TK_SPEED_KM_H=0;
000b9b e0e0      	LDI  R30,LOW(0)
000b9c 93e0 0578 	STS  _TK_SPEED_KM_H,R30
000b9e 93e0 0579 	STS  _TK_SPEED_KM_H+1,R30
                 ; 0000 0527           }
                 _0xF1:
                 ; 0000 0528           TK_SPEED_MAS[0]=TK_SPEED_MAS[1];
                +
000ba0 91e0 0582+LDS R30 , _TK_SPEED_MAS + ( 2 )
000ba2 91f0 0583+LDS R31 , _TK_SPEED_MAS + ( 2 ) + 1
                 	__GETW1MN _TK_SPEED_MAS,2
000ba4 93e0 0580 	STS  _TK_SPEED_MAS,R30
000ba6 93f0 0581 	STS  _TK_SPEED_MAS+1,R31
                 ; 0000 0529           TK_SPEED_MAS[1]=TK_SPEED_MAS[2];
                +
000ba8 91e0 0584+LDS R30 , _TK_SPEED_MAS + ( 4 )
000baa 91f0 0585+LDS R31 , _TK_SPEED_MAS + ( 4 ) + 1
                 	__GETW1MN _TK_SPEED_MAS,4
                +
000bac 93e0 0582+STS _TK_SPEED_MAS + ( 2 ) , R30
000bae 93f0 0583+STS _TK_SPEED_MAS + ( 2 ) + 1 , R31
                 	__PUTW1MN _TK_SPEED_MAS,2
                 ; 0000 052A           TK_SPEED_MAS[2]=TK_SPEED_KM_H;
000bb0 91e0 0578 	LDS  R30,_TK_SPEED_KM_H
000bb2 91f0 0579 	LDS  R31,_TK_SPEED_KM_H+1
                +
000bb4 93e0 0584+STS _TK_SPEED_MAS + ( 4 ) , R30
000bb6 93f0 0585+STS _TK_SPEED_MAS + ( 4 ) + 1 , R31
                 	__PUTW1MN _TK_SPEED_MAS,4
                 ; 0000 052B   //Speed---------------------------------------------------------------------------
                 ; 0000 052C 
                 ; 0000 052D 
                 ; 0000 052E         //Proverka u vichiclenie skolgenia---------------------------------------------------------------
                 ; 0000 052F           if((IK_SPEED_KM_H>=TK_SPEED_KM_H)||(TK_SPEED_KM_H<100))// 10kmh
000bb8 91a0 0576 	LDS  R26,_IK_SPEED_KM_H
000bba 91b0 0577 	LDS  R27,_IK_SPEED_KM_H+1
000bbc 17ae      	CP   R26,R30
000bbd 07bf      	CPC  R27,R31
000bbe f440      	BRSH _0xF3
000bbf 91a0 0578 	LDS  R26,_TK_SPEED_KM_H
000bc1 91b0 0579 	LDS  R27,_TK_SPEED_KM_H+1
000bc3 36a4      	CPI  R26,LOW(0x64)
000bc4 e0e0      	LDI  R30,HIGH(0x64)
000bc5 07be      	CPC  R27,R30
000bc6 f418      	BRSH _0xF2
                 _0xF3:
                 ; 0000 0530             SCOLGENIE=0;
                +
000bc7 e000     +LDI R16 , LOW ( 0 )
000bc8 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 ; 0000 0531           else
000bc9 c01d      	RJMP _0xF5
                 _0xF2:
                 ; 0000 0532             SCOLGENIE=(int)((((long int)(TK_SPEED_KM_H-IK_SPEED_KM_H))*1000)/((long int)TK_SPEED_KM_H));
000bca 91a0 0576 	LDS  R26,_IK_SPEED_KM_H
000bcc 91b0 0577 	LDS  R27,_IK_SPEED_KM_H+1
000bce 91e0 0578 	LDS  R30,_TK_SPEED_KM_H
000bd0 91f0 0579 	LDS  R31,_TK_SPEED_KM_H+1
000bd2 1bea      	SUB  R30,R26
000bd3 0bfb      	SBC  R31,R27
000bd4 2766      	CLR  R22
000bd5 2777      	CLR  R23
                +
000bd6 eea8     +LDI R26 , LOW ( 0x3E8 )
000bd7 e0b3     +LDI R27 , HIGH ( 0x3E8 )
000bd8 e080     +LDI R24 , BYTE3 ( 0x3E8 )
000bd9 e090     +LDI R25 , BYTE4 ( 0x3E8 )
                 	__GETD2N 0x3E8
000bda 940e 0dc8 	CALL __MULD12
000bdc 01df      	MOVW R26,R30
000bdd 01cb      	MOVW R24,R22
000bde 91e0 0578 	LDS  R30,_TK_SPEED_KM_H
000be0 91f0 0579 	LDS  R31,_TK_SPEED_KM_H+1
000be2 2766      	CLR  R22
000be3 2777      	CLR  R23
000be4 940e 0e0a 	CALL __DIVD21
000be6 018f      	MOVW R16,R30
                 ; 0000 0533         //-----------------------------------------------------------------------------------------------
                 ; 0000 0534 
                 ; 0000 0535 
                 ; 0000 0536         if(flag_start==1)
                 _0xF5:
000be7 91a0 05aa 	LDS  R26,_flag_start
000be9 30a1      	CPI  R26,LOW(0x1)
000bea f4b9      	BRNE _0xF6
                 ; 0000 0537           {
                 ; 0000 0538            if(TK_SPEED_KM_H<750)
000beb 91a0 0578 	LDS  R26,_TK_SPEED_KM_H
000bed 91b0 0579 	LDS  R27,_TK_SPEED_KM_H+1
000bef 3eae      	CPI  R26,LOW(0x2EE)
000bf0 e0e2      	LDI  R30,HIGH(0x2EE)
000bf1 07be      	CPC  R27,R30
000bf2 f468      	BRSH _0xF7
                 ; 0000 0539            {
                 ; 0000 053A               PWM=NEW_REGULATOR(ZADANIE_S*10,(unsigned int)SCOLGENIE);
000bf3 91a0 0514 	LDS  R26,_ZADANIE_S
000bf5 91b0 0515 	LDS  R27,_ZADANIE_S+1
000bf7 e0ea      	LDI  R30,LOW(10)
000bf8 940e 0dbd 	CALL __MULB1W2U
000bfa 93fa      	ST   -Y,R31
000bfb 93ea      	ST   -Y,R30
000bfc 01d8      	MOVW R26,R16
000bfd debc      	RCALL _NEW_REGULATOR
000bfe 2f3e      	MOV  R19,R30
                 ; 0000 053B            }
                 ; 0000 053C            else
000bff c001      	RJMP _0xF8
                 _0xF7:
                 ; 0000 053D            {
                 ; 0000 053E             PWM=255;
000c00 ef3f      	LDI  R19,LOW(255)
                 ; 0000 053F             //PID_I_S=800;
                 ; 0000 0540            }
                 _0xF8:
                 ; 0000 0541           }
                 ; 0000 0542           else
000c01 c001      	RJMP _0xF9
                 _0xF6:
                 ; 0000 0543           {
                 ; 0000 0544            PWM=0;
000c02 e030      	LDI  R19,LOW(0)
                 ; 0000 0545           }
                 _0xF9:
                 ; 0000 0546            OCR0=255-PWM;
000c03 efef      	LDI  R30,LOW(255)
000c04 1be3      	SUB  R30,R19
000c05 bfe1      	OUT  0x31,R30
                 ; 0000 0547 
                 ; 0000 0548  if(program_cycle_counter<9)
000c06 91a0 055b 	LDS  R26,_program_cycle_counter
000c08 30a9      	CPI  R26,LOW(0x9)
000c09 f420      	BRSH _0xFA
                 ; 0000 0549   {program_cycle_counter++;}
000c0a 91e0 055b 	LDS  R30,_program_cycle_counter
000c0c 5fef      	SUBI R30,-LOW(1)
000c0d c004      	RJMP _0x125
                 ; 0000 054A  else
                 _0xFA:
                 ; 0000 054B   {
                 ; 0000 054C    program_cycle_flag=1;
000c0e e0e1      	LDI  R30,LOW(1)
000c0f 93e0 055a 	STS  _program_cycle_flag,R30
                 ; 0000 054D    program_cycle_counter=0;
000c11 e0e0      	LDI  R30,LOW(0)
                 _0x125:
000c12 93e0 055b 	STS  _program_cycle_counter,R30
                 ; 0000 054E   }
                 ; 0000 054F }
000c14 940e 0e85 	CALL __LOADLOCR4
000c16 9624      	ADIW R28,4
000c17 91e9      	LD   R30,Y+
000c18 bfef      	OUT  SREG,R30
000c19 91f9      	LD   R31,Y+
000c1a 91e9      	LD   R30,Y+
000c1b 91b9      	LD   R27,Y+
000c1c 91a9      	LD   R26,Y+
000c1d 9199      	LD   R25,Y+
000c1e 9189      	LD   R24,Y+
000c1f 9179      	LD   R23,Y+
000c20 9169      	LD   R22,Y+
000c21 90f9      	LD   R15,Y+
000c22 9019      	LD   R1,Y+
000c23 9009      	LD   R0,Y+
000c24 9518      	RETI
                 ; .FEND
                 ;
                 ;
                 ;//eeprom unsigned char EEP_CALIBR_MAS[10];
                 ;//eeprom unsigned char EEP_SETUP_MAS[8];
                 ;
                 ;//unsigned char CALIBR_MAS[10]={249,66,94,7,9,7,2,8,24,(66+94+7+9+7+2+8+24)/8};
                 ;//unsigned char SETUP_MAS[8]={248,198,130,10,1,0,0,(198+130+10+1)/6};
                 ;void load_from_eeprom(void)
                 ; 0000 0558 {
                 _load_from_eeprom:
                 ; .FSTART _load_from_eeprom
                 ; 0000 0559  unsigned char tmp;
                 ; 0000 055A  unsigned int cal_sum=0,setup_sum=0;
                 ; 0000 055B 
                 ; 0000 055C  CALIBR_MAS[0]=EEP_CALIBR_MAS[0];
000c25 940e 0e7c 	CALL __SAVELOCR6
                 ;	tmp -> R17
                 ;	cal_sum -> R18,R19
                 ;	setup_sum -> R20,R21
                +
000c27 e020     +LDI R18 , LOW ( 0 )
000c28 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                +
000c29 e040     +LDI R20 , LOW ( 0 )
000c2a e050     +LDI R21 , HIGH ( 0 )
                 	__GETWRN 20,21,0
000c2b e0a8      	LDI  R26,LOW(_EEP_CALIBR_MAS)
000c2c e0b0      	LDI  R27,HIGH(_EEP_CALIBR_MAS)
000c2d 940e 0e59 	CALL __EEPROMRDB
000c2f 93e0 051e 	STS  _CALIBR_MAS,R30
                 ; 0000 055D  CALIBR_MAS[9]=EEP_CALIBR_MAS[9];
                +
000c31 e1a1     +LDI R26 , LOW ( _EEP_CALIBR_MAS + ( 9 ) )
000c32 e0b0     +LDI R27 , HIGH ( _EEP_CALIBR_MAS + ( 9 ) )
                 	__POINTW2MN _EEP_CALIBR_MAS,9
000c33 940e 0e59 	CALL __EEPROMRDB
                +
000c35 93e0 0527+STS _CALIBR_MAS + ( 9 ) , R30
                 	__PUTB1MN _CALIBR_MAS,9
                 ; 0000 055E   for(tmp=1;tmp<=8;tmp++)
000c37 e011      	LDI  R17,LOW(1)
                 _0xFD:
000c38 3019      	CPI  R17,9
000c39 f4b8      	BRSH _0xFE
                 ; 0000 055F  {
                 ; 0000 0560    CALIBR_MAS[tmp]=EEP_CALIBR_MAS[tmp];
000c3a 2fe1      	MOV  R30,R17
000c3b e0f0      	LDI  R31,0
000c3c 5ee2      	SUBI R30,LOW(-_CALIBR_MAS)
000c3d 4ffa      	SBCI R31,HIGH(-_CALIBR_MAS)
000c3e 010f      	MOVW R0,R30
000c3f 2fa1      	MOV  R26,R17
000c40 e0b0      	LDI  R27,0
000c41 5fa8      	SUBI R26,LOW(-_EEP_CALIBR_MAS)
000c42 4fbf      	SBCI R27,HIGH(-_EEP_CALIBR_MAS)
000c43 940e 0e59 	CALL __EEPROMRDB
000c45 01d0      	MOVW R26,R0
000c46 93ec      	ST   X,R30
                 ; 0000 0561    cal_sum=cal_sum+CALIBR_MAS[tmp];
000c47 2fe1      	MOV  R30,R17
000c48 e0f0      	LDI  R31,0
000c49 5ee2      	SUBI R30,LOW(-_CALIBR_MAS)
000c4a 4ffa      	SBCI R31,HIGH(-_CALIBR_MAS)
000c4b 81e0      	LD   R30,Z
000c4c e0f0      	LDI  R31,0
                +
000c4d 0f2e     +ADD R18 , R30
000c4e 1f3f     +ADC R19 , R31
                 	__ADDWRR 18,19,30,31
                 ; 0000 0562  }
000c4f 5f1f      	SUBI R17,-1
000c50 cfe7      	RJMP _0xFD
                 _0xFE:
                 ; 0000 0563  cal_sum=cal_sum/8;
000c51 01f9      	MOVW R30,R18
000c52 940e 0d89 	CALL __LSRW3
000c54 019f      	MOVW R18,R30
                 ; 0000 0564 
                 ; 0000 0565    if((CALIBR_MAS[0]!=249)||(CALIBR_MAS[9]!=cal_sum))
000c55 91a0 051e 	LDS  R26,_CALIBR_MAS
000c57 3fa9      	CPI  R26,LOW(0xF9)
000c58 f431      	BRNE _0x100
                +
000c59 91a0 0527+LDS R26 , _CALIBR_MAS + ( 9 )
                 	__GETB2MN _CALIBR_MAS,9
000c5b e0b0      	LDI  R27,0
000c5c 17ea      	CP   R30,R26
000c5d 07fb      	CPC  R31,R27
000c5e f079      	BREQ _0xFF
                 _0x100:
                 ; 0000 0566  {
                 ; 0000 0567   for(tmp=0;tmp<=9;tmp++)
000c5f e010      	LDI  R17,LOW(0)
                 _0x103:
000c60 301a      	CPI  R17,10
000c61 f460      	BRSH _0x104
                 ; 0000 0568   {
                 ; 0000 0569    CALIBR_MAS[tmp]=DEFAULT_CALIBR_MAS[tmp];
000c62 2fa1      	MOV  R26,R17
000c63 e0b0      	LDI  R27,0
000c64 5ea2      	SUBI R26,LOW(-_CALIBR_MAS)
000c65 4fba      	SBCI R27,HIGH(-_CALIBR_MAS)
000c66 2fe1      	MOV  R30,R17
000c67 e0f0      	LDI  R31,0
000c68 5de0      	SUBI R30,LOW(-_DEFAULT_CALIBR_MAS)
000c69 4ffa      	SBCI R31,HIGH(-_DEFAULT_CALIBR_MAS)
000c6a 81e0      	LD   R30,Z
000c6b 93ec      	ST   X,R30
                 ; 0000 056A   }
000c6c 5f1f      	SUBI R17,-1
000c6d cff2      	RJMP _0x103
                 _0x104:
                 ; 0000 056B  }
                 ; 0000 056C 
                 ; 0000 056D  SETUP_MAS[0]=EEP_SETUP_MAS[0];
                 _0xFF:
000c6e e0a0      	LDI  R26,LOW(_EEP_SETUP_MAS)
000c6f e0b0      	LDI  R27,HIGH(_EEP_SETUP_MAS)
000c70 940e 0e59 	CALL __EEPROMRDB
000c72 93e0 0516 	STS  _SETUP_MAS,R30
                 ; 0000 056E  SETUP_MAS[7]=EEP_SETUP_MAS[7];
                +
000c74 e0a7     +LDI R26 , LOW ( _EEP_SETUP_MAS + ( 7 ) )
000c75 e0b0     +LDI R27 , HIGH ( _EEP_SETUP_MAS + ( 7 ) )
                 	__POINTW2MN _EEP_SETUP_MAS,7
000c76 940e 0e59 	CALL __EEPROMRDB
                +
000c78 93e0 051d+STS _SETUP_MAS + ( 7 ) , R30
                 	__PUTB1MN _SETUP_MAS,7
                 ; 0000 056F   for(tmp=1;tmp<=6;tmp++)
000c7a e011      	LDI  R17,LOW(1)
                 _0x106:
000c7b 3017      	CPI  R17,7
000c7c f4b8      	BRSH _0x107
                 ; 0000 0570  {
                 ; 0000 0571   SETUP_MAS[tmp]=EEP_SETUP_MAS[tmp];
000c7d 2fe1      	MOV  R30,R17
000c7e e0f0      	LDI  R31,0
000c7f 5eea      	SUBI R30,LOW(-_SETUP_MAS)
000c80 4ffa      	SBCI R31,HIGH(-_SETUP_MAS)
000c81 010f      	MOVW R0,R30
000c82 2fa1      	MOV  R26,R17
000c83 e0b0      	LDI  R27,0
000c84 50a0      	SUBI R26,LOW(-_EEP_SETUP_MAS)
000c85 40b0      	SBCI R27,HIGH(-_EEP_SETUP_MAS)
000c86 940e 0e59 	CALL __EEPROMRDB
000c88 01d0      	MOVW R26,R0
000c89 93ec      	ST   X,R30
                 ; 0000 0572   setup_sum=setup_sum+SETUP_MAS[tmp];
000c8a 2fe1      	MOV  R30,R17
000c8b e0f0      	LDI  R31,0
000c8c 5eea      	SUBI R30,LOW(-_SETUP_MAS)
000c8d 4ffa      	SBCI R31,HIGH(-_SETUP_MAS)
000c8e 81e0      	LD   R30,Z
000c8f e0f0      	LDI  R31,0
                +
000c90 0f4e     +ADD R20 , R30
000c91 1f5f     +ADC R21 , R31
                 	__ADDWRR 20,21,30,31
                 ; 0000 0573  }
000c92 5f1f      	SUBI R17,-1
000c93 cfe7      	RJMP _0x106
                 _0x107:
                 ; 0000 0574    setup_sum=setup_sum/6;
000c94 01da      	MOVW R26,R20
000c95 e0e6      	LDI  R30,LOW(6)
000c96 e0f0      	LDI  R31,HIGH(6)
000c97 940e 0dcd 	CALL __DIVW21U
000c99 01af      	MOVW R20,R30
                 ; 0000 0575    if((SETUP_MAS[0]!=248)||(SETUP_MAS[7]!=setup_sum))
000c9a 91a0 0516 	LDS  R26,_SETUP_MAS
000c9c 3fa8      	CPI  R26,LOW(0xF8)
000c9d f431      	BRNE _0x109
                +
000c9e 91a0 051d+LDS R26 , _SETUP_MAS + ( 7 )
                 	__GETB2MN _SETUP_MAS,7
000ca0 e0b0      	LDI  R27,0
000ca1 17ea      	CP   R30,R26
000ca2 07fb      	CPC  R31,R27
000ca3 f079      	BREQ _0x108
                 _0x109:
                 ; 0000 0576   {
                 ; 0000 0577     for(tmp=0;tmp<=7;tmp++)
000ca4 e010      	LDI  R17,LOW(0)
                 _0x10C:
000ca5 3018      	CPI  R17,8
000ca6 f460      	BRSH _0x10D
                 ; 0000 0578    {
                 ; 0000 0579     SETUP_MAS[tmp]=DEFAULT_SETUP_MAS[tmp];
000ca7 2fa1      	MOV  R26,R17
000ca8 e0b0      	LDI  R27,0
000ca9 5eaa      	SUBI R26,LOW(-_SETUP_MAS)
000caa 4fba      	SBCI R27,HIGH(-_SETUP_MAS)
000cab 2fe1      	MOV  R30,R17
000cac e0f0      	LDI  R31,0
000cad 5de8      	SUBI R30,LOW(-_DEFAULT_SETUP_MAS)
000cae 4ffa      	SBCI R31,HIGH(-_DEFAULT_SETUP_MAS)
000caf 81e0      	LD   R30,Z
000cb0 93ec      	ST   X,R30
                 ; 0000 057A    }
000cb1 5f1f      	SUBI R17,-1
000cb2 cff2      	RJMP _0x10C
                 _0x10D:
                 ; 0000 057B  }
                 ; 0000 057C }
                 _0x108:
000cb3 940e 0e83 	CALL __LOADLOCR6
000cb5 9626      	ADIW R28,6
000cb6 9508      	RET
                 ; .FEND
                 ;
                 ;void save_to_eeprom(void)
                 ; 0000 057F {
                 _save_to_eeprom:
                 ; .FSTART _save_to_eeprom
                 ; 0000 0580  unsigned char tmp;
                 ; 0000 0581  unsigned int sum;
                 ; 0000 0582 
                 ; 0000 0583   sum=0;
000cb7 940e 0e7e 	CALL __SAVELOCR4
                 ;	tmp -> R17
                 ;	sum -> R18,R19
                +
000cb9 e020     +LDI R18 , LOW ( 0 )
000cba e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 ; 0000 0584   for(tmp=1;tmp<=8;tmp++)
000cbb e011      	LDI  R17,LOW(1)
                 _0x10F:
000cbc 3019      	CPI  R17,9
000cbd f450      	BRSH _0x110
                 ; 0000 0585   {
                 ; 0000 0586    sum=sum+CALIBR_MAS[tmp];
000cbe 2fe1      	MOV  R30,R17
000cbf e0f0      	LDI  R31,0
000cc0 5ee2      	SUBI R30,LOW(-_CALIBR_MAS)
000cc1 4ffa      	SBCI R31,HIGH(-_CALIBR_MAS)
000cc2 81e0      	LD   R30,Z
000cc3 e0f0      	LDI  R31,0
                +
000cc4 0f2e     +ADD R18 , R30
000cc5 1f3f     +ADC R19 , R31
                 	__ADDWRR 18,19,30,31
                 ; 0000 0587   }
000cc6 5f1f      	SUBI R17,-1
000cc7 cff4      	RJMP _0x10F
                 _0x110:
                 ; 0000 0588   sum=sum/8;
000cc8 01f9      	MOVW R30,R18
000cc9 940e 0d89 	CALL __LSRW3
000ccb 019f      	MOVW R18,R30
                 ; 0000 0589 
                 ; 0000 058A   if(sum==CALIBR_MAS[9])
                +
000ccc 91e0 0527+LDS R30 , _CALIBR_MAS + ( 9 )
                 	__GETB1MN _CALIBR_MAS,9
000cce 01d9      	MOVW R26,R18
000ccf e0f0      	LDI  R31,0
000cd0 17ea      	CP   R30,R26
000cd1 07fb      	CPC  R31,R27
000cd2 f481      	BRNE _0x111
                 ; 0000 058B   {
                 ; 0000 058C    for(tmp=0;tmp<=9;tmp++)
000cd3 e010      	LDI  R17,LOW(0)
                 _0x113:
000cd4 301a      	CPI  R17,10
000cd5 f468      	BRSH _0x114
                 ; 0000 058D    {
                 ; 0000 058E     EEP_CALIBR_MAS[tmp]=CALIBR_MAS[tmp];
000cd6 2fa1      	MOV  R26,R17
000cd7 e0b0      	LDI  R27,0
000cd8 5fa8      	SUBI R26,LOW(-_EEP_CALIBR_MAS)
000cd9 4fbf      	SBCI R27,HIGH(-_EEP_CALIBR_MAS)
000cda 2fe1      	MOV  R30,R17
000cdb e0f0      	LDI  R31,0
000cdc 5ee2      	SUBI R30,LOW(-_CALIBR_MAS)
000cdd 4ffa      	SBCI R31,HIGH(-_CALIBR_MAS)
000cde 81e0      	LD   R30,Z
000cdf 940e 0e65 	CALL __EEPROMWRB
                 ; 0000 058F    }
000ce1 5f1f      	SUBI R17,-1
000ce2 cff1      	RJMP _0x113
                 _0x114:
                 ; 0000 0590   }
                 ; 0000 0591 
                 ; 0000 0592   sum=0;
                 _0x111:
                +
000ce3 e020     +LDI R18 , LOW ( 0 )
000ce4 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 ; 0000 0593   for(tmp=1;tmp<=6;tmp++)
000ce5 e011      	LDI  R17,LOW(1)
                 _0x116:
000ce6 3017      	CPI  R17,7
000ce7 f450      	BRSH _0x117
                 ; 0000 0594   {
                 ; 0000 0595    sum=sum+SETUP_MAS[tmp];
000ce8 2fe1      	MOV  R30,R17
000ce9 e0f0      	LDI  R31,0
000cea 5eea      	SUBI R30,LOW(-_SETUP_MAS)
000ceb 4ffa      	SBCI R31,HIGH(-_SETUP_MAS)
000cec 81e0      	LD   R30,Z
000ced e0f0      	LDI  R31,0
                +
000cee 0f2e     +ADD R18 , R30
000cef 1f3f     +ADC R19 , R31
                 	__ADDWRR 18,19,30,31
                 ; 0000 0596   }
000cf0 5f1f      	SUBI R17,-1
000cf1 cff4      	RJMP _0x116
                 _0x117:
                 ; 0000 0597   sum=sum/6;
000cf2 01d9      	MOVW R26,R18
000cf3 e0e6      	LDI  R30,LOW(6)
000cf4 e0f0      	LDI  R31,HIGH(6)
000cf5 940e 0dcd 	CALL __DIVW21U
000cf7 019f      	MOVW R18,R30
                 ; 0000 0598   if(sum==SETUP_MAS[7])
                +
000cf8 91e0 051d+LDS R30 , _SETUP_MAS + ( 7 )
                 	__GETB1MN _SETUP_MAS,7
000cfa 01d9      	MOVW R26,R18
000cfb e0f0      	LDI  R31,0
000cfc 17ea      	CP   R30,R26
000cfd 07fb      	CPC  R31,R27
000cfe f481      	BRNE _0x118
                 ; 0000 0599   {
                 ; 0000 059A    for(tmp=0;tmp<=7;tmp++)
000cff e010      	LDI  R17,LOW(0)
                 _0x11A:
000d00 3018      	CPI  R17,8
000d01 f468      	BRSH _0x11B
                 ; 0000 059B    {
                 ; 0000 059C     EEP_SETUP_MAS[tmp]=SETUP_MAS[tmp];
000d02 2fa1      	MOV  R26,R17
000d03 e0b0      	LDI  R27,0
000d04 50a0      	SUBI R26,LOW(-_EEP_SETUP_MAS)
000d05 40b0      	SBCI R27,HIGH(-_EEP_SETUP_MAS)
000d06 2fe1      	MOV  R30,R17
000d07 e0f0      	LDI  R31,0
000d08 5eea      	SUBI R30,LOW(-_SETUP_MAS)
000d09 4ffa      	SBCI R31,HIGH(-_SETUP_MAS)
000d0a 81e0      	LD   R30,Z
000d0b 940e 0e65 	CALL __EEPROMWRB
                 ; 0000 059D    }
000d0d 5f1f      	SUBI R17,-1
000d0e cff1      	RJMP _0x11A
                 _0x11B:
                 ; 0000 059E   }
                 ; 0000 059F 
                 ; 0000 05A0 }
                 _0x118:
                 _0x2060002:
000d0f 940e 0e85 	CALL __LOADLOCR4
                 _0x2060001:
000d11 9624      	ADIW R28,4
000d12 9508      	RET
                 ; .FEND
                 ;
                 ;
                 ;//unsigned int K_BY_KOEFFICIENTS_OLD(unsigned int M)
                 ;//{
                 ;//unsigned long F,W,K;
                 ;////WEIGHT_NULL=6679, LOADCELL_NULL=618, DELTA_WEIGHT10KG=748, DELTA_LOADCELL10KG=772
                 ;//if(M<LOADCELL_NULL)
                 ;// return 0;
                 ;//
                 ;//F=((M-(unsigned long)LOADCELL_NULL)*1000)/((unsigned long)DELTA_LOADCELL10KG);
                 ;//W=(unsigned long)WEIGHT_NULL-((unsigned long)DELTA_WEIGHT10KG*F)/1000;
                 ;//if(W>0)
                 ;// K=(F*1000)/W;
                 ;//else
                 ;// K=3000;
                 ;//
                 ;//if(K>3000)
                 ;// K=3000;
                 ;//return K;
                 ;//}
                 ;
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.ESEG
                 _EEP_SETUP_MAS:
000000           	.BYTE 0x8
                 _EEP_CALIBR_MAS:
000008           	.BYTE 0xA
                 
                 	.DSEG
                 _R_TK:
000512           	.BYTE 0x2
                 _ZADANIE_S:
000514           	.BYTE 0x2
                 _SETUP_MAS:
000516           	.BYTE 0x8
                 _CALIBR_MAS:
00051e           	.BYTE 0xA
                 _DEFAULT_SETUP_MAS:
000528           	.BYTE 0x8
                 _DEFAULT_CALIBR_MAS:
000530           	.BYTE 0xA
                 _flag_transmission:
00053a           	.BYTE 0x2
                 _flag_receive:
00053c           	.BYTE 0x2
                 _receive_counter:
00053e           	.BYTE 0x2
                 _SEND_MAS:
000540           	.BYTE 0x1A
                 _program_cycle_flag:
00055a           	.BYTE 0x1
                 _program_cycle_counter:
00055b           	.BYTE 0x1
                 _ovf_IK:
00055c           	.BYTE 0x1
                 _ovf_TK:
00055d           	.BYTE 0x1
                 _IK_COUNT:
00055e           	.BYTE 0x8
                 _TK_COUNT:
000566           	.BYTE 0x8
                 _IK_DELTA:
00056e           	.BYTE 0x4
                 _TK_DELTA:
000572           	.BYTE 0x4
                 _IK_SPEED_KM_H:
000576           	.BYTE 0x2
                 _TK_SPEED_KM_H:
000578           	.BYTE 0x2
                 _IK_SPEED_MAS:
00057a           	.BYTE 0x6
                 _TK_SPEED_MAS:
000580           	.BYTE 0x6
                 _ADC_BAT:
000586           	.BYTE 0x2
                 _ADC_I:
000588           	.BYTE 0x2
                 _BAT_SUM:
00058a           	.BYTE 0x2
                 _I_NULL:
00058c           	.BYTE 0x4
                 _flag_I_NULL:
000590           	.BYTE 0x1
                 _GPS_zap_counter:
000591           	.BYTE 0x1
                 _GPS_sim_counter:
000592           	.BYTE 0x1
                 _GPS_flag_ready:
000593           	.BYTE 0x1
                 _GPS_string_name:
000594           	.BYTE 0x3
                 _GPS_flag_gp:
000597           	.BYTE 0x1
                 _GPS_shir:
000598           	.BYTE 0x8
                 _GPS_dolg:
0005a0           	.BYTE 0x8
                 _GPS_solve:
0005a8           	.BYTE 0x1
                 _GPS_ON_COUNTER:
0005a9           	.BYTE 0x1
                 _flag_start:
0005aa           	.BYTE 0x1
                 _measuring_start_counter:
0005ab           	.BYTE 0x1
                 _load_cell:
0005ac           	.BYTE 0x2
                 _load_cell_MAS:
0005ae           	.BYTE 0x28
                 _ADC_fault_counter:
0005d6           	.BYTE 0x1
                 _PID_I_S:
0005d7           	.BYTE 0x2
                 
                 	.CSEG
                 
                 	.CSEG
                 	.equ __sda_bit=1
                 	.equ __scl_bit=0
                 	.equ __i2c_port=0x12 ;PORTD
                 	.equ __i2c_dir=__i2c_port-1
                 	.equ __i2c_pin=__i2c_port-2
                 
                 _i2c_init:
000d13 9890      	cbi  __i2c_port,__scl_bit
000d14 9891      	cbi  __i2c_port,__sda_bit
000d15 9a88      	sbi  __i2c_dir,__scl_bit
000d16 9889      	cbi  __i2c_dir,__sda_bit
000d17 c015      	rjmp __i2c_delay2
                 _i2c_start:
000d18 9889      	cbi  __i2c_dir,__sda_bit
000d19 9888      	cbi  __i2c_dir,__scl_bit
000d1a 27ee      	clr  r30
000d1b 0000      	nop
000d1c 9b81      	sbis __i2c_pin,__sda_bit
000d1d 9508      	ret
000d1e 9b80      	sbis __i2c_pin,__scl_bit
000d1f 9508      	ret
000d20 d004      	rcall __i2c_delay1
000d21 9a89      	sbi  __i2c_dir,__sda_bit
000d22 d002      	rcall __i2c_delay1
000d23 9a88      	sbi  __i2c_dir,__scl_bit
000d24 e0e1      	ldi  r30,1
                 __i2c_delay1:
000d25 e162      	ldi  r22,18
000d26 c007      	rjmp __i2c_delay2l
                 _i2c_stop:
000d27 9a89      	sbi  __i2c_dir,__sda_bit
000d28 9a88      	sbi  __i2c_dir,__scl_bit
000d29 d003      	rcall __i2c_delay2
000d2a 9888      	cbi  __i2c_dir,__scl_bit
000d2b dff9      	rcall __i2c_delay1
000d2c 9889      	cbi  __i2c_dir,__sda_bit
                 __i2c_delay2:
000d2d e265      	ldi  r22,37
                 __i2c_delay2l:
000d2e 956a      	dec  r22
000d2f f7f1      	brne __i2c_delay2l
000d30 9508      	ret
                 _i2c_read:
000d31 e078      	ldi  r23,8
                 __i2c_read0:
000d32 9888      	cbi  __i2c_dir,__scl_bit
000d33 dff1      	rcall __i2c_delay1
                 __i2c_read3:
000d34 9b80      	sbis __i2c_pin,__scl_bit
000d35 cffe      	rjmp __i2c_read3
000d36 dfee      	rcall __i2c_delay1
000d37 9488      	clc
000d38 9981      	sbic __i2c_pin,__sda_bit
000d39 9408      	sec
000d3a 9a88      	sbi  __i2c_dir,__scl_bit
000d3b dff1      	rcall __i2c_delay2
000d3c 1fee      	rol  r30
000d3d 957a      	dec  r23
000d3e f799      	brne __i2c_read0
000d3f 2f7a      	mov  r23,r26
000d40 2377      	tst  r23
000d41 f411      	brne __i2c_read1
000d42 9889      	cbi  __i2c_dir,__sda_bit
000d43 c001      	rjmp __i2c_read2
                 __i2c_read1:
000d44 9a89      	sbi  __i2c_dir,__sda_bit
                 __i2c_read2:
000d45 dfdf      	rcall __i2c_delay1
000d46 9888      	cbi  __i2c_dir,__scl_bit
000d47 dfe5      	rcall __i2c_delay2
000d48 9a88      	sbi  __i2c_dir,__scl_bit
000d49 dfdb      	rcall __i2c_delay1
000d4a 9889      	cbi  __i2c_dir,__sda_bit
000d4b cfd9      	rjmp __i2c_delay1
                 
                 _i2c_write:
000d4c e078      	ldi  r23,8
                 __i2c_write0:
000d4d 0faa      	lsl  r26
000d4e f410      	brcc __i2c_write1
000d4f 9889      	cbi  __i2c_dir,__sda_bit
000d50 c001      	rjmp __i2c_write2
                 __i2c_write1:
000d51 9a89      	sbi  __i2c_dir,__sda_bit
                 __i2c_write2:
000d52 dfda      	rcall __i2c_delay2
000d53 9888      	cbi  __i2c_dir,__scl_bit
000d54 dfd0      	rcall __i2c_delay1
                 __i2c_write3:
000d55 9b80      	sbis __i2c_pin,__scl_bit
000d56 cffe      	rjmp __i2c_write3
000d57 dfcd      	rcall __i2c_delay1
000d58 9a88      	sbi  __i2c_dir,__scl_bit
000d59 957a      	dec  r23
000d5a f791      	brne __i2c_write0
000d5b 9889      	cbi  __i2c_dir,__sda_bit
000d5c dfc8      	rcall __i2c_delay1
000d5d 9888      	cbi  __i2c_dir,__scl_bit
000d5e dfce      	rcall __i2c_delay2
000d5f e0e1      	ldi  r30,1
000d60 9981      	sbic __i2c_pin,__sda_bit
000d61 27ee      	clr  r30
000d62 9a88      	sbi  __i2c_dir,__scl_bit
000d63 cfc1      	rjmp __i2c_delay1
                 
                 _delay_ms:
000d64 9610      	adiw r26,0
000d65 f039      	breq __delay_ms1
                 __delay_ms0:
                +
000d66 ec8d     +LDI R24 , LOW ( 0xACD )
000d67 e09a     +LDI R25 , HIGH ( 0xACD )
                +__DELAY_USW_LOOP :
000d68 9701     +SBIW R24 , 1
000d69 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xACD
000d6a 95a8      	wdr
000d6b 9711      	sbiw r26,1
000d6c f7c9      	brne __delay_ms0
                 __delay_ms1:
000d6d 9508      	ret
                 
                 __ADDD12:
000d6e 0fea      	ADD  R30,R26
000d6f 1ffb      	ADC  R31,R27
000d70 1f68      	ADC  R22,R24
000d71 1f79      	ADC  R23,R25
000d72 9508      	RET
                 
                 __SUBD12:
000d73 1bea      	SUB  R30,R26
000d74 0bfb      	SBC  R31,R27
000d75 0b68      	SBC  R22,R24
000d76 0b79      	SBC  R23,R25
000d77 9508      	RET
                 
                 __SUBD21:
000d78 1bae      	SUB  R26,R30
000d79 0bbf      	SBC  R27,R31
000d7a 0b86      	SBC  R24,R22
000d7b 0b97      	SBC  R25,R23
000d7c 9508      	RET
                 
                 __ANEGW1:
000d7d 95f1      	NEG  R31
000d7e 95e1      	NEG  R30
000d7f 40f0      	SBCI R31,0
000d80 9508      	RET
                 
                 __ANEGD1:
000d81 95f0      	COM  R31
000d82 9560      	COM  R22
000d83 9570      	COM  R23
000d84 95e1      	NEG  R30
000d85 4fff      	SBCI R31,-1
000d86 4f6f      	SBCI R22,-1
000d87 4f7f      	SBCI R23,-1
000d88 9508      	RET
                 
                 __LSRW3:
000d89 95f6      	LSR  R31
000d8a 95e7      	ROR  R30
                 __LSRW2:
000d8b 95f6      	LSR  R31
000d8c 95e7      	ROR  R30
000d8d 95f6      	LSR  R31
000d8e 95e7      	ROR  R30
000d8f 9508      	RET
                 
                 __CWD1:
000d90 2f6f      	MOV  R22,R31
000d91 0f66      	ADD  R22,R22
000d92 0b66      	SBC  R22,R22
000d93 2f76      	MOV  R23,R22
000d94 9508      	RET
                 
                 __MULW12U:
000d95 9ffa      	MUL  R31,R26
000d96 2df0      	MOV  R31,R0
000d97 9feb      	MUL  R30,R27
000d98 0df0      	ADD  R31,R0
000d99 9fea      	MUL  R30,R26
000d9a 2de0      	MOV  R30,R0
000d9b 0df1      	ADD  R31,R1
000d9c 9508      	RET
                 
                 __MULD12U:
000d9d 9f7a      	MUL  R23,R26
000d9e 2d70      	MOV  R23,R0
000d9f 9f6b      	MUL  R22,R27
000da0 0d70      	ADD  R23,R0
000da1 9ff8      	MUL  R31,R24
000da2 0d70      	ADD  R23,R0
000da3 9fe9      	MUL  R30,R25
000da4 0d70      	ADD  R23,R0
000da5 9f6a      	MUL  R22,R26
000da6 2d60      	MOV  R22,R0
000da7 0d71      	ADD  R23,R1
000da8 9ffb      	MUL  R31,R27
000da9 0d60      	ADD  R22,R0
000daa 1d71      	ADC  R23,R1
000dab 9fe8      	MUL  R30,R24
000dac 0d60      	ADD  R22,R0
000dad 1d71      	ADC  R23,R1
000dae 2788      	CLR  R24
000daf 9ffa      	MUL  R31,R26
000db0 2df0      	MOV  R31,R0
000db1 0d61      	ADD  R22,R1
000db2 1f78      	ADC  R23,R24
000db3 9feb      	MUL  R30,R27
000db4 0df0      	ADD  R31,R0
000db5 1d61      	ADC  R22,R1
000db6 1f78      	ADC  R23,R24
000db7 9fea      	MUL  R30,R26
000db8 2de0      	MOV  R30,R0
000db9 0df1      	ADD  R31,R1
000dba 1f68      	ADC  R22,R24
000dbb 1f78      	ADC  R23,R24
000dbc 9508      	RET
                 
                 __MULB1W2U:
000dbd 2f6e      	MOV  R22,R30
000dbe 9f6a      	MUL  R22,R26
000dbf 01f0      	MOVW R30,R0
000dc0 9f6b      	MUL  R22,R27
000dc1 0df0      	ADD  R31,R0
000dc2 9508      	RET
                 
                 __MULW12:
000dc3 d05c      	RCALL __CHKSIGNW
000dc4 dfd0      	RCALL __MULW12U
000dc5 f40e      	BRTC __MULW121
000dc6 dfb6      	RCALL __ANEGW1
                 __MULW121:
000dc7 9508      	RET
                 
                 __MULD12:
000dc8 d065      	RCALL __CHKSIGND
000dc9 dfd3      	RCALL __MULD12U
000dca f40e      	BRTC __MULD121
000dcb dfb5      	RCALL __ANEGD1
                 __MULD121:
000dcc 9508      	RET
                 
                 __DIVW21U:
000dcd 2400      	CLR  R0
000dce 2411      	CLR  R1
000dcf e190      	LDI  R25,16
                 __DIVW21U1:
000dd0 0faa      	LSL  R26
000dd1 1fbb      	ROL  R27
000dd2 1c00      	ROL  R0
000dd3 1c11      	ROL  R1
000dd4 1a0e      	SUB  R0,R30
000dd5 0a1f      	SBC  R1,R31
000dd6 f418      	BRCC __DIVW21U2
000dd7 0e0e      	ADD  R0,R30
000dd8 1e1f      	ADC  R1,R31
000dd9 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
000dda 60a1      	SBR  R26,1
                 __DIVW21U3:
000ddb 959a      	DEC  R25
000ddc f799      	BRNE __DIVW21U1
000ddd 01fd      	MOVW R30,R26
000dde 01d0      	MOVW R26,R0
000ddf 9508      	RET
                 
                 __DIVW21:
000de0 d03f      	RCALL __CHKSIGNW
000de1 dfeb      	RCALL __DIVW21U
000de2 f40e      	BRTC __DIVW211
000de3 df99      	RCALL __ANEGW1
                 __DIVW211:
000de4 9508      	RET
                 
                 __DIVD21U:
000de5 933f      	PUSH R19
000de6 934f      	PUSH R20
000de7 935f      	PUSH R21
000de8 2400      	CLR  R0
000de9 2411      	CLR  R1
000dea 2744      	CLR  R20
000deb 2755      	CLR  R21
000dec e230      	LDI  R19,32
                 __DIVD21U1:
000ded 0faa      	LSL  R26
000dee 1fbb      	ROL  R27
000def 1f88      	ROL  R24
000df0 1f99      	ROL  R25
000df1 1c00      	ROL  R0
000df2 1c11      	ROL  R1
000df3 1f44      	ROL  R20
000df4 1f55      	ROL  R21
000df5 1a0e      	SUB  R0,R30
000df6 0a1f      	SBC  R1,R31
000df7 0b46      	SBC  R20,R22
000df8 0b57      	SBC  R21,R23
000df9 f428      	BRCC __DIVD21U2
000dfa 0e0e      	ADD  R0,R30
000dfb 1e1f      	ADC  R1,R31
000dfc 1f46      	ADC  R20,R22
000dfd 1f57      	ADC  R21,R23
000dfe c001      	RJMP __DIVD21U3
                 __DIVD21U2:
000dff 60a1      	SBR  R26,1
                 __DIVD21U3:
000e00 953a      	DEC  R19
000e01 f759      	BRNE __DIVD21U1
000e02 01fd      	MOVW R30,R26
000e03 01bc      	MOVW R22,R24
000e04 01d0      	MOVW R26,R0
000e05 01ca      	MOVW R24,R20
000e06 915f      	POP  R21
000e07 914f      	POP  R20
000e08 913f      	POP  R19
000e09 9508      	RET
                 
                 __DIVD21:
000e0a d023      	RCALL __CHKSIGND
000e0b dfd9      	RCALL __DIVD21U
000e0c f40e      	BRTC __DIVD211
000e0d df73      	RCALL __ANEGD1
                 __DIVD211:
000e0e 9508      	RET
                 
                 __MODW21U:
000e0f dfbd      	RCALL __DIVW21U
000e10 01fd      	MOVW R30,R26
000e11 9508      	RET
                 
                 __MODW21:
000e12 94e8      	CLT
000e13 ffb7      	SBRS R27,7
000e14 c004      	RJMP __MODW211
000e15 95a0      	COM  R26
000e16 95b0      	COM  R27
000e17 9611      	ADIW R26,1
000e18 9468      	SET
                 __MODW211:
000e19 fdf7      	SBRC R31,7
000e1a df62      	RCALL __ANEGW1
000e1b dfb1      	RCALL __DIVW21U
000e1c 01fd      	MOVW R30,R26
000e1d f40e      	BRTC __MODW212
000e1e df5e      	RCALL __ANEGW1
                 __MODW212:
000e1f 9508      	RET
                 
                 __CHKSIGNW:
000e20 94e8      	CLT
000e21 fff7      	SBRS R31,7
000e22 c002      	RJMP __CHKSW1
000e23 df59      	RCALL __ANEGW1
000e24 9468      	SET
                 __CHKSW1:
000e25 ffb7      	SBRS R27,7
000e26 c006      	RJMP __CHKSW2
000e27 95a0      	COM  R26
000e28 95b0      	COM  R27
000e29 9611      	ADIW R26,1
000e2a f800      	BLD  R0,0
000e2b 9403      	INC  R0
000e2c fa00      	BST  R0,0
                 __CHKSW2:
000e2d 9508      	RET
                 
                 __CHKSIGND:
000e2e 94e8      	CLT
000e2f ff77      	SBRS R23,7
000e30 c002      	RJMP __CHKSD1
000e31 df4f      	RCALL __ANEGD1
000e32 9468      	SET
                 __CHKSD1:
000e33 ff97      	SBRS R25,7
000e34 c00b      	RJMP __CHKSD2
000e35 2400      	CLR  R0
000e36 95a0      	COM  R26
000e37 95b0      	COM  R27
000e38 9580      	COM  R24
000e39 9590      	COM  R25
000e3a 9611      	ADIW R26,1
000e3b 1d80      	ADC  R24,R0
000e3c 1d90      	ADC  R25,R0
000e3d f800      	BLD  R0,0
000e3e 9403      	INC  R0
000e3f fa00      	BST  R0,0
                 __CHKSD2:
000e40 9508      	RET
                 
                 __GETW1P:
000e41 91ed      	LD   R30,X+
000e42 91fc      	LD   R31,X
000e43 9711      	SBIW R26,1
000e44 9508      	RET
                 
                 __GETD1S0:
000e45 81e8      	LD   R30,Y
000e46 81f9      	LDD  R31,Y+1
000e47 816a      	LDD  R22,Y+2
000e48 817b      	LDD  R23,Y+3
000e49 9508      	RET
                 
                 __GETD2S0:
000e4a 81a8      	LD   R26,Y
000e4b 81b9      	LDD  R27,Y+1
000e4c 818a      	LDD  R24,Y+2
000e4d 819b      	LDD  R25,Y+3
000e4e 9508      	RET
                 
                 __PUTD1S0:
000e4f 83e8      	ST   Y,R30
000e50 83f9      	STD  Y+1,R31
000e51 836a      	STD  Y+2,R22
000e52 837b      	STD  Y+3,R23
000e53 9508      	RET
                 
                 __PUTDZ20:
000e54 83a0      	ST   Z,R26
000e55 83b1      	STD  Z+1,R27
000e56 8382      	STD  Z+2,R24
000e57 8393      	STD  Z+3,R25
000e58 9508      	RET
                 
                 __EEPROMRDB:
000e59 99e1      	SBIC EECR,EEWE
000e5a cffe      	RJMP __EEPROMRDB
000e5b 93ff      	PUSH R31
000e5c b7ff      	IN   R31,SREG
000e5d 94f8      	CLI
000e5e bbae      	OUT  EEARL,R26
000e5f bbbf      	OUT  EEARH,R27
000e60 9ae0      	SBI  EECR,EERE
000e61 b3ed      	IN   R30,EEDR
000e62 bfff      	OUT  SREG,R31
000e63 91ff      	POP  R31
000e64 9508      	RET
                 
                 __EEPROMWRB:
000e65 9be1      	SBIS EECR,EEWE
000e66 c002      	RJMP __EEPROMWRB1
000e67 95a8      	WDR
000e68 cffc      	RJMP __EEPROMWRB
                 __EEPROMWRB1:
000e69 b79f      	IN   R25,SREG
000e6a 94f8      	CLI
000e6b bbae      	OUT  EEARL,R26
000e6c bbbf      	OUT  EEARH,R27
000e6d 9ae0      	SBI  EECR,EERE
000e6e b38d      	IN   R24,EEDR
000e6f 17e8      	CP   R30,R24
000e70 f019      	BREQ __EEPROMWRB0
000e71 bbed      	OUT  EEDR,R30
000e72 9ae2      	SBI  EECR,EEMWE
000e73 9ae1      	SBI  EECR,EEWE
                 __EEPROMWRB0:
000e74 bf9f      	OUT  SREG,R25
000e75 9508      	RET
                 
                 __CPD02:
000e76 2400      	CLR  R0
000e77 160a      	CP   R0,R26
000e78 060b      	CPC  R0,R27
000e79 0608      	CPC  R0,R24
000e7a 0609      	CPC  R0,R25
000e7b 9508      	RET
                 
                 __SAVELOCR6:
000e7c 935a      	ST   -Y,R21
                 __SAVELOCR5:
000e7d 934a      	ST   -Y,R20
                 __SAVELOCR4:
000e7e 933a      	ST   -Y,R19
                 __SAVELOCR3:
000e7f 932a      	ST   -Y,R18
                 __SAVELOCR2:
000e80 931a      	ST   -Y,R17
000e81 930a      	ST   -Y,R16
000e82 9508      	RET
                 
                 __LOADLOCR6:
000e83 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
000e84 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
000e85 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000e86 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000e87 8119      	LDD  R17,Y+1
000e88 8108      	LD   R16,Y
000e89 9508      	RET
                 
                 __INITLOCB:
                 __INITLOCW:
000e8a 0fac      	ADD  R26,R28
000e8b 1fbd      	ADC  R27,R29
                 __INITLOC0:
000e8c 9005      	LPM  R0,Z+
000e8d 920d      	ST   X+,R0
000e8e 958a      	DEC  R24
000e8f f7e1      	BRNE __INITLOC0
000e90 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega128A register use summary:
r0 :  67 r1 :  25 r2 :   0 r3 :   0 r4 :   3 r5 :   0 r6 :   4 r7 :   1 
r8 :   2 r9 :   0 r10:   3 r11:   0 r12:   2 r13:   1 r14:   0 r15:   4 
r16:  31 r17: 149 r18:  27 r19:  31 r20:  18 r21:  14 r22: 108 r23:  91 
r24:  91 r25:  64 r26: 454 r27: 236 r28:  15 r29:   2 r30: 848 r31: 381 
x  :  23 y  : 393 z  :  27 
Registers used: 29 out of 35 (82.9%)

ATmega128A instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  44 add   :  44 
adiw  :  13 and   :   3 andi  :   1 asr   :   0 bclr  :   0 bld   :   2 
brbc  :   0 brbs  :   0 brcc  :   3 brcs  :   0 break :   0 breq  :  14 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  24 
brlt  :   5 brmi  :   0 brne  :  69 brpl  :   5 brsh  :  29 brtc  :   5 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   2 call  : 143 
cbi   :  22 cbr   :   0 clc   :   1 clh   :   0 cli   :   4 cln   :   0 
clr   :  43 cls   :   0 clt   :   3 clv   :   0 clz   :   0 com   :  11 
cp    :  15 cpc   :  67 cpi   : 102 cpse  :   0 dec   :   8 des   :   0 
elpm  :   0 eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 
ijmp  :   0 in    :  19 inc   :   2 jmp   :  36 ld    :  84 ldd   : 142 
ldi   : 551 lds   : 250 lpm   :   8 lsl   :   8 lsr   :   6 mov   :  68 
movw  :  87 mul   :  19 muls  :   3 mulsu :   0 neg   :   3 nop   :   9 
or    :   0 ori   :   2 out   :  56 pop   :   8 push  :   8 rcall :  75 
ret   :  50 reti  :   5 rjmp  : 131 rol   :  15 ror   :   3 sbc   :  15 
sbci  :  33 sbi   :  25 sbic  :   3 sbis  :   9 sbiw  :  38 sbr   :   2 
sbrc  :   1 sbrs  :   5 sec   :   1 seh   :   0 sei   :   2 sen   :   0 
ser   :   0 ses   :   0 set   :   3 sev   :   0 sez   :   0 sleep :   0 
spm   :   0 st    : 132 std   :  77 sts   : 227 sub   :  11 subi  :  52 
swap  :   0 tst   :   6 wdr   :   2 
Instructions used: 71 out of 117 (60.7%)

ATmega128A memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x001d22   7260    198   7458  131072   5.7%
[.dseg] 0x000100 0x0005d9      0    217    217    4096   5.3%
[.eseg] 0x000000 0x000012      0     18     18    4096   0.4%

Assembly complete, 0 errors, 14 warnings
