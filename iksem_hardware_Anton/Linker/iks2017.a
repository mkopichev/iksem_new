;/*****************************************************
;Chip type               : ATmega128A
;Program type            : Application
;AVR Core Clock frequency: 11,059200 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 1024
;*****************************************************/
;
;#include <mega128a.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x1C
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x18
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x14
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x1C
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x08
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;// I2C Bus functions
;#include <i2c.h>
;// Standard Input/Output functions
;#include <stdio.h>
;
;
;#define DDR_SPI DDRB
;#define PORT_SPI PORTB
;#define SS 0
;
;#define ADC_VREF_TYPE 0xC0
;#ifndef UDRE
;#define UDRE 5
;#endif
;#define DATA_REGISTER_EMPTY (1<<UDRE)
;
;#define AD7799_DDRDY PINB.3
;/*
;//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!CALIBR_MAIN_DATA N01
;#define N_string "AT+NAMEIKSEM#01\r\n"
;
;unsigned long WEIGHT_NULL=6929, LOADCELL_NULL=862, DELTA_WEIGHT10KG=704, DELTA_LOADCELL10KG=863;
;unsigned int R_IK=198, R_TK=333, ZADANIE_S=10;
;
;//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!CALIBR_MAIN_DATA N01
;*/
;
;//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!CALIBR_MAIN_DATA N02
;#define N_string "AT+NAMEIKSEM#02\r\n"
;
;unsigned int WEIGHT_NULL=6694, LOADCELL_NULL=709, DELTA_WEIGHT10KG=702, DELTA_LOADCELL10KG=824;
;unsigned int R_IK=198, R_TK=333 , ZADANIE_S=10;

	.DSEG
;
;//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!CALIBR_MAIN_DATA N02
;
;/*
;//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!CALIBR_MAIN_DATA N03
;#define N_string "AT+NAMEIKSEM#03\r\n"
;unsigned long WEIGHT_NULL=6885, LOADCELL_NULL=578, DELTA_WEIGHT10KG=751, DELTA_LOADCELL10KG=786;
;unsigned int R_IK=198, R_TK=333, ZADANIE_S=10;
;//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!CALIBR_MAIN_DATA N03
;*/
;unsigned flag_transmission=255;
;unsigned flag_receive=0,receive_counter=0;
;
;unsigned char SEND_MAS[26]={255,5,55,4,49,6,21,7,50,5,80,75,0,3598/60,3598%60,31,22,1819/60,1819%60,55,24,'N','E',50,0,35};
;
;unsigned char CALIBR_MAS[10]={249,66,94,7,9,7,2,8,24,(66+94+7+9+7+2+8+24)/8};
;//unsigned int CALIBR_MAS_RESULT[16]={6017,5270,4400,3680,6000,5150,4390,3643,1370,211,2700,3480,1445,2075,2820,3550};
;//unsigned int CALIBR_MAS_RESULT[16]={W_up_10,,,W_up_40,W_down_10,,,W_down_40,M_up_10,,,,,,,M_down_40};// ALL in kg*100
;
;unsigned char SETUP_MAS[8]={248,198,130,10,1,0,0,(198+130+10+1)/6};
;//eeprom unsigned char EEP_CALIBR_MAS[10];
;//eeprom unsigned char EEP_SETUP_MAS[8];
;
;unsigned char program_cycle_flag=0,program_cycle_counter=0;
;
;unsigned char ovf_IK=0, ovf_TK=0;
;unsigned long IK_COUNT[2]={0,0}, TK_COUNT[2]={0,0}, IK_DELTA=0, TK_DELTA=0;
;unsigned int IK_SPEED_KM_H=0,TK_SPEED_KM_H=0;
;
;unsigned int ADC_BAT=0,ADC_I=0;
;long I_NULL=0;
;unsigned char flag_I_NULL=0;
;//  unsigned int A_BAT=0,A_I=0;
;
;unsigned char GPS_zap_counter=0,GPS_sim_counter=0,GPS_flag_ready=0;//1-ustanovlen 0-ne ustanovlen
;unsigned char GPS_string_name[3]={0,0,0},GPS_flag_gp=0;//0-no 1-1 bukva posle P, 2-2ya, 3-3ya, 4-GGA
;unsigned int GPS_shir[4]={1,1,1,1},GPS_dolg[4]={1,1,1,1};//grad min .xxxx  NSWE
;unsigned char GPS_solve=0;
;unsigned char GPS_ON_COUNTER=0;
;unsigned char flag_start=0;
;
;
;int PID_I_S=0;
;int K[2]={10,4};//коэффициенты регуляторов
;
;
;interrupt [EXT_INT7] void ext_int7_isr(void);
;interrupt [EXT_INT6] void ext_int6_isr(void);
;void init_all(void);
;void led_zero(void);
;void led_one(void);
;void lights(char G, char R, char B);
;unsigned int K_BY_KOEFFICIENTS(unsigned int M);
;
;void Read_Setup(void)
; 0000 0063 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0064  ZADANIE_S=SETUP_MAS[3];
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 0065  R_IK=SETUP_MAS[1];
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 0066  R_TK=SETUP_MAS[2]+200;
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 0067 }
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;
;void Control_Sum_Send(void)
; 0000 006A {
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 006B  unsigned char tmp=0;
; 0000 006C  unsigned int S=0;
; 0000 006D 
; 0000 006E  for(tmp=1;tmp<25;tmp++)
;PCODE: $00000020 VOL: 0
;	tmp -> R17
;	S -> R18,R19
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 006F   S=S+SEND_MAS[tmp];
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0000 0070 SEND_MAS[25]=S/24;
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 0071 }
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;
;void Control_Sum_Calibr(void)
; 0000 0074 {
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 0075  unsigned char tmp=0;
; 0000 0076  unsigned int S=0;
; 0000 0077 
; 0000 0078  for(tmp=1;tmp<9;tmp++)
;PCODE: $00000045 VOL: 0
;	tmp -> R17
;	S -> R18,R19
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 0079   S=S+CALIBR_MAS[tmp];
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 007A CALIBR_MAS[9]=S/8;
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0000 007B }
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;
;void Control_Sum_Setup(void)
; 0000 007E {
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0000 007F  unsigned char tmp=0;
; 0000 0080  unsigned int S=0;
; 0000 0081 
; 0000 0082  for(tmp=1;tmp<7;tmp++)
;PCODE: $00000069 VOL: 0
;	tmp -> R17
;	S -> R18,R19
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0000 0083   S=S+SETUP_MAS[tmp];
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
; 0000 0084 SETUP_MAS[7]=S/6;
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0000 0085 }
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;
;
;
;
;
;
;// Timer 1 overflow interrupt service routine
;interrupt [TIM1_OVF] void timer1_ovf_isr(void)
; 0000 008E {
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0000 008F if(ovf_IK<2)
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0000 0090  {
; 0000 0091   ovf_IK++;
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0000 0092  }
; 0000 0093 if(ovf_TK<2)
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
; 0000 0094  {
; 0000 0095   ovf_TK++;
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
; 0000 0096  }
; 0000 0097 }
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;//***********************************************************************************************************
;//***********************************************************************************************************
;//***********************************************************************************************************
;
;
;
;
;void delay(unsigned int d)
; 0000 00A0 {
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0000 00A1  unsigned int y;
; 0000 00A2  for(y=0;y<d;y++)
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;	d -> Y+2
;	y -> R16,R17
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
; 0000 00A3  {}
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
; 0000 00A4 }
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;
;
;
;void SPI_MasterInit(void)
; 0000 00A9 {
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
; 0000 00AA  PORTB.2=1;
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
; 0000 00AB  DDRB.2=1;
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
; 0000 00AC  DDRB.1=1;
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
; 0000 00AD  PORTB.1=0;
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
; 0000 00AE  DDRB.3=0;
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
; 0000 00AF }
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;
;
;unsigned char SPI_MasterReceive(void)
; 0000 00B3 {
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
; 0000 00B4 unsigned char t,x=0;
; 0000 00B5 
; 0000 00B6  for(t=128;t>=1;t=t/2)
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;	t -> R17
;	x -> R16
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
; 0000 00B7  {
; 0000 00B8   PORTB.1=1;
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
; 0000 00B9   delay(50);
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
; 0000 00BA   PORTB.1=0;
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
; 0000 00BB   if(!PINB.3)
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
; 0000 00BC     x=x+t;
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
; 0000 00BD   delay(50);
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
; 0000 00BE  }
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
; 0000 00BF  return x;
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
; 0000 00C0 }
;PCODE: $000000F4 VOL: 0
;
;
;void SPI_MasterTransmit(unsigned char x)
; 0000 00C4 {
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
; 0000 00C5 unsigned char t;
; 0000 00C6 
; 0000 00C7  for(t=128;t>=1;t=t/2)
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;	x -> Y+1
;	t -> R17
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
; 0000 00C8  {
; 0000 00C9  PORTB.1=1;
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
; 0000 00CA  delay(100);
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
; 0000 00CB  if(x&t)
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
; 0000 00CC   PORTB.2=0;
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
; 0000 00CD  else
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
; 0000 00CE   PORTB.2=1;
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
; 0000 00CF  delay(100);
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
; 0000 00D0  PORTB.1=0;
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
; 0000 00D1  delay(100);
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
; 0000 00D2  }
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
; 0000 00D3  PORTB.2=1;
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
; 0000 00D4  delay(150);
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
; 0000 00D5 }
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;
;
;
;void SET_AD7799(void)
; 0000 00DA {
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
; 0000 00DB  delay_ms(100);
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
; 0000 00DC  SPI_MasterTransmit(0b11111111);
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
; 0000 00DD  SPI_MasterTransmit(0b11111111);
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
; 0000 00DE  SPI_MasterTransmit(0b11111111);
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
; 0000 00DF  SPI_MasterTransmit(0b11111111);
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
; 0000 00E0  delay_ms(100);
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
; 0000 00E1  SPI_MasterTransmit(0x10);    //conf
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
; 0000 00E2  delay(10000);
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
; 0000 00E3  SPI_MasterTransmit(0b00010111); // *  128
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
; 0000 00E4  SPI_MasterTransmit(0b00010000);
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
; 0000 00E5  delay(10000);
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
; 0000 00E6 
; 0000 00E7 
; 0000 00E8  SPI_MasterTransmit(0x08);  //mode
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
; 0000 00E9  delay(10000);
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
; 0000 00EA  SPI_MasterTransmit(0b00000000);
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
; 0000 00EB  //SPI_MasterTransmit(0b00001111);
; 0000 00EC 
; 0000 00ED  SPI_MasterTransmit(0b00001100);//10Hz
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
; 0000 00EE  //SPI_MasterTransmit(0b00001000);//20Hz
; 0000 00EF  delay(10000);
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
; 0000 00F0  SPI_MasterTransmit(0x5C);
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
; 0000 00F1  delay(10000);
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
; 0000 00F2 }
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
;
; unsigned int READ_AD7799(void)
; 0000 00F5 {
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
; 0000 00F6  unsigned char a1,a2;
; 0000 00F7  unsigned int M;
; 0000 00F8         delay(100);
;PCODE: $0000015B VOL: 0
;	a1 -> R17
;	a2 -> R16
;	M -> R18,R19
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
; 0000 00F9         a1=SPI_MasterReceive();
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
; 0000 00FA         a2=SPI_MasterReceive();
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
; 0000 00FB         SPI_MasterReceive();
;PCODE: $00000163 VOL: 0
; 0000 00FC         //M=(unsigned long)a1*256*32+(unsigned long)a2*32+(unsigned long)a3/8;
; 0000 00FD         //M=(unsigned long)a1*256+(unsigned long)a2;
; 0000 00FE         M=(unsigned int)a1*256+(unsigned int)a2;
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
; 0000 00FF         return M;
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
; 0000 0100         //return a2;
; 0000 0101 }
;PCODE: $00000171 VOL: 0
;
;
;void uart1SendByte(char data)
; 0000 0105 {
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
; 0000 0106     while(!( UCSR1A & (1 << UDRE)));
;PCODE: $00000174 VOL: 0
;	data -> Y+0
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
; 0000 0107     UDR1 = data;
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
; 0000 0108 }
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
;
;void uart1SendString(char *str)
; 0000 010B {
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
; 0000 010C     while(*str)
;PCODE: $00000182 VOL: 0
;	*str -> Y+0
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
; 0000 010D     {
; 0000 010E         uart1SendByte(*str++);
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
; 0000 010F     }
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
; 0000 0110 }
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
;
;void uart1SendArray(unsigned char *array, unsigned char size)
; 0000 0113 {
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
; 0000 0114    unsigned char i;
; 0000 0115     for(i = 0; i < size; ++i)
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
;	*array -> Y+2
;	size -> Y+1
;	i -> R17
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
; 0000 0116     {
; 0000 0117         uart1SendByte(array[i]);
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
; 0000 0118     }
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
; 0000 0119 }
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
;
;// USART0 Receiver interrupt service routine
;interrupt [USART0_RXC] void usart0_rx_isr(void)
; 0000 011D {
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
; 0000 011E char simvol;
; 0000 011F simvol=UDR0;
;PCODE: $000001AF VOL: 0
;	simvol -> R17
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
; 0000 0120 
; 0000 0121      if(simvol=='P')
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
; 0000 0122    {
; 0000 0123     GPS_flag_gp=1;
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
; 0000 0124     GPS_zap_counter=0;
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
; 0000 0125     goto exit_int;
;PCODE: $000001B9 VOL: 0
; 0000 0126    }
; 0000 0127     if(GPS_flag_gp==1)
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
; 0000 0128    {
; 0000 0129     GPS_string_name[0]=simvol;
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
; 0000 012A     GPS_flag_gp=2;
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
; 0000 012B     goto exit_int;
;PCODE: $000001C2 VOL: 0
; 0000 012C    }
; 0000 012D     if(GPS_flag_gp==2)
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
; 0000 012E    {
; 0000 012F     GPS_string_name[1]=simvol;
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
; 0000 0130     GPS_flag_gp=3;
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
; 0000 0131     goto exit_int;
;PCODE: $000001CC VOL: 0
; 0000 0132    }
; 0000 0133     if(GPS_flag_gp==3)
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
; 0000 0134    {
; 0000 0135     GPS_string_name[2]=simvol;
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
; 0000 0136     if(GPS_string_name[0]=='G'&&GPS_string_name[1]=='G'&&GPS_string_name[2]=='A')
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
;PCODE: $000001E2 VOL: 0
; 0000 0137       {GPS_flag_gp=4;
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
; 0000 0138        GPS_flag_ready=0;
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
; 0000 0139        }
; 0000 013A     else
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
; 0000 013B      GPS_flag_gp=0;
;PCODE: $000001E9 VOL: 0
;PCODE: $000001EA VOL: 0
; 0000 013C     goto exit_int;
;PCODE: $000001EB VOL: 0
;PCODE: $000001EC VOL: 0
; 0000 013D    }
; 0000 013E 
; 0000 013F     if((GPS_flag_gp==4)&&(simvol==','))
;PCODE: $000001ED VOL: 0
;PCODE: $000001EE VOL: 0
;PCODE: $000001EF VOL: 0
;PCODE: $000001F0 VOL: 0
;PCODE: $000001F1 VOL: 0
;PCODE: $000001F2 VOL: 0
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
;PCODE: $000001F7 VOL: 0
; 0000 0140     {
; 0000 0141      GPS_zap_counter++;
;PCODE: $000001F8 VOL: 0
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
; 0000 0142      GPS_sim_counter=0;
;PCODE: $000001FB VOL: 0
;PCODE: $000001FC VOL: 0
; 0000 0143      goto exit_int;
;PCODE: $000001FD VOL: 0
; 0000 0144     }
; 0000 0145 
; 0000 0146 
; 0000 0147    if(GPS_flag_gp==4)
;PCODE: $000001FE VOL: 0
;PCODE: $000001FF VOL: 0
;PCODE: $00000200 VOL: 0
;PCODE: $00000201 VOL: 0
; 0000 0148    {
; 0000 0149 
; 0000 014A     if(GPS_zap_counter==2)//shir
;PCODE: $00000202 VOL: 0
;PCODE: $00000203 VOL: 0
;PCODE: $00000204 VOL: 0
; 0000 014B     {
; 0000 014C      switch(GPS_sim_counter)
;PCODE: $00000205 VOL: 0
;PCODE: $00000206 VOL: 0
; 0000 014D      {
; 0000 014E       case 0:
;PCODE: $00000207 VOL: 0
;PCODE: $00000208 VOL: 0
; 0000 014F        GPS_shir[0]=(simvol-48)*10;
;PCODE: $00000209 VOL: 0
;PCODE: $0000020A VOL: 0
;PCODE: $0000020B VOL: 0
;PCODE: $0000020C VOL: 0
;PCODE: $0000020D VOL: 0
;PCODE: $0000020E VOL: 0
; 0000 0150       break;
;PCODE: $0000020F VOL: 0
; 0000 0151       case 1:
;PCODE: $00000210 VOL: 0
;PCODE: $00000211 VOL: 0
;PCODE: $00000212 VOL: 0
; 0000 0152        GPS_shir[0]=GPS_shir[0]+(simvol-48);
;PCODE: $00000213 VOL: 0
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
;PCODE: $00000216 VOL: 0
;PCODE: $00000217 VOL: 0
;PCODE: $00000218 VOL: 0
; 0000 0153       break;
;PCODE: $00000219 VOL: 0
; 0000 0154       case 2:
;PCODE: $0000021A VOL: 0
;PCODE: $0000021B VOL: 0
;PCODE: $0000021C VOL: 0
; 0000 0155        GPS_shir[1]=(simvol-48)*10;
;PCODE: $0000021D VOL: 0
;PCODE: $0000021E VOL: 0
;PCODE: $0000021F VOL: 0
;PCODE: $00000220 VOL: 0
;PCODE: $00000221 VOL: 0
;PCODE: $00000222 VOL: 0
;PCODE: $00000223 VOL: 0
; 0000 0156       break;
;PCODE: $00000224 VOL: 0
; 0000 0157       case 3:
;PCODE: $00000225 VOL: 0
;PCODE: $00000226 VOL: 0
;PCODE: $00000227 VOL: 0
; 0000 0158        GPS_shir[1]=GPS_shir[1]+(simvol-48);
;PCODE: $00000228 VOL: 0
;PCODE: $00000229 VOL: 0
;PCODE: $0000022A VOL: 0
;PCODE: $0000022B VOL: 0
;PCODE: $0000022C VOL: 0
;PCODE: $0000022D VOL: 0
;PCODE: $0000022E VOL: 0
;PCODE: $0000022F VOL: 0
; 0000 0159       break;
;PCODE: $00000230 VOL: 0
; 0000 015A       case 5:
;PCODE: $00000231 VOL: 0
;PCODE: $00000232 VOL: 0
;PCODE: $00000233 VOL: 0
; 0000 015B        GPS_shir[2]=(simvol-48)*1000;
;PCODE: $00000234 VOL: 0
;PCODE: $00000235 VOL: 0
;PCODE: $00000236 VOL: 0
;PCODE: $00000237 VOL: 0
;PCODE: $00000238 VOL: 0
;PCODE: $00000239 VOL: 0
;PCODE: $0000023A VOL: 0
; 0000 015C       break;
;PCODE: $0000023B VOL: 0
; 0000 015D       case 6:
;PCODE: $0000023C VOL: 0
;PCODE: $0000023D VOL: 0
;PCODE: $0000023E VOL: 0
; 0000 015E        GPS_shir[2]=GPS_shir[2]+(simvol-48)*100;
;PCODE: $0000023F VOL: 0
;PCODE: $00000240 VOL: 0
;PCODE: $00000241 VOL: 0
;PCODE: $00000242 VOL: 0
;PCODE: $00000243 VOL: 0
;PCODE: $00000244 VOL: 0
;PCODE: $00000245 VOL: 0
;PCODE: $00000246 VOL: 0
;PCODE: $00000247 VOL: 0
;PCODE: $00000248 VOL: 0
; 0000 015F       break;
;PCODE: $00000249 VOL: 0
; 0000 0160       case 7:
;PCODE: $0000024A VOL: 0
;PCODE: $0000024B VOL: 0
;PCODE: $0000024C VOL: 0
; 0000 0161        GPS_shir[2]=GPS_shir[2]+(simvol-48)*10;
;PCODE: $0000024D VOL: 0
;PCODE: $0000024E VOL: 0
;PCODE: $0000024F VOL: 0
;PCODE: $00000250 VOL: 0
;PCODE: $00000251 VOL: 0
;PCODE: $00000252 VOL: 0
;PCODE: $00000253 VOL: 0
;PCODE: $00000254 VOL: 0
;PCODE: $00000255 VOL: 0
;PCODE: $00000256 VOL: 0
; 0000 0162       break;
;PCODE: $00000257 VOL: 0
; 0000 0163       case 8:
;PCODE: $00000258 VOL: 0
;PCODE: $00000259 VOL: 0
;PCODE: $0000025A VOL: 0
; 0000 0164        GPS_shir[2]=GPS_shir[2]+(simvol-48);
;PCODE: $0000025B VOL: 0
;PCODE: $0000025C VOL: 0
;PCODE: $0000025D VOL: 0
;PCODE: $0000025E VOL: 0
;PCODE: $0000025F VOL: 0
;PCODE: $00000260 VOL: 0
;PCODE: $00000261 VOL: 0
;PCODE: $00000262 VOL: 0
; 0000 0165      }
;PCODE: $00000263 VOL: 0
; 0000 0166      GPS_sim_counter++;
;PCODE: $00000264 VOL: 0
;PCODE: $00000265 VOL: 0
;PCODE: $00000266 VOL: 0
; 0000 0167 
; 0000 0168      goto exit_int;
;PCODE: $00000267 VOL: 0
; 0000 0169     }
; 0000 016A    if(GPS_zap_counter==3)
;PCODE: $00000268 VOL: 0
;PCODE: $00000269 VOL: 0
;PCODE: $0000026A VOL: 0
;PCODE: $0000026B VOL: 0
; 0000 016B     {GPS_shir[3]=simvol;
;PCODE: $0000026C VOL: 0
;PCODE: $0000026D VOL: 0
;PCODE: $0000026E VOL: 0
;PCODE: $0000026F VOL: 0
;PCODE: $00000270 VOL: 0
; 0000 016C      goto exit_int;}
;PCODE: $00000271 VOL: 0
; 0000 016D    if(GPS_zap_counter==4)//dolg
;PCODE: $00000272 VOL: 0
;PCODE: $00000273 VOL: 0
;PCODE: $00000274 VOL: 0
;PCODE: $00000275 VOL: 0
; 0000 016E     {
; 0000 016F      switch(GPS_sim_counter)
;PCODE: $00000276 VOL: 0
;PCODE: $00000277 VOL: 0
; 0000 0170      {
; 0000 0171       case 0:
;PCODE: $00000278 VOL: 0
;PCODE: $00000279 VOL: 0
; 0000 0172     GPS_dolg[0]=(simvol-48)*100;
;PCODE: $0000027A VOL: 0
;PCODE: $0000027B VOL: 0
;PCODE: $0000027C VOL: 0
;PCODE: $0000027D VOL: 0
;PCODE: $0000027E VOL: 0
;PCODE: $0000027F VOL: 0
; 0000 0173       break;
;PCODE: $00000280 VOL: 0
; 0000 0174       case 1:
;PCODE: $00000281 VOL: 0
;PCODE: $00000282 VOL: 0
;PCODE: $00000283 VOL: 0
; 0000 0175     GPS_dolg[0]=GPS_dolg[0]+(simvol-48)*10;
;PCODE: $00000284 VOL: 0
;PCODE: $00000285 VOL: 0
;PCODE: $00000286 VOL: 0
;PCODE: $00000287 VOL: 0
;PCODE: $00000288 VOL: 0
;PCODE: $00000289 VOL: 0
;PCODE: $0000028A VOL: 0
;PCODE: $0000028B VOL: 0
; 0000 0176       break;
;PCODE: $0000028C VOL: 0
; 0000 0177       case 2:
;PCODE: $0000028D VOL: 0
;PCODE: $0000028E VOL: 0
;PCODE: $0000028F VOL: 0
; 0000 0178     GPS_dolg[0]=GPS_dolg[0]+(simvol-48);
;PCODE: $00000290 VOL: 0
;PCODE: $00000291 VOL: 0
;PCODE: $00000292 VOL: 0
;PCODE: $00000293 VOL: 0
;PCODE: $00000294 VOL: 0
;PCODE: $00000295 VOL: 0
; 0000 0179       break;
;PCODE: $00000296 VOL: 0
; 0000 017A       case 3:
;PCODE: $00000297 VOL: 0
;PCODE: $00000298 VOL: 0
;PCODE: $00000299 VOL: 0
; 0000 017B        GPS_dolg[1]=(simvol-48)*10;
;PCODE: $0000029A VOL: 0
;PCODE: $0000029B VOL: 0
;PCODE: $0000029C VOL: 0
;PCODE: $0000029D VOL: 0
;PCODE: $0000029E VOL: 0
;PCODE: $0000029F VOL: 0
;PCODE: $000002A0 VOL: 0
; 0000 017C       break;
;PCODE: $000002A1 VOL: 0
; 0000 017D       case 4:
;PCODE: $000002A2 VOL: 0
;PCODE: $000002A3 VOL: 0
;PCODE: $000002A4 VOL: 0
; 0000 017E        GPS_dolg[1]=GPS_dolg[1]+(simvol-48);
;PCODE: $000002A5 VOL: 0
;PCODE: $000002A6 VOL: 0
;PCODE: $000002A7 VOL: 0
;PCODE: $000002A8 VOL: 0
;PCODE: $000002A9 VOL: 0
;PCODE: $000002AA VOL: 0
;PCODE: $000002AB VOL: 0
;PCODE: $000002AC VOL: 0
; 0000 017F       break;
;PCODE: $000002AD VOL: 0
; 0000 0180       case 6:
;PCODE: $000002AE VOL: 0
;PCODE: $000002AF VOL: 0
;PCODE: $000002B0 VOL: 0
; 0000 0181        GPS_dolg[2]=(simvol-48)*1000;
;PCODE: $000002B1 VOL: 0
;PCODE: $000002B2 VOL: 0
;PCODE: $000002B3 VOL: 0
;PCODE: $000002B4 VOL: 0
;PCODE: $000002B5 VOL: 0
;PCODE: $000002B6 VOL: 0
;PCODE: $000002B7 VOL: 0
; 0000 0182       break;
;PCODE: $000002B8 VOL: 0
; 0000 0183       case 7:
;PCODE: $000002B9 VOL: 0
;PCODE: $000002BA VOL: 0
;PCODE: $000002BB VOL: 0
; 0000 0184        GPS_dolg[2]=GPS_dolg[2]+(simvol-48)*100;
;PCODE: $000002BC VOL: 0
;PCODE: $000002BD VOL: 0
;PCODE: $000002BE VOL: 0
;PCODE: $000002BF VOL: 0
;PCODE: $000002C0 VOL: 0
;PCODE: $000002C1 VOL: 0
;PCODE: $000002C2 VOL: 0
;PCODE: $000002C3 VOL: 0
;PCODE: $000002C4 VOL: 0
;PCODE: $000002C5 VOL: 0
; 0000 0185       break;
;PCODE: $000002C6 VOL: 0
; 0000 0186       case 8:
;PCODE: $000002C7 VOL: 0
;PCODE: $000002C8 VOL: 0
;PCODE: $000002C9 VOL: 0
; 0000 0187        GPS_dolg[2]=GPS_dolg[2]+(simvol-48)*10;
;PCODE: $000002CA VOL: 0
;PCODE: $000002CB VOL: 0
;PCODE: $000002CC VOL: 0
;PCODE: $000002CD VOL: 0
;PCODE: $000002CE VOL: 0
;PCODE: $000002CF VOL: 0
;PCODE: $000002D0 VOL: 0
;PCODE: $000002D1 VOL: 0
;PCODE: $000002D2 VOL: 0
;PCODE: $000002D3 VOL: 0
; 0000 0188       break;
;PCODE: $000002D4 VOL: 0
; 0000 0189       case 9:
;PCODE: $000002D5 VOL: 0
;PCODE: $000002D6 VOL: 0
;PCODE: $000002D7 VOL: 0
; 0000 018A        GPS_dolg[2]=GPS_dolg[2]+(simvol-48);
;PCODE: $000002D8 VOL: 0
;PCODE: $000002D9 VOL: 0
;PCODE: $000002DA VOL: 0
;PCODE: $000002DB VOL: 0
;PCODE: $000002DC VOL: 0
;PCODE: $000002DD VOL: 0
;PCODE: $000002DE VOL: 0
;PCODE: $000002DF VOL: 0
; 0000 018B      }
;PCODE: $000002E0 VOL: 0
; 0000 018C      GPS_sim_counter++;
;PCODE: $000002E1 VOL: 0
;PCODE: $000002E2 VOL: 0
;PCODE: $000002E3 VOL: 0
; 0000 018D      goto exit_int;
;PCODE: $000002E4 VOL: 0
; 0000 018E     }
; 0000 018F    if(GPS_zap_counter==5)
;PCODE: $000002E5 VOL: 0
;PCODE: $000002E6 VOL: 0
;PCODE: $000002E7 VOL: 0
;PCODE: $000002E8 VOL: 0
; 0000 0190     {
; 0000 0191      GPS_dolg[3]=simvol;
;PCODE: $000002E9 VOL: 0
;PCODE: $000002EA VOL: 0
;PCODE: $000002EB VOL: 0
;PCODE: $000002EC VOL: 0
;PCODE: $000002ED VOL: 0
; 0000 0192      goto exit_int;
;PCODE: $000002EE VOL: 0
; 0000 0193     }
; 0000 0194     if(GPS_zap_counter==6)
;PCODE: $000002EF VOL: 0
;PCODE: $000002F0 VOL: 0
;PCODE: $000002F1 VOL: 0
;PCODE: $000002F2 VOL: 0
; 0000 0195     {
; 0000 0196      GPS_solve=simvol;
;PCODE: $000002F3 VOL: 0
;PCODE: $000002F4 VOL: 0
; 0000 0197      GPS_flag_ready=1;
;PCODE: $000002F5 VOL: 0
;PCODE: $000002F6 VOL: 0
; 0000 0198      GPS_flag_gp=0;
;PCODE: $000002F7 VOL: 0
;PCODE: $000002F8 VOL: 0
; 0000 0199      GPS_zap_counter=0;
;PCODE: $000002F9 VOL: 0
;PCODE: $000002FA VOL: 0
; 0000 019A      GPS_ON_COUNTER=0;
;PCODE: $000002FB VOL: 0
;PCODE: $000002FC VOL: 0
; 0000 019B 
; 0000 019C       SEND_MAS[12]=1;
;PCODE: $000002FD VOL: 0
;PCODE: $000002FE VOL: 0
;PCODE: $000002FF VOL: 0
; 0000 019D 
; 0000 019E      SEND_MAS[13]=(unsigned char)GPS_shir[0];
;PCODE: $00000300 VOL: 0
;PCODE: $00000301 VOL: 0
;PCODE: $00000302 VOL: 0
; 0000 019F      SEND_MAS[14]=(unsigned char)GPS_shir[1];
;PCODE: $00000303 VOL: 0
;PCODE: $00000304 VOL: 0
;PCODE: $00000305 VOL: 0
;PCODE: $00000306 VOL: 0
; 0000 01A0      SEND_MAS[15]=(unsigned char)(GPS_shir[2]/100);
;PCODE: $00000307 VOL: 0
;PCODE: $00000308 VOL: 0
;PCODE: $00000309 VOL: 0
;PCODE: $0000030A VOL: 0
;PCODE: $0000030B VOL: 0
;PCODE: $0000030C VOL: 0
; 0000 01A1      SEND_MAS[16]=(unsigned char)(GPS_shir[2]%100);
;PCODE: $0000030D VOL: 0
;PCODE: $0000030E VOL: 0
;PCODE: $0000030F VOL: 0
;PCODE: $00000310 VOL: 0
;PCODE: $00000311 VOL: 0
;PCODE: $00000312 VOL: 0
; 0000 01A2 
; 0000 01A3      SEND_MAS[17]=(unsigned char)GPS_dolg[0];
;PCODE: $00000313 VOL: 0
;PCODE: $00000314 VOL: 0
;PCODE: $00000315 VOL: 0
; 0000 01A4      SEND_MAS[18]=(unsigned char)GPS_dolg[1];
;PCODE: $00000316 VOL: 0
;PCODE: $00000317 VOL: 0
;PCODE: $00000318 VOL: 0
;PCODE: $00000319 VOL: 0
; 0000 01A5      SEND_MAS[19]=(unsigned char)(GPS_dolg[2]/100);
;PCODE: $0000031A VOL: 0
;PCODE: $0000031B VOL: 0
;PCODE: $0000031C VOL: 0
;PCODE: $0000031D VOL: 0
;PCODE: $0000031E VOL: 0
;PCODE: $0000031F VOL: 0
; 0000 01A6      SEND_MAS[20]=(unsigned char)(GPS_dolg[2]%100);
;PCODE: $00000320 VOL: 0
;PCODE: $00000321 VOL: 0
;PCODE: $00000322 VOL: 0
;PCODE: $00000323 VOL: 0
;PCODE: $00000324 VOL: 0
;PCODE: $00000325 VOL: 0
; 0000 01A7 
; 0000 01A8      SEND_MAS[21]=(unsigned char)GPS_shir[3];
;PCODE: $00000326 VOL: 0
;PCODE: $00000327 VOL: 0
;PCODE: $00000328 VOL: 0
;PCODE: $00000329 VOL: 0
; 0000 01A9      SEND_MAS[22]=(unsigned char)GPS_dolg[3];
;PCODE: $0000032A VOL: 0
;PCODE: $0000032B VOL: 0
;PCODE: $0000032C VOL: 0
;PCODE: $0000032D VOL: 0
; 0000 01AA 
; 0000 01AB     }
; 0000 01AC   }
;PCODE: $0000032E VOL: 0
; 0000 01AD 
; 0000 01AE 
; 0000 01AF  exit_int:
;PCODE: $0000032F VOL: 0
;PCODE: $00000330 VOL: 0
; 0000 01B0 
; 0000 01B1 }
;PCODE: $00000331 VOL: 0
;PCODE: $00000332 VOL: 0
;PCODE: $00000333 VOL: 0
;PCODE: $00000334 VOL: 0
;
;
;// USART1 Receiver interrupt service routine
;interrupt [USART1_RXC] void usart1_rx_isr(void)
; 0000 01B6 {
;PCODE: $00000335 VOL: 0
;PCODE: $00000336 VOL: 0
; 0000 01B7  char data;
; 0000 01B8   data=UDR1;
;PCODE: $00000337 VOL: 0
;	data -> R17
;PCODE: $00000338 VOL: 0
;PCODE: $00000339 VOL: 0
; 0000 01B9  if((receive_counter==0)||(data>245))
;PCODE: $0000033A VOL: 0
;PCODE: $0000033B VOL: 0
;PCODE: $0000033C VOL: 0
;PCODE: $0000033D VOL: 0
;PCODE: $0000033E VOL: 0
;PCODE: $0000033F VOL: 0
;PCODE: $00000340 VOL: 0
;PCODE: $00000341 VOL: 0
; 0000 01BA  {
; 0000 01BB   receive_counter=0;
;PCODE: $00000342 VOL: 0
;PCODE: $00000343 VOL: 0
; 0000 01BC   switch(data)
;PCODE: $00000344 VOL: 0
;PCODE: $00000345 VOL: 0
; 0000 01BD   {
; 0000 01BE    //setup request
; 0000 01BF    case 246:
;PCODE: $00000346 VOL: 0
;PCODE: $00000347 VOL: 0
; 0000 01C0    flag_transmission=248;
;PCODE: $00000348 VOL: 0
;PCODE: $00000349 VOL: 0
; 0000 01C1    break;
;PCODE: $0000034A VOL: 0
; 0000 01C2 
; 0000 01C3    //calibr request
; 0000 01C4    case 247:
;PCODE: $0000034B VOL: 0
;PCODE: $0000034C VOL: 0
;PCODE: $0000034D VOL: 0
; 0000 01C5    flag_transmission=249;
;PCODE: $0000034E VOL: 0
;PCODE: $0000034F VOL: 0
; 0000 01C6    break;
;PCODE: $00000350 VOL: 0
; 0000 01C7 
; 0000 01C8    //setup table
; 0000 01C9    case 248:
;PCODE: $00000351 VOL: 0
;PCODE: $00000352 VOL: 0
;PCODE: $00000353 VOL: 0
; 0000 01CA    flag_receive=248;
;PCODE: $00000354 VOL: 0
;PCODE: $00000355 VOL: 0
; 0000 01CB    receive_counter=7;
;PCODE: $00000356 VOL: 0
;PCODE: $00000357 VOL: 0
; 0000 01CC    break;
;PCODE: $00000358 VOL: 0
; 0000 01CD 
; 0000 01CE    //calibr table
; 0000 01CF    case 249:
;PCODE: $00000359 VOL: 0
;PCODE: $0000035A VOL: 0
;PCODE: $0000035B VOL: 0
; 0000 01D0    flag_receive=249;
;PCODE: $0000035C VOL: 0
;PCODE: $0000035D VOL: 0
; 0000 01D1    receive_counter=9;
;PCODE: $0000035E VOL: 0
;PCODE: $0000035F VOL: 0
; 0000 01D2    break;
;PCODE: $00000360 VOL: 0
; 0000 01D3 
; 0000 01D4     //system on
; 0000 01D5    case 250:
;PCODE: $00000361 VOL: 0
;PCODE: $00000362 VOL: 0
;PCODE: $00000363 VOL: 0
; 0000 01D6     if(flag_I_NULL<10)//If the current null calibration has not finished
;PCODE: $00000364 VOL: 0
;PCODE: $00000365 VOL: 0
;PCODE: $00000366 VOL: 0
; 0000 01D7      break;
;PCODE: $00000367 VOL: 0
; 0000 01D8     flag_start=1;
;PCODE: $00000368 VOL: 0
;PCODE: $00000369 VOL: 0
;PCODE: $0000036A VOL: 0
; 0000 01D9    break;
;PCODE: $0000036B VOL: 0
; 0000 01DA 
; 0000 01DB    //system off
; 0000 01DC    case 251:
;PCODE: $0000036C VOL: 0
;PCODE: $0000036D VOL: 0
;PCODE: $0000036E VOL: 0
; 0000 01DD    flag_start=0;
;PCODE: $0000036F VOL: 0
;PCODE: $00000370 VOL: 0
; 0000 01DE    break;
;PCODE: $00000371 VOL: 0
; 0000 01DF 
; 0000 01E0    case 252:
;PCODE: $00000372 VOL: 0
;PCODE: $00000373 VOL: 0
;PCODE: $00000374 VOL: 0
; 0000 01E1    PORTC.1 = 1;//fonar on
;PCODE: $00000375 VOL: 0
;PCODE: $00000376 VOL: 0
; 0000 01E2    break;
;PCODE: $00000377 VOL: 0
; 0000 01E3 
; 0000 01E4    case 253:
;PCODE: $00000378 VOL: 0
;PCODE: $00000379 VOL: 0
;PCODE: $0000037A VOL: 0
; 0000 01E5    PORTC.1 = 0;//fonar off
;PCODE: $0000037B VOL: 0
;PCODE: $0000037C VOL: 0
; 0000 01E6    break;
;PCODE: $0000037D VOL: 0
; 0000 01E7   }
;PCODE: $0000037E VOL: 0
; 0000 01E8  }
; 0000 01E9  else
;PCODE: $0000037F VOL: 0
;PCODE: $00000380 VOL: 0
; 0000 01EA  {
; 0000 01EB    if(flag_receive==248)
;PCODE: $00000381 VOL: 0
;PCODE: $00000382 VOL: 0
;PCODE: $00000383 VOL: 0
; 0000 01EC    {
; 0000 01ED     SETUP_MAS[8-receive_counter]=data;
;PCODE: $00000384 VOL: 0
;PCODE: $00000385 VOL: 0
;PCODE: $00000386 VOL: 0
;PCODE: $00000387 VOL: 0
;PCODE: $00000388 VOL: 0
; 0000 01EE   //  EEP_SETUP_MAS[receive_counter-1]=data;
; 0000 01EF     if(receive_counter==1)
;PCODE: $00000389 VOL: 0
;PCODE: $0000038A VOL: 0
;PCODE: $0000038B VOL: 0
; 0000 01F0      Read_Setup();
;PCODE: $0000038C VOL: 0
; 0000 01F1    }
;PCODE: $0000038D VOL: 0
; 0000 01F2 
; 0000 01F3     if(flag_receive==249)
;PCODE: $0000038E VOL: 0
;PCODE: $0000038F VOL: 0
;PCODE: $00000390 VOL: 0
;PCODE: $00000391 VOL: 0
; 0000 01F4     {
; 0000 01F5      CALIBR_MAS[10-receive_counter]=data;
;PCODE: $00000392 VOL: 0
;PCODE: $00000393 VOL: 0
;PCODE: $00000394 VOL: 0
;PCODE: $00000395 VOL: 0
;PCODE: $00000396 VOL: 0
; 0000 01F6   //  EEP_CALIBR_MAS[receive_counter-1]=data;
; 0000 01F7     }
; 0000 01F8 
; 0000 01F9   // if(receive_counter==1)
; 0000 01FA   // {flag_receive=0;}
; 0000 01FB    receive_counter--;
;PCODE: $00000397 VOL: 0
;PCODE: $00000398 VOL: 0
;PCODE: $00000399 VOL: 0
;PCODE: $0000039A VOL: 0
;PCODE: $0000039B VOL: 0
; 0000 01FC  }
;PCODE: $0000039C VOL: 0
; 0000 01FD }
;PCODE: $0000039D VOL: 0
;PCODE: $0000039E VOL: 0
;PCODE: $0000039F VOL: 0
;PCODE: $000003A0 VOL: 0
;
;
;// Write a character to the USART1 Transmitter
;#pragma used+
;void putchar1(char c)
; 0000 0203 {
;PCODE: $000003A1 VOL: 0
;PCODE: $000003A2 VOL: 0
; 0000 0204  while ((UCSR1A & DATA_REGISTER_EMPTY)==0);
;PCODE: $000003A3 VOL: 0
;	c -> Y+0
;PCODE: $000003A4 VOL: 0
;PCODE: $000003A5 VOL: 0
;PCODE: $000003A6 VOL: 0
;PCODE: $000003A7 VOL: 0
;PCODE: $000003A8 VOL: 0
;PCODE: $000003A9 VOL: 0
; 0000 0205   UDR1=c;
;PCODE: $000003AA VOL: 0
;PCODE: $000003AB VOL: 0
; 0000 0206 }
;PCODE: $000003AC VOL: 0
;PCODE: $000003AD VOL: 0
;PCODE: $000003AE VOL: 0
;#pragma used-
;
;
;// Read the AD conversion result
;unsigned int read_adc(unsigned char adc_input)
; 0000 020C {
;PCODE: $000003AF VOL: 0
;PCODE: $000003B0 VOL: 0
; 0000 020D  ADMUX=adc_input | (ADC_VREF_TYPE & 0xff);
;PCODE: $000003B1 VOL: 0
;	adc_input -> Y+0
;PCODE: $000003B2 VOL: 0
;PCODE: $000003B3 VOL: 0
;PCODE: $000003B4 VOL: 0
; 0000 020E  // Delay needed for the stabilization of the ADC input voltage
; 0000 020F  delay_us(7);
;PCODE: $000003B5 VOL: 0
; 0000 0210  // Start the AD conversion
; 0000 0211  ADCSRA|=0x40;
;PCODE: $000003B6 VOL: 0
;PCODE: $000003B7 VOL: 0
; 0000 0212  // Wait for the AD conversion to complete
; 0000 0213  while ((ADCSRA & 0x10)==0);
;PCODE: $000003B8 VOL: 0
;PCODE: $000003B9 VOL: 0
;PCODE: $000003BA VOL: 0
;PCODE: $000003BB VOL: 0
;PCODE: $000003BC VOL: 0
;PCODE: $000003BD VOL: 0
; 0000 0214   ADCSRA|=0x10;
;PCODE: $000003BE VOL: 0
;PCODE: $000003BF VOL: 0
; 0000 0215  return ADCW;
;PCODE: $000003C0 VOL: 0
;PCODE: $000003C1 VOL: 0
;PCODE: $000003C2 VOL: 0
; 0000 0216 }
;PCODE: $000003C3 VOL: 0
;
;
;unsigned char PID_S(unsigned int Z,unsigned int S)
; 0000 021A  {
;PCODE: $000003C4 VOL: 0
;PCODE: $000003C5 VOL: 0
; 0000 021B   int U,E;
; 0000 021C 
; 0000 021D   E=Z-S;
;PCODE: $000003C6 VOL: 0
;PCODE: $000003C7 VOL: 0
;	Z -> Y+6
;	S -> Y+4
;	U -> R16,R17
;	E -> R18,R19
;PCODE: $000003C8 VOL: 0
;PCODE: $000003C9 VOL: 0
;PCODE: $000003CA VOL: 0
;PCODE: $000003CB VOL: 0
; 0000 021E   PID_I_S=PID_I_S+(E*K[1])/2;
;PCODE: $000003CC VOL: 0
;PCODE: $000003CD VOL: 0
;PCODE: $000003CE VOL: 0
;PCODE: $000003CF VOL: 0
;PCODE: $000003D0 VOL: 0
;PCODE: $000003D1 VOL: 0
;PCODE: $000003D2 VOL: 0
;PCODE: $000003D3 VOL: 0
;PCODE: $000003D4 VOL: 0
;PCODE: $000003D5 VOL: 0
; 0000 021F   if(PID_I_S>1000)
;PCODE: $000003D6 VOL: 0
;PCODE: $000003D7 VOL: 0
;PCODE: $000003D8 VOL: 0
; 0000 0220    PID_I_S=1000;
;PCODE: $000003D9 VOL: 0
;PCODE: $000003DA VOL: 0
; 0000 0221   if(PID_I_S<-1000)
;PCODE: $000003DB VOL: 0
;PCODE: $000003DC VOL: 0
;PCODE: $000003DD VOL: 0
;PCODE: $000003DE VOL: 0
; 0000 0222    PID_I_S=-1000;
;PCODE: $000003DF VOL: 0
;PCODE: $000003E0 VOL: 0
; 0000 0223   U=E*K[0]+PID_I_S;
;PCODE: $000003E1 VOL: 0
;PCODE: $000003E2 VOL: 0
;PCODE: $000003E3 VOL: 0
;PCODE: $000003E4 VOL: 0
;PCODE: $000003E5 VOL: 0
;PCODE: $000003E6 VOL: 0
;PCODE: $000003E7 VOL: 0
; 0000 0224 /*
; 0000 0225  if(TK_SPEED_KM_H>300)
; 0000 0226    U=(U*6)/(IK_SPEED_KM_H/100);
; 0000 0227 */
; 0000 0228 
; 0000 0229  U=U/4;
;PCODE: $000003E8 VOL: 0
;PCODE: $000003E9 VOL: 0
;PCODE: $000003EA VOL: 0
;PCODE: $000003EB VOL: 0
; 0000 022A   if(U<0)
;PCODE: $000003EC VOL: 0
;PCODE: $000003ED VOL: 0
; 0000 022B    U=0;
;PCODE: $000003EE VOL: 0
;PCODE: $000003EF VOL: 0
; 0000 022C   if(U>255)
;PCODE: $000003F0 VOL: 0
;PCODE: $000003F1 VOL: 0
;PCODE: $000003F2 VOL: 0
;PCODE: $000003F3 VOL: 0
; 0000 022D    U=255;
;PCODE: $000003F4 VOL: 0
;PCODE: $000003F5 VOL: 0
; 0000 022E   return (unsigned char)U;
;PCODE: $000003F6 VOL: 0
;PCODE: $000003F7 VOL: 0
;PCODE: $000003F8 VOL: 0
;PCODE: $000003F9 VOL: 0
;PCODE: $000003FA VOL: 0
; 0000 022F  }
;PCODE: $000003FB VOL: 0
;
;
;// Timer2 overflow interrupt service routine
;////100HZ Program cycle
;interrupt [TIM2_OVF] void timer2_ovf_isr(void)
; 0000 0235 {
;PCODE: $000003FC VOL: 0
;PCODE: $000003FD VOL: 0
; 0000 0236  int SCOLGENIE=0;
; 0000 0237  unsigned char PWM=0;
; 0000 0238 
; 0000 0239  TCNT2=148;//100HZ
;PCODE: $000003FE VOL: 0
;	SCOLGENIE -> R16,R17
;	PWM -> R19
;PCODE: $000003FF VOL: 0
;PCODE: $00000400 VOL: 0
;PCODE: $00000401 VOL: 0
;PCODE: $00000402 VOL: 0
;PCODE: $00000403 VOL: 0
;PCODE: $00000404 VOL: 0
; 0000 023A  //Speed---------------------------------------------------------------------------
; 0000 023B   if((IK_DELTA>400)&&(ovf_IK<2))   //   ~~160km/h             172,800 kHz
;PCODE: $00000405 VOL: 0
;PCODE: $00000406 VOL: 0
;PCODE: $00000407 VOL: 0
;PCODE: $00000408 VOL: 0
;PCODE: $00000409 VOL: 0
;PCODE: $0000040A VOL: 0
;PCODE: $0000040B VOL: 0
;PCODE: $0000040C VOL: 0
;PCODE: $0000040D VOL: 0
;PCODE: $0000040E VOL: 0
; 0000 023C           {
; 0000 023D            IK_SPEED_KM_H=(unsigned int)(((unsigned long)R_IK*2255)/IK_DELTA);
;PCODE: $0000040F VOL: 0
;PCODE: $00000410 VOL: 0
;PCODE: $00000411 VOL: 0
;PCODE: $00000412 VOL: 0
;PCODE: $00000413 VOL: 0
;PCODE: $00000414 VOL: 0
;PCODE: $00000415 VOL: 0
;PCODE: $00000416 VOL: 0
; 0000 023E 
; 0000 023F           }
; 0000 0240   else
;PCODE: $00000417 VOL: 0
;PCODE: $00000418 VOL: 0
; 0000 0241           {
; 0000 0242            IK_SPEED_KM_H=0;
;PCODE: $00000419 VOL: 0
;PCODE: $0000041A VOL: 0
; 0000 0243           }
;PCODE: $0000041B VOL: 0
; 0000 0244 
; 0000 0245   if((TK_DELTA>400)&&(ovf_TK<2))   //   ~~160            172,800 kHz
;PCODE: $0000041C VOL: 0
;PCODE: $0000041D VOL: 0
;PCODE: $0000041E VOL: 0
;PCODE: $0000041F VOL: 0
;PCODE: $00000420 VOL: 0
;PCODE: $00000421 VOL: 0
;PCODE: $00000422 VOL: 0
;PCODE: $00000423 VOL: 0
;PCODE: $00000424 VOL: 0
;PCODE: $00000425 VOL: 0
; 0000 0246           {
; 0000 0247            TK_SPEED_KM_H=(unsigned int)(((unsigned long)R_TK*2171)/TK_DELTA);
;PCODE: $00000426 VOL: 0
;PCODE: $00000427 VOL: 0
;PCODE: $00000428 VOL: 0
;PCODE: $00000429 VOL: 0
;PCODE: $0000042A VOL: 0
;PCODE: $0000042B VOL: 0
;PCODE: $0000042C VOL: 0
;PCODE: $0000042D VOL: 0
; 0000 0248           }
; 0000 0249   else
;PCODE: $0000042E VOL: 0
;PCODE: $0000042F VOL: 0
; 0000 024A           {
; 0000 024B            TK_SPEED_KM_H=0;
;PCODE: $00000430 VOL: 0
;PCODE: $00000431 VOL: 0
; 0000 024C           }
;PCODE: $00000432 VOL: 0
; 0000 024D   //Speed---------------------------------------------------------------------------
; 0000 024E 
; 0000 024F 
; 0000 0250         //Proverka u vichiclenie skolgenia---------------------------------------------------------------
; 0000 0251           if((IK_SPEED_KM_H>=TK_SPEED_KM_H)||(TK_SPEED_KM_H<100))// 10kmh
;PCODE: $00000433 VOL: 0
;PCODE: $00000434 VOL: 0
;PCODE: $00000435 VOL: 0
;PCODE: $00000436 VOL: 0
;PCODE: $00000437 VOL: 0
;PCODE: $00000438 VOL: 0
;PCODE: $00000439 VOL: 0
;PCODE: $0000043A VOL: 0
;PCODE: $0000043B VOL: 0
; 0000 0252             SCOLGENIE=0;
;PCODE: $0000043C VOL: 0
;PCODE: $0000043D VOL: 0
; 0000 0253           else
;PCODE: $0000043E VOL: 0
;PCODE: $0000043F VOL: 0
; 0000 0254             SCOLGENIE=(int)((((long int)(TK_SPEED_KM_H-IK_SPEED_KM_H))*1000)/((long int)TK_SPEED_KM_H));
;PCODE: $00000440 VOL: 0
;PCODE: $00000441 VOL: 0
;PCODE: $00000442 VOL: 0
;PCODE: $00000443 VOL: 0
;PCODE: $00000444 VOL: 0
;PCODE: $00000445 VOL: 0
;PCODE: $00000446 VOL: 0
;PCODE: $00000447 VOL: 0
;PCODE: $00000448 VOL: 0
;PCODE: $00000449 VOL: 0
;PCODE: $0000044A VOL: 0
; 0000 0255         //-----------------------------------------------------------------------------------------------
; 0000 0256 
; 0000 0257 
; 0000 0258         if(flag_start==1)
;PCODE: $0000044B VOL: 0
;PCODE: $0000044C VOL: 0
;PCODE: $0000044D VOL: 0
;PCODE: $0000044E VOL: 0
; 0000 0259           {
; 0000 025A            PWM=PID_S((unsigned int)ZADANIE_S*10,(unsigned int)SCOLGENIE);
;PCODE: $0000044F VOL: 0
;PCODE: $00000450 VOL: 0
;PCODE: $00000451 VOL: 0
;PCODE: $00000452 VOL: 0
;PCODE: $00000453 VOL: 0
;PCODE: $00000454 VOL: 0
;PCODE: $00000455 VOL: 0
; 0000 025B           }
; 0000 025C           else
;PCODE: $00000456 VOL: 0
;PCODE: $00000457 VOL: 0
; 0000 025D           {
; 0000 025E            PWM=0;
;PCODE: $00000458 VOL: 0
;PCODE: $00000459 VOL: 0
; 0000 025F           }
;PCODE: $0000045A VOL: 0
; 0000 0260            OCR0=255-PWM;
;PCODE: $0000045B VOL: 0
;PCODE: $0000045C VOL: 0
;PCODE: $0000045D VOL: 0
; 0000 0261 
; 0000 0262  if(program_cycle_counter<9)
;PCODE: $0000045E VOL: 0
;PCODE: $0000045F VOL: 0
;PCODE: $00000460 VOL: 0
; 0000 0263   {program_cycle_counter++;}
;PCODE: $00000461 VOL: 0
;PCODE: $00000462 VOL: 0
;PCODE: $00000463 VOL: 0
; 0000 0264  else
;PCODE: $00000464 VOL: 0
;PCODE: $00000465 VOL: 0
; 0000 0265   {
; 0000 0266    program_cycle_flag=1;
;PCODE: $00000466 VOL: 0
;PCODE: $00000467 VOL: 0
; 0000 0267    program_cycle_counter=0;
;PCODE: $00000468 VOL: 0
;PCODE: $00000469 VOL: 0
; 0000 0268   }
;PCODE: $0000046A VOL: 0
; 0000 0269 }
;PCODE: $0000046B VOL: 0
;PCODE: $0000046C VOL: 0
;PCODE: $0000046D VOL: 0
;PCODE: $0000046E VOL: 0
;PCODE: $0000046F VOL: 0
;
;/*
;unsigned int filter(unsigned int a1,unsigned int a2)
;{
; if((a1<(a2+200))&&((a1+200)>a2))
; {
;   return (a1+a2)/2;
; }
; return 0;
;}
;*/
;
;
;void main(void)
; 0000 0278 {
;PCODE: $00000470 VOL: 0
; 0000 0279 // Declare your local variables here
; 0000 027A unsigned char main_cycle=0,flag_led_direction=0,led_cycle=0;
; 0000 027B unsigned int BAT=0;
; 0000 027C unsigned int load_cell_b=0,load_cell=0,K=0;
; 0000 027D 
; 0000 027E int M=0;
; 0000 027F int I=0;
; 0000 0280 unsigned int TIME_OUT=10*60*30;
; 0000 0281 
; 0000 0282 Control_Sum_Calibr();
;PCODE: $00000471 VOL: 0
;PCODE: $00000472 VOL: 0
;PCODE: $00000473 VOL: 0
;PCODE: $00000474 VOL: 0
;PCODE: $00000475 VOL: 0
;	main_cycle -> R17
;	flag_led_direction -> R16
;	led_cycle -> R19
;	BAT -> R20,R21
;	load_cell_b -> Y+10
;	load_cell -> Y+8
;	K -> Y+6
;	M -> Y+4
;	I -> Y+2
;	TIME_OUT -> Y+0
;PCODE: $00000476 VOL: 0
;PCODE: $00000477 VOL: 0
;PCODE: $00000478 VOL: 0
;PCODE: $00000479 VOL: 0
;PCODE: $0000047A VOL: 0
;PCODE: $0000047B VOL: 0
;PCODE: $0000047C VOL: 0
;PCODE: $0000047D VOL: 0
;PCODE: $0000047E VOL: 0
; 0000 0283 Control_Sum_Setup();
;PCODE: $0000047F VOL: 0
; 0000 0284 Read_Setup();
;PCODE: $00000480 VOL: 0
; 0000 0285 
; 0000 0286 init_all();
;PCODE: $00000481 VOL: 0
; 0000 0287 // I2C Port: PORTD
; 0000 0288 // I2C SDA bit: 1
; 0000 0289 // I2C SCL bit: 0
; 0000 028A // Bit Rate: 100 kHz
; 0000 028B i2c_init();
;PCODE: $00000482 VOL: 0
; 0000 028C 
; 0000 028D SPI_MasterInit();
;PCODE: $00000483 VOL: 0
; 0000 028E 
; 0000 028F // Global enable interrupts
; 0000 0290 #asm("sei")
;PCODE: $00000484 VOL: 0
	sei
;PCODE: $00000485 VOL: 0
; 0000 0291 
; 0000 0292 PORTC.0 = 1;//iksem - on
;PCODE: $00000486 VOL: 0
;PCODE: $00000487 VOL: 0
; 0000 0293 
; 0000 0294 //PORTC.1 = 1;//fonar on
; 0000 0295 
; 0000 0296 
; 0000 0297 delay_ms(100);
;PCODE: $00000488 VOL: 0
;PCODE: $00000489 VOL: 0
;PCODE: $0000048A VOL: 0
; 0000 0298 
; 0000 0299 SET_AD7799();
;PCODE: $0000048B VOL: 0
; 0000 029A 
; 0000 029B uart1SendString(N_string);//Set BLUETOOTH NAME
;PCODE: $0000048C VOL: 0
;PCODE: $0000048D VOL: 0
;PCODE: $0000048E VOL: 0
; 0000 029C 
; 0000 029D 
; 0000 029E /*
; 0000 029F //Default eeprom writing----------
; 0000 02A0 if(EEP_CALIBR_MAS[0]!=249)
; 0000 02A1 {
; 0000 02A2  for(tmp=0;tmp<34;tmp++)
; 0000 02A3   EEP_CALIBR_MAS[tmp]=CALIBR_MAS[tmp];
; 0000 02A4  for(tmp=0;tmp<8;tmp++)
; 0000 02A5   EEP_SETUP_MAS[tmp]=SETUP_MAS[tmp];
; 0000 02A6 }
; 0000 02A7 else
; 0000 02A8 {
; 0000 02A9  for(tmp=0;tmp<34;tmp++)
; 0000 02AA   CALIBR_MAS[tmp]=EEP_CALIBR_MAS[tmp];
; 0000 02AB  for(tmp=0;tmp<8;tmp++)
; 0000 02AC   SETUP_MAS[tmp]=EEP_SETUP_MAS[tmp];
; 0000 02AD }
; 0000 02AE //--------------------------------
; 0000 02AF */
; 0000 02B0 
; 0000 02B1 while (1)
;PCODE: $0000048F VOL: 0
; 0000 02B2     {
; 0000 02B3      /*
; 0000 02B4       program_cycle_flag=0;
; 0000 02B5       while(program_cycle_flag!=1)
; 0000 02B6       {}
; 0000 02B7       program_cycle_flag=0;
; 0000 02B8      */
; 0000 02B9       SEND_MAS[1]= TK_SPEED_KM_H/100;
;PCODE: $00000490 VOL: 0
;PCODE: $00000491 VOL: 0
;PCODE: $00000492 VOL: 0
;PCODE: $00000493 VOL: 0
;PCODE: $00000494 VOL: 0
; 0000 02BA       SEND_MAS[2]= TK_SPEED_KM_H%100;
;PCODE: $00000495 VOL: 0
;PCODE: $00000496 VOL: 0
;PCODE: $00000497 VOL: 0
;PCODE: $00000498 VOL: 0
;PCODE: $00000499 VOL: 0
; 0000 02BB       SEND_MAS[3]= IK_SPEED_KM_H/100;
;PCODE: $0000049A VOL: 0
;PCODE: $0000049B VOL: 0
;PCODE: $0000049C VOL: 0
;PCODE: $0000049D VOL: 0
;PCODE: $0000049E VOL: 0
; 0000 02BC       SEND_MAS[4]= IK_SPEED_KM_H%100;
;PCODE: $0000049F VOL: 0
;PCODE: $000004A0 VOL: 0
;PCODE: $000004A1 VOL: 0
;PCODE: $000004A2 VOL: 0
;PCODE: $000004A3 VOL: 0
; 0000 02BD 
; 0000 02BE        if(flag_start==1)
;PCODE: $000004A4 VOL: 0
;PCODE: $000004A5 VOL: 0
;PCODE: $000004A6 VOL: 0
; 0000 02BF        {TIME_OUT=10*60*30;}//30 min
;PCODE: $000004A7 VOL: 0
;PCODE: $000004A8 VOL: 0
; 0000 02C0        else
;PCODE: $000004A9 VOL: 0
;PCODE: $000004AA VOL: 0
; 0000 02C1        {
; 0000 02C2         if(TIME_OUT==0)
;PCODE: $000004AB VOL: 0
;PCODE: $000004AC VOL: 0
;PCODE: $000004AD VOL: 0
; 0000 02C3          PORTC.0 = 0;//iksem - off
;PCODE: $000004AE VOL: 0
;PCODE: $000004AF VOL: 0
; 0000 02C4         else
;PCODE: $000004B0 VOL: 0
;PCODE: $000004B1 VOL: 0
; 0000 02C5          TIME_OUT--;
;PCODE: $000004B2 VOL: 0
;PCODE: $000004B3 VOL: 0
;PCODE: $000004B4 VOL: 0
; 0000 02C6        }
;PCODE: $000004B5 VOL: 0
;PCODE: $000004B6 VOL: 0
; 0000 02C7 
; 0000 02C8       load_cell_b=load_cell;
;PCODE: $000004B7 VOL: 0
;PCODE: $000004B8 VOL: 0
; 0000 02C9 
; 0000 02CA       while(AD7799_DDRDY==0) //!DDRDY
;PCODE: $000004B9 VOL: 0
;PCODE: $000004BA VOL: 0
;PCODE: $000004BB VOL: 0
;PCODE: $000004BC VOL: 0
; 0000 02CB       {}
;PCODE: $000004BD VOL: 0
;PCODE: $000004BE VOL: 0
; 0000 02CC       delay_ms(1);
;PCODE: $000004BF VOL: 0
;PCODE: $000004C0 VOL: 0
;PCODE: $000004C1 VOL: 0
; 0000 02CD       load_cell=READ_AD7799();
;PCODE: $000004C2 VOL: 0
;PCODE: $000004C3 VOL: 0
; 0000 02CE       delay_ms(1);
;PCODE: $000004C4 VOL: 0
;PCODE: $000004C5 VOL: 0
;PCODE: $000004C6 VOL: 0
; 0000 02CF 
; 0000 02D0 
; 0000 02D1       /*
; 0000 02D2       while(AD7799_DDRDY==0) //!DDRDY
; 0000 02D3       {}
; 0000 02D4       delay_ms(1);
; 0000 02D5       lc[2]=READ_AD7799();
; 0000 02D6       */
; 0000 02D7       //load_cell=filter(lc[0],lc[1]);
; 0000 02D8 
; 0000 02D9      // if(((load_cell+500)>load_cell_b)&&(load_cell<(load_cell_b+500)))
; 0000 02DA      //  {}
; 0000 02DB      //  else
; 0000 02DC      //  {load_cell=load_cell_b;}
; 0000 02DD      //M----------------------------------------------
; 0000 02DE      //load_cell=88 - 0kg
; 0000 02DF      //load_cell=835 - 11,1kg
; 0000 02E0      // 1 adc = 0,01486 kg
; 0000 02E1       M=(long)load_cell*1486/1000;// kg*100
;PCODE: $000004C7 VOL: 0
;PCODE: $000004C8 VOL: 0
;PCODE: $000004C9 VOL: 0
;PCODE: $000004CA VOL: 0
;PCODE: $000004CB VOL: 0
;PCODE: $000004CC VOL: 0
;PCODE: $000004CD VOL: 0
;PCODE: $000004CE VOL: 0
; 0000 02E2       if(M<0)
;PCODE: $000004CF VOL: 0
;PCODE: $000004D0 VOL: 0
;PCODE: $000004D1 VOL: 0
; 0000 02E3       M=0;
;PCODE: $000004D2 VOL: 0
;PCODE: $000004D3 VOL: 0
; 0000 02E4       if(M>10000)
;PCODE: $000004D4 VOL: 0
;PCODE: $000004D5 VOL: 0
;PCODE: $000004D6 VOL: 0
;PCODE: $000004D7 VOL: 0
; 0000 02E5       M=10000;
;PCODE: $000004D8 VOL: 0
;PCODE: $000004D9 VOL: 0
; 0000 02E6       SEND_MAS[7]=M/100;
;PCODE: $000004DA VOL: 0
;PCODE: $000004DB VOL: 0
;PCODE: $000004DC VOL: 0
;PCODE: $000004DD VOL: 0
;PCODE: $000004DE VOL: 0
;PCODE: $000004DF VOL: 0
; 0000 02E7       SEND_MAS[8]=M%100;
;PCODE: $000004E0 VOL: 0
;PCODE: $000004E1 VOL: 0
;PCODE: $000004E2 VOL: 0
;PCODE: $000004E3 VOL: 0
;PCODE: $000004E4 VOL: 0
; 0000 02E8       //---------------------------------------------
; 0000 02E9 
; 0000 02EA 
; 0000 02EB      //KKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKK
; 0000 02EC       K=K_BY_KOEFFICIENTS(M);
;PCODE: $000004E5 VOL: 0
;PCODE: $000004E6 VOL: 0
;PCODE: $000004E7 VOL: 0
; 0000 02ED       //if(flag_start==1)
; 0000 02EE       //{
; 0000 02EF        //K=(K*15)/18;          //Подгон К если система включена
; 0000 02F0      // }
; 0000 02F1       SEND_MAS[5]=K/100;
;PCODE: $000004E8 VOL: 0
;PCODE: $000004E9 VOL: 0
;PCODE: $000004EA VOL: 0
;PCODE: $000004EB VOL: 0
;PCODE: $000004EC VOL: 0
; 0000 02F2       SEND_MAS[6]=K%100;
;PCODE: $000004ED VOL: 0
;PCODE: $000004EE VOL: 0
;PCODE: $000004EF VOL: 0
;PCODE: $000004F0 VOL: 0
;PCODE: $000004F1 VOL: 0
; 0000 02F3      //KKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKK
; 0000 02F4 
; 0000 02F5      ADC_BAT=read_adc(0);
;PCODE: $000004F2 VOL: 0
;PCODE: $000004F3 VOL: 0
;PCODE: $000004F4 VOL: 0
; 0000 02F6      ADC_I=read_adc(1);//0.021В датчика = 1А = 2.1*4 = 8.4 АЦП (1024 = 2.56в)
;PCODE: $000004F5 VOL: 0
;PCODE: $000004F6 VOL: 0
;PCODE: $000004F7 VOL: 0
; 0000 02F7 
; 0000 02F8      if(flag_I_NULL<10)
;PCODE: $000004F8 VOL: 0
;PCODE: $000004F9 VOL: 0
;PCODE: $000004FA VOL: 0
; 0000 02F9      {
; 0000 02FA       I_NULL=I_NULL+ADC_I;
;PCODE: $000004FB VOL: 0
;PCODE: $000004FC VOL: 0
;PCODE: $000004FD VOL: 0
;PCODE: $000004FE VOL: 0
;PCODE: $000004FF VOL: 0
; 0000 02FB 
; 0000 02FC       if(flag_I_NULL==9)
;PCODE: $00000500 VOL: 0
;PCODE: $00000501 VOL: 0
;PCODE: $00000502 VOL: 0
; 0000 02FD       I_NULL=I_NULL/10;
;PCODE: $00000503 VOL: 0
;PCODE: $00000504 VOL: 0
;PCODE: $00000505 VOL: 0
;PCODE: $00000506 VOL: 0
; 0000 02FE 
; 0000 02FF       flag_I_NULL++;
;PCODE: $00000507 VOL: 0
;PCODE: $00000508 VOL: 0
;PCODE: $00000509 VOL: 0
;PCODE: $0000050A VOL: 0
; 0000 0300      }
; 0000 0301      //BATTERY LEVEL--------------------------------------------------------
; 0000 0302       BAT=ADC_BAT;//163*4-100%(12.7) 150*4-0%(11.7)
;PCODE: $0000050B VOL: 0
;PCODE: $0000050C VOL: 0
;PCODE: $0000050D VOL: 0
; 0000 0303 
; 0000 0304      // if(ADC_I>=(252*4))
; 0000 0305      //  I=0;
; 0000 0306      // else
; 0000 0307 
; 0000 0308 
; 0000 0309 
; 0000 030A       if(BAT<=610)
;PCODE: $0000050E VOL: 0
;PCODE: $0000050F VOL: 0
;PCODE: $00000510 VOL: 0
; 0000 030B        {
; 0000 030C         SEND_MAS[23]=0;
;PCODE: $00000511 VOL: 0
;PCODE: $00000512 VOL: 0
;PCODE: $00000513 VOL: 0
; 0000 030D        }
; 0000 030E        else
;PCODE: $00000514 VOL: 0
;PCODE: $00000515 VOL: 0
; 0000 030F        {
; 0000 0310         if(BAT>=660)
;PCODE: $00000516 VOL: 0
;PCODE: $00000517 VOL: 0
;PCODE: $00000518 VOL: 0
; 0000 0311          SEND_MAS[23]=100;
;PCODE: $00000519 VOL: 0
;PCODE: $0000051A VOL: 0
;PCODE: $0000051B VOL: 0
; 0000 0312         else
;PCODE: $0000051C VOL: 0
;PCODE: $0000051D VOL: 0
; 0000 0313          SEND_MAS[23]=(unsigned char)((BAT-610)*2);
;PCODE: $0000051E VOL: 0
;PCODE: $0000051F VOL: 0
;PCODE: $00000520 VOL: 0
;PCODE: $00000521 VOL: 0
;PCODE: $00000522 VOL: 0
; 0000 0314        }
;PCODE: $00000523 VOL: 0
;PCODE: $00000524 VOL: 0
; 0000 0315      //--------------------------------------------------------------------
; 0000 0316 
; 0000 0317      I=ADC_I;
;PCODE: $00000525 VOL: 0
;PCODE: $00000526 VOL: 0
; 0000 0318      I=(int)(((long)(I_NULL-I)*100)/84);//0.021В датчика = 1А = 2.1*4 = 8.4 АЦП (1024 = 2.56в) 2.52v=0
;PCODE: $00000527 VOL: 0
;PCODE: $00000528 VOL: 0
;PCODE: $00000529 VOL: 0
;PCODE: $0000052A VOL: 0
;PCODE: $0000052B VOL: 0
;PCODE: $0000052C VOL: 0
;PCODE: $0000052D VOL: 0
;PCODE: $0000052E VOL: 0
;PCODE: $0000052F VOL: 0
;PCODE: $00000530 VOL: 0
; 0000 0319      if(I<0)
;PCODE: $00000531 VOL: 0
;PCODE: $00000532 VOL: 0
;PCODE: $00000533 VOL: 0
; 0000 031A      I=0;
;PCODE: $00000534 VOL: 0
;PCODE: $00000535 VOL: 0
; 0000 031B 
; 0000 031C 
; 0000 031D       SEND_MAS[9]=I/100;
;PCODE: $00000536 VOL: 0
;PCODE: $00000537 VOL: 0
;PCODE: $00000538 VOL: 0
;PCODE: $00000539 VOL: 0
;PCODE: $0000053A VOL: 0
;PCODE: $0000053B VOL: 0
; 0000 031E       SEND_MAS[10]=I%100;
;PCODE: $0000053C VOL: 0
;PCODE: $0000053D VOL: 0
;PCODE: $0000053E VOL: 0
;PCODE: $0000053F VOL: 0
;PCODE: $00000540 VOL: 0
; 0000 031F 
; 0000 0320 
; 0000 0321     //Контрольная сумма----------------------
; 0000 0322      Control_Sum_Send();
;PCODE: $00000541 VOL: 0
; 0000 0323     //---------------------------------------
; 0000 0324       if(flag_transmission==255)
;PCODE: $00000542 VOL: 0
;PCODE: $00000543 VOL: 0
;PCODE: $00000544 VOL: 0
; 0000 0325       {
; 0000 0326        uart1SendArray(SEND_MAS,26);
;PCODE: $00000545 VOL: 0
;PCODE: $00000546 VOL: 0
;PCODE: $00000547 VOL: 0
;PCODE: $00000548 VOL: 0
; 0000 0327       }
; 0000 0328       else
;PCODE: $00000549 VOL: 0
;PCODE: $0000054A VOL: 0
; 0000 0329       {
; 0000 032A        if(flag_transmission==248)
;PCODE: $0000054B VOL: 0
;PCODE: $0000054C VOL: 0
;PCODE: $0000054D VOL: 0
; 0000 032B        {
; 0000 032C         uart1SendArray(SETUP_MAS,8);
;PCODE: $0000054E VOL: 0
;PCODE: $0000054F VOL: 0
;PCODE: $00000550 VOL: 0
;PCODE: $00000551 VOL: 0
; 0000 032D         flag_transmission=255;
;PCODE: $00000552 VOL: 0
;PCODE: $00000553 VOL: 0
; 0000 032E        }
; 0000 032F        if(flag_transmission==249)
;PCODE: $00000554 VOL: 0
;PCODE: $00000555 VOL: 0
;PCODE: $00000556 VOL: 0
;PCODE: $00000557 VOL: 0
; 0000 0330        {
; 0000 0331         uart1SendArray(CALIBR_MAS,10);
;PCODE: $00000558 VOL: 0
;PCODE: $00000559 VOL: 0
;PCODE: $0000055A VOL: 0
;PCODE: $0000055B VOL: 0
; 0000 0332         flag_transmission=255;
;PCODE: $0000055C VOL: 0
;PCODE: $0000055D VOL: 0
; 0000 0333        }
; 0000 0334       }
;PCODE: $0000055E VOL: 0
;PCODE: $0000055F VOL: 0
; 0000 0335 
; 0000 0336 
; 0000 0337       #asm("cli")
;PCODE: $00000560 VOL: 0
	cli
;PCODE: $00000561 VOL: 0
; 0000 0338       lights(led_cycle*20,0,180-led_cycle*20);
;PCODE: $00000562 VOL: 0
;PCODE: $00000563 VOL: 0
;PCODE: $00000564 VOL: 0
;PCODE: $00000565 VOL: 0
;PCODE: $00000566 VOL: 0
;PCODE: $00000567 VOL: 0
;PCODE: $00000568 VOL: 0
;PCODE: $00000569 VOL: 0
;PCODE: $0000056A VOL: 0
;PCODE: $0000056B VOL: 0
; 0000 0339       #asm("sei")
;PCODE: $0000056C VOL: 0
	sei
;PCODE: $0000056D VOL: 0
; 0000 033A 
; 0000 033B       if(led_cycle==9)
;PCODE: $0000056E VOL: 0
;PCODE: $0000056F VOL: 0
;PCODE: $00000570 VOL: 0
; 0000 033C       flag_led_direction=1;
;PCODE: $00000571 VOL: 0
;PCODE: $00000572 VOL: 0
; 0000 033D 
; 0000 033E       if(led_cycle==0)
;PCODE: $00000573 VOL: 0
;PCODE: $00000574 VOL: 0
;PCODE: $00000575 VOL: 0
; 0000 033F       flag_led_direction=0;
;PCODE: $00000576 VOL: 0
;PCODE: $00000577 VOL: 0
; 0000 0340 
; 0000 0341       if(flag_led_direction==0)
;PCODE: $00000578 VOL: 0
;PCODE: $00000579 VOL: 0
;PCODE: $0000057A VOL: 0
; 0000 0342       led_cycle++;
;PCODE: $0000057B VOL: 0
;PCODE: $0000057C VOL: 0
; 0000 0343       else
;PCODE: $0000057D VOL: 0
;PCODE: $0000057E VOL: 0
; 0000 0344       led_cycle--;
;PCODE: $0000057F VOL: 0
;PCODE: $00000580 VOL: 0
; 0000 0345 
; 0000 0346       if(main_cycle>=9)
;PCODE: $00000581 VOL: 0
;PCODE: $00000582 VOL: 0
;PCODE: $00000583 VOL: 0
;PCODE: $00000584 VOL: 0
; 0000 0347       main_cycle=0;
;PCODE: $00000585 VOL: 0
;PCODE: $00000586 VOL: 0
; 0000 0348       else
;PCODE: $00000587 VOL: 0
;PCODE: $00000588 VOL: 0
; 0000 0349       main_cycle++;
;PCODE: $00000589 VOL: 0
;PCODE: $0000058A VOL: 0
; 0000 034A 
; 0000 034B 
; 0000 034C     }
;PCODE: $0000058B VOL: 0
;PCODE: $0000058C VOL: 0
;PCODE: $0000058D VOL: 0
; 0000 034D }
;PCODE: $0000058E VOL: 0
;PCODE: $0000058F VOL: 0
;PCODE: $00000590 VOL: 0
;PCODE: $00000591 VOL: 0

	.DSEG
_0xA1:
	.BYTE 0x12
;
;
;//SPEED!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
;//SPEED!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
;//SPEED!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
;// External Interrupt 6 service routine
;interrupt [EXT_INT6] void ext_int6_isr(void) //TK_SPEED
; 0000 0355 {

	.CSEG
;PCODE: $00000592 VOL: 0
;PCODE: $00000593 VOL: 0
; 0000 0356  unsigned char H,L;
; 0000 0357  TK_COUNT[0]=TK_COUNT[1];
;PCODE: $00000594 VOL: 0
;PCODE: $00000595 VOL: 0
;	H -> R17
;	L -> R16
;PCODE: $00000596 VOL: 0
;PCODE: $00000597 VOL: 0
;PCODE: $00000598 VOL: 0
; 0000 0358  L=TCNT1L;
;PCODE: $00000599 VOL: 0
;PCODE: $0000059A VOL: 0
; 0000 0359  H=TCNT1H;
;PCODE: $0000059B VOL: 0
;PCODE: $0000059C VOL: 0
; 0000 035A  TK_COUNT[1]=(unsigned long)H*256+(unsigned long)L;
;PCODE: $0000059D VOL: 0
;PCODE: $0000059E VOL: 0
;PCODE: $0000059F VOL: 0
;PCODE: $000005A0 VOL: 0
;PCODE: $000005A1 VOL: 0
;PCODE: $000005A2 VOL: 0
;PCODE: $000005A3 VOL: 0
;PCODE: $000005A4 VOL: 0
;PCODE: $000005A5 VOL: 0
;PCODE: $000005A6 VOL: 0
;PCODE: $000005A7 VOL: 0
;PCODE: $000005A8 VOL: 0
; 0000 035B  if(ovf_TK>0)
;PCODE: $000005A9 VOL: 0
;PCODE: $000005AA VOL: 0
;PCODE: $000005AB VOL: 0
; 0000 035C  {
; 0000 035D   if(ovf_TK==2)
;PCODE: $000005AC VOL: 0
;PCODE: $000005AD VOL: 0
;PCODE: $000005AE VOL: 0
; 0000 035E   {
; 0000 035F    TK_DELTA=0;
;PCODE: $000005AF VOL: 0
;PCODE: $000005B0 VOL: 0
; 0000 0360    TK_COUNT[0]=0;
;PCODE: $000005B1 VOL: 0
;PCODE: $000005B2 VOL: 0
; 0000 0361    TK_COUNT[1]=0;
;PCODE: $000005B3 VOL: 0
;PCODE: $000005B4 VOL: 0
;PCODE: $000005B5 VOL: 0
;PCODE: $000005B6 VOL: 0
; 0000 0362   }
; 0000 0363   else
;PCODE: $000005B7 VOL: 0
;PCODE: $000005B8 VOL: 0
; 0000 0364   {
; 0000 0365    TK_DELTA=(65536-TK_COUNT[0])+TK_COUNT[1];
;PCODE: $000005B9 VOL: 0
;PCODE: $000005BA VOL: 0
;PCODE: $000005BB VOL: 0
;PCODE: $000005BC VOL: 0
;PCODE: $000005BD VOL: 0
;PCODE: $000005BE VOL: 0
;PCODE: $000005BF VOL: 0
;PCODE: $000005C0 VOL: 0
; 0000 0366   }
;PCODE: $000005C1 VOL: 0
; 0000 0367   ovf_TK=0;
;PCODE: $000005C2 VOL: 0
;PCODE: $000005C3 VOL: 0
; 0000 0368  }
; 0000 0369  else
;PCODE: $000005C4 VOL: 0
;PCODE: $000005C5 VOL: 0
; 0000 036A  {
; 0000 036B   TK_DELTA=TK_COUNT[1]-TK_COUNT[0];
;PCODE: $000005C6 VOL: 0
;PCODE: $000005C7 VOL: 0
;PCODE: $000005C8 VOL: 0
;PCODE: $000005C9 VOL: 0
;PCODE: $000005CA VOL: 0
; 0000 036C  }
;PCODE: $000005CB VOL: 0
; 0000 036D }
;PCODE: $000005CC VOL: 0
;PCODE: $000005CD VOL: 0
;PCODE: $000005CE VOL: 0
;PCODE: $000005CF VOL: 0
;
;
;// External Interrupt 7 service routine
;interrupt [EXT_INT7] void ext_int7_isr(void) //IK_SPEED
; 0000 0372 {
;PCODE: $000005D0 VOL: 0
;PCODE: $000005D1 VOL: 0
; 0000 0373  unsigned char H,L;
; 0000 0374  IK_COUNT[0]=IK_COUNT[1];
;PCODE: $000005D2 VOL: 0
;PCODE: $000005D3 VOL: 0
;	H -> R17
;	L -> R16
;PCODE: $000005D4 VOL: 0
;PCODE: $000005D5 VOL: 0
;PCODE: $000005D6 VOL: 0
; 0000 0375  L=TCNT1L;
;PCODE: $000005D7 VOL: 0
;PCODE: $000005D8 VOL: 0
; 0000 0376  H=TCNT1H;
;PCODE: $000005D9 VOL: 0
;PCODE: $000005DA VOL: 0
; 0000 0377  IK_COUNT[1]=(unsigned long)H*256+(unsigned long)L;
;PCODE: $000005DB VOL: 0
;PCODE: $000005DC VOL: 0
;PCODE: $000005DD VOL: 0
;PCODE: $000005DE VOL: 0
;PCODE: $000005DF VOL: 0
;PCODE: $000005E0 VOL: 0
;PCODE: $000005E1 VOL: 0
;PCODE: $000005E2 VOL: 0
;PCODE: $000005E3 VOL: 0
;PCODE: $000005E4 VOL: 0
;PCODE: $000005E5 VOL: 0
;PCODE: $000005E6 VOL: 0
; 0000 0378  if(ovf_IK>0)
;PCODE: $000005E7 VOL: 0
;PCODE: $000005E8 VOL: 0
;PCODE: $000005E9 VOL: 0
; 0000 0379  {
; 0000 037A   if(ovf_IK==2)
;PCODE: $000005EA VOL: 0
;PCODE: $000005EB VOL: 0
;PCODE: $000005EC VOL: 0
; 0000 037B   {
; 0000 037C    IK_DELTA=0;
;PCODE: $000005ED VOL: 0
;PCODE: $000005EE VOL: 0
; 0000 037D    IK_COUNT[0]=0;
;PCODE: $000005EF VOL: 0
;PCODE: $000005F0 VOL: 0
; 0000 037E    IK_COUNT[1]=0;
;PCODE: $000005F1 VOL: 0
;PCODE: $000005F2 VOL: 0
;PCODE: $000005F3 VOL: 0
;PCODE: $000005F4 VOL: 0
; 0000 037F   }
; 0000 0380   else
;PCODE: $000005F5 VOL: 0
;PCODE: $000005F6 VOL: 0
; 0000 0381   {
; 0000 0382    IK_DELTA=(65536-IK_COUNT[0])+IK_COUNT[1];
;PCODE: $000005F7 VOL: 0
;PCODE: $000005F8 VOL: 0
;PCODE: $000005F9 VOL: 0
;PCODE: $000005FA VOL: 0
;PCODE: $000005FB VOL: 0
;PCODE: $000005FC VOL: 0
;PCODE: $000005FD VOL: 0
;PCODE: $000005FE VOL: 0
; 0000 0383   }
;PCODE: $000005FF VOL: 0
; 0000 0384   ovf_IK=0;
;PCODE: $00000600 VOL: 0
;PCODE: $00000601 VOL: 0
; 0000 0385  }
; 0000 0386  else
;PCODE: $00000602 VOL: 0
;PCODE: $00000603 VOL: 0
; 0000 0387  {
; 0000 0388   IK_DELTA=IK_COUNT[1]-IK_COUNT[0];
;PCODE: $00000604 VOL: 0
;PCODE: $00000605 VOL: 0
;PCODE: $00000606 VOL: 0
;PCODE: $00000607 VOL: 0
;PCODE: $00000608 VOL: 0
; 0000 0389  }
;PCODE: $00000609 VOL: 0
; 0000 038A }
;PCODE: $0000060A VOL: 0
;PCODE: $0000060B VOL: 0
;PCODE: $0000060C VOL: 0
;PCODE: $0000060D VOL: 0
;
;
;
;
;
;void init_all(void)
; 0000 0391 {
;PCODE: $0000060E VOL: 0
;PCODE: $0000060F VOL: 0
; 0000 0392 
; 0000 0393  // Port B initialization
; 0000 0394  DDRB.4=1;
;PCODE: $00000610 VOL: 0
;PCODE: $00000611 VOL: 0
; 0000 0395  DDRB.6=1;
;PCODE: $00000612 VOL: 0
;PCODE: $00000613 VOL: 0
; 0000 0396 
; 0000 0397  // Port C initialization
; 0000 0398  // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=Out Func0=Out
; 0000 0399  // State7=T State6=T State5=T State4=T State3=T State2=T State1=0 State0=0
; 0000 039A  PORTC=0x00;
;PCODE: $00000614 VOL: 0
;PCODE: $00000615 VOL: 0
; 0000 039B  DDRC=0x03;
;PCODE: $00000616 VOL: 0
;PCODE: $00000617 VOL: 0
; 0000 039C  PORTC.2=0;//GPS on
;PCODE: $00000618 VOL: 0
;PCODE: $00000619 VOL: 0
; 0000 039D  DDRC.2=1;
;PCODE: $0000061A VOL: 0
;PCODE: $0000061B VOL: 0
; 0000 039E 
; 0000 039F 
; 0000 03A0  // Timer/Counter 0 initialization
; 0000 03A1  // Clock source: System Clock
; 0000 03A2  // Clock value: 1382,400 kHz
; 0000 03A3  // Mode: Phase correct PWM top=0xFF
; 0000 03A4  // OC0 output: Inverted PWM
; 0000 03A5  ASSR=0x00;
;PCODE: $0000061C VOL: 0
;PCODE: $0000061D VOL: 0
; 0000 03A6  TCCR0=0x72;
;PCODE: $0000061E VOL: 0
;PCODE: $0000061F VOL: 0
; 0000 03A7  TCNT0=0x00;
;PCODE: $00000620 VOL: 0
;PCODE: $00000621 VOL: 0
; 0000 03A8  OCR0=255;
;PCODE: $00000622 VOL: 0
;PCODE: $00000623 VOL: 0
; 0000 03A9 
; 0000 03AA  // Timer/Counter 1 initialization
; 0000 03AB // Clock source: System Clock
; 0000 03AC // Clock value: 172,800 kHz
; 0000 03AD // Mode: Normal top=FFFFh
; 0000 03AE // OC1A output: Discon.
; 0000 03AF // OC1B output: Discon.
; 0000 03B0 // OC1C output: Discon.
; 0000 03B1 // Noise Canceler: Off
; 0000 03B2 // Input Capture on Falling Edge
; 0000 03B3 // Timer 1 Overflow Interrupt: On
; 0000 03B4 // Input Capture Interrupt: Off
; 0000 03B5 // Compare A Match Interrupt: Off
; 0000 03B6 // Compare B Match Interrupt: Off
; 0000 03B7 // Compare C Match Interrupt: Off
; 0000 03B8 TCCR1A=0x00;
;PCODE: $00000624 VOL: 0
;PCODE: $00000625 VOL: 0
; 0000 03B9 TCCR1B=0x03;
;PCODE: $00000626 VOL: 0
;PCODE: $00000627 VOL: 0
; 0000 03BA TCNT1H=0x00;
;PCODE: $00000628 VOL: 0
;PCODE: $00000629 VOL: 0
; 0000 03BB TCNT1L=0x00;
;PCODE: $0000062A VOL: 0
;PCODE: $0000062B VOL: 0
; 0000 03BC ICR1H=0x00;
;PCODE: $0000062C VOL: 0
;PCODE: $0000062D VOL: 0
; 0000 03BD ICR1L=0x00;
;PCODE: $0000062E VOL: 0
;PCODE: $0000062F VOL: 0
; 0000 03BE OCR1AH=0x00;
;PCODE: $00000630 VOL: 0
;PCODE: $00000631 VOL: 0
; 0000 03BF OCR1AL=0x00;
;PCODE: $00000632 VOL: 0
;PCODE: $00000633 VOL: 0
; 0000 03C0 OCR1BH=0x00;
;PCODE: $00000634 VOL: 0
;PCODE: $00000635 VOL: 0
; 0000 03C1 OCR1BL=0x00;
;PCODE: $00000636 VOL: 0
;PCODE: $00000637 VOL: 0
; 0000 03C2 OCR1CH=0x00;
;PCODE: $00000638 VOL: 0
;PCODE: $00000639 VOL: 0
; 0000 03C3 OCR1CL=0x00;
;PCODE: $0000063A VOL: 0
;PCODE: $0000063B VOL: 0
; 0000 03C4 
; 0000 03C5 
; 0000 03C6 
; 0000 03C7  // Timer/Counter 2 initialization
; 0000 03C8  // Clock source: System Clock
; 0000 03C9  // Clock value: 10,800 kHz
; 0000 03CA  // Mode: Normal top=0xFF
; 0000 03CB  // OC2 output: Disconnected
; 0000 03CC  TCCR2=0x05;
;PCODE: $0000063C VOL: 0
;PCODE: $0000063D VOL: 0
; 0000 03CD  TCNT2=0x00;
;PCODE: $0000063E VOL: 0
;PCODE: $0000063F VOL: 0
; 0000 03CE  OCR2=0x00;
;PCODE: $00000640 VOL: 0
;PCODE: $00000641 VOL: 0
; 0000 03CF 
; 0000 03D0  // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 03D1  TIMSK=0x44;
;PCODE: $00000642 VOL: 0
;PCODE: $00000643 VOL: 0
; 0000 03D2 
; 0000 03D3  ETIMSK=0x00;
;PCODE: $00000644 VOL: 0
;PCODE: $00000645 VOL: 0
; 0000 03D4 
; 0000 03D5  // External Interrupt(s) initialization
; 0000 03D6  // INT0: Off
; 0000 03D7  // INT1: Off
; 0000 03D8  // INT2: Off
; 0000 03D9  // INT3: Off
; 0000 03DA  // INT4: Off
; 0000 03DB  // INT5: Off
; 0000 03DC  // INT6: On
; 0000 03DD  // INT6 Mode: Rising Edge
; 0000 03DE  // INT7: On
; 0000 03DF  // INT7 Mode: Rising Edge
; 0000 03E0  EICRA=0x00;
;PCODE: $00000646 VOL: 0
;PCODE: $00000647 VOL: 0
; 0000 03E1  EICRB=0xF0;
;PCODE: $00000648 VOL: 0
;PCODE: $00000649 VOL: 0
; 0000 03E2  EIMSK=0xC0;
;PCODE: $0000064A VOL: 0
;PCODE: $0000064B VOL: 0
; 0000 03E3  EIFR=0xC0;
;PCODE: $0000064C VOL: 0
;PCODE: $0000064D VOL: 0
; 0000 03E4 
; 0000 03E5  // USART0 initialization
; 0000 03E6  // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 03E7  // USART0 Receiver: On
; 0000 03E8  // USART0 Transmitter: On
; 0000 03E9  // USART0 Mode: Asynchronous
; 0000 03EA  // USART0 Baud Rate: 9600
; 0000 03EB  UCSR0A=0x00;
;PCODE: $0000064E VOL: 0
;PCODE: $0000064F VOL: 0
; 0000 03EC  UCSR0B=0x98;
;PCODE: $00000650 VOL: 0
;PCODE: $00000651 VOL: 0
; 0000 03ED  UCSR0C=0x06;
;PCODE: $00000652 VOL: 0
;PCODE: $00000653 VOL: 0
; 0000 03EE  UBRR0H=0x00;
;PCODE: $00000654 VOL: 0
;PCODE: $00000655 VOL: 0
; 0000 03EF  UBRR0L=0x47;
;PCODE: $00000656 VOL: 0
;PCODE: $00000657 VOL: 0
; 0000 03F0 
; 0000 03F1  // USART1 initialization
; 0000 03F2  // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 03F3  // USART1 Receiver: On
; 0000 03F4  // USART1 Transmitter: On
; 0000 03F5  // USART1 Mode: Asynchronous
; 0000 03F6  // USART1 Baud Rate: 9600
; 0000 03F7  UCSR1A=0x00;
;PCODE: $00000658 VOL: 0
;PCODE: $00000659 VOL: 0
; 0000 03F8  UCSR1B=0x98;
;PCODE: $0000065A VOL: 0
;PCODE: $0000065B VOL: 0
; 0000 03F9  UCSR1C=0x06;
;PCODE: $0000065C VOL: 0
;PCODE: $0000065D VOL: 0
; 0000 03FA  UBRR1H=0x00;
;PCODE: $0000065E VOL: 0
;PCODE: $0000065F VOL: 0
; 0000 03FB  UBRR1L=0x47;
;PCODE: $00000660 VOL: 0
;PCODE: $00000661 VOL: 0
; 0000 03FC 
; 0000 03FD  // Analog Comparator initialization
; 0000 03FE  // Analog Comparator: Off
; 0000 03FF  // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 0400  ACSR=0x80;
;PCODE: $00000662 VOL: 0
;PCODE: $00000663 VOL: 0
; 0000 0401  SFIOR=0x00;
;PCODE: $00000664 VOL: 0
;PCODE: $00000665 VOL: 0
; 0000 0402 
; 0000 0403  // ADC initialization
; 0000 0404  // ADC Clock frequency: 86,400 kHz
; 0000 0405  // ADC Voltage Reference: Int., cap. on AREF
; 0000 0406  ADMUX=ADC_VREF_TYPE & 0xff;
;PCODE: $00000666 VOL: 0
;PCODE: $00000667 VOL: 0
; 0000 0407  ADCSRA=0x87;
;PCODE: $00000668 VOL: 0
;PCODE: $00000669 VOL: 0
; 0000 0408 }
;PCODE: $0000066A VOL: 0
;PCODE: $0000066B VOL: 0
;
;unsigned int K_BY_KOEFFICIENTS(unsigned int M)
; 0000 040B {
;PCODE: $0000066C VOL: 0
;PCODE: $0000066D VOL: 0
; 0000 040C unsigned long F,W,K;
; 0000 040D //WEIGHT_NULL=6679, LOADCELL_NULL=618, DELTA_WEIGHT10KG=748, DELTA_LOADCELL10KG=772
; 0000 040E if(M<LOADCELL_NULL)
;PCODE: $0000066E VOL: 0
;PCODE: $0000066F VOL: 0
;	M -> Y+12
;	F -> Y+8
;	W -> Y+4
;	K -> Y+0
;PCODE: $00000670 VOL: 0
;PCODE: $00000671 VOL: 0
;PCODE: $00000672 VOL: 0
; 0000 040F  return 0;
;PCODE: $00000673 VOL: 0
;PCODE: $00000674 VOL: 0
;PCODE: $00000675 VOL: 0
; 0000 0410 
; 0000 0411 F=((M-(unsigned long)LOADCELL_NULL)*1000)/((unsigned long)DELTA_LOADCELL10KG);
;PCODE: $00000676 VOL: 0
;PCODE: $00000677 VOL: 0
;PCODE: $00000678 VOL: 0
;PCODE: $00000679 VOL: 0
;PCODE: $0000067A VOL: 0
;PCODE: $0000067B VOL: 0
;PCODE: $0000067C VOL: 0
;PCODE: $0000067D VOL: 0
;PCODE: $0000067E VOL: 0
;PCODE: $0000067F VOL: 0
;PCODE: $00000680 VOL: 0
;PCODE: $00000681 VOL: 0
;PCODE: $00000682 VOL: 0
; 0000 0412 W=(unsigned long)WEIGHT_NULL-((unsigned long)DELTA_WEIGHT10KG*F)/1000;
;PCODE: $00000683 VOL: 0
;PCODE: $00000684 VOL: 0
;PCODE: $00000685 VOL: 0
;PCODE: $00000686 VOL: 0
;PCODE: $00000687 VOL: 0
;PCODE: $00000688 VOL: 0
;PCODE: $00000689 VOL: 0
;PCODE: $0000068A VOL: 0
;PCODE: $0000068B VOL: 0
;PCODE: $0000068C VOL: 0
;PCODE: $0000068D VOL: 0
;PCODE: $0000068E VOL: 0
;PCODE: $0000068F VOL: 0
; 0000 0413 if(W>0)
;PCODE: $00000690 VOL: 0
;PCODE: $00000691 VOL: 0
;PCODE: $00000692 VOL: 0
; 0000 0414  K=(F*1000)/W;
;PCODE: $00000693 VOL: 0
;PCODE: $00000694 VOL: 0
;PCODE: $00000695 VOL: 0
;PCODE: $00000696 VOL: 0
;PCODE: $00000697 VOL: 0
;PCODE: $00000698 VOL: 0
;PCODE: $00000699 VOL: 0
; 0000 0415 else
;PCODE: $0000069A VOL: 0
;PCODE: $0000069B VOL: 0
; 0000 0416  K=1800;
;PCODE: $0000069C VOL: 0
;PCODE: $0000069D VOL: 0
; 0000 0417 
; 0000 0418 if(K>1800)
;PCODE: $0000069E VOL: 0
;PCODE: $0000069F VOL: 0
;PCODE: $000006A0 VOL: 0
;PCODE: $000006A1 VOL: 0
; 0000 0419  K=1800;
;PCODE: $000006A2 VOL: 0
;PCODE: $000006A3 VOL: 0
; 0000 041A return K;
;PCODE: $000006A4 VOL: 0
;PCODE: $000006A5 VOL: 0
;PCODE: $000006A6 VOL: 0
;PCODE: $000006A7 VOL: 0
; 0000 041B }
;PCODE: $000006A8 VOL: 0
;/*
;unsigned int K_BY_TABLE(unsigned int M)
;{
; unsigned char x;
; unsigned int K;
; unsigned int ZERO;
;
; unsigned int W_A[4];
; unsigned int M_A[4];
; unsigned int K_A[4];
;
; //CALIBR_MAS_RESULT[16]={6017,5270,4400,3680,6000,5150,4390,3643,1370,2113,2700,3480,1445,2075,2820,3550}//TELEGA N01
; //unsigned int CALIBR_MAS_RESULT[16]={W_up_10,,,W_up_40,W_down_10,,,W_down_40,M_up_10,,,,,,,M_down_40};// ALL in kg*100
;
; for(x=0;x<4;x++)
; {
;  W_A[x]=(CALIBR_MAS_RESULT[x]+CALIBR_MAS_RESULT[x+4])/2;
;  M_A[x]=(CALIBR_MAS_RESULT[x+8]+CALIBR_MAS_RESULT[x+4+8])/2;
; }
;
; ZERO=M_A[0]-(M_A[3]-M_A[0])/3;
;
; for(x=0;x<4;x++)
; {
; K_A[x]=(1000000*((long)x+1))/(long)W_A[x];
; }
;
; if(M<=ZERO)
;  return 0;
;
; for(x=0;x<4;x++)
; {
;   if((M<M_A[x])||(x==3))
;  {
;    if(x==0)
;   {
;    K=((long)K_A[0]*((long)(M-ZERO)))/((long)(M_A[0]-ZERO));
;     return K;
;   }
;   else
;   {
;     K=K_A[x-1]+(((long)(K_A[x]-K_A[x-1]))*((long)(M-M_A[x-1])))/((long)(M_A[x]-M_A[x-1]));
;     return K;
;   }
;  }
; }
;}
;*/
;
;
;
;void led_zero(void)
; 0000 0450 {
;PCODE: $000006A9 VOL: 0
;PCODE: $000006AA VOL: 0
; 0000 0451     PORTB.6 = 1;
;PCODE: $000006AB VOL: 0
;PCODE: $000006AC VOL: 0
; 0000 0452     #asm("nop");
;PCODE: $000006AD VOL: 0
	nop
;PCODE: $000006AE VOL: 0
; 0000 0453     PORTB.6 = 0;
;PCODE: $000006AF VOL: 0
;PCODE: $000006B0 VOL: 0
; 0000 0454     #asm("nop");
;PCODE: $000006B1 VOL: 0
	nop
;PCODE: $000006B2 VOL: 0
; 0000 0455     #asm("nop");
;PCODE: $000006B3 VOL: 0
	nop
;PCODE: $000006B4 VOL: 0
; 0000 0456     #asm("nop");
;PCODE: $000006B5 VOL: 0
	nop
;PCODE: $000006B6 VOL: 0
; 0000 0457 }
;PCODE: $000006B7 VOL: 0
;PCODE: $000006B8 VOL: 0
;
;void led_one(void)
; 0000 045A {
;PCODE: $000006B9 VOL: 0
;PCODE: $000006BA VOL: 0
; 0000 045B     PORTB.6 = 1;
;PCODE: $000006BB VOL: 0
;PCODE: $000006BC VOL: 0
; 0000 045C     #asm("nop");
;PCODE: $000006BD VOL: 0
	nop
;PCODE: $000006BE VOL: 0
; 0000 045D     #asm("nop");
;PCODE: $000006BF VOL: 0
	nop
;PCODE: $000006C0 VOL: 0
; 0000 045E     #asm("nop");
;PCODE: $000006C1 VOL: 0
	nop
;PCODE: $000006C2 VOL: 0
; 0000 045F     #asm("nop");
;PCODE: $000006C3 VOL: 0
	nop
;PCODE: $000006C4 VOL: 0
; 0000 0460     PORTB.6 = 0;
;PCODE: $000006C5 VOL: 0
;PCODE: $000006C6 VOL: 0
; 0000 0461 }
;PCODE: $000006C7 VOL: 0
;PCODE: $000006C8 VOL: 0
;
;void lights(char G, char R, char B)
; 0000 0464 {
;PCODE: $000006C9 VOL: 0
;PCODE: $000006CA VOL: 0
; 0000 0465     unsigned char i;
; 0000 0466     for(i = 0b10000000; i >= 0b00000001; i = i >> 1)
;PCODE: $000006CB VOL: 0
;PCODE: $000006CC VOL: 0
;	G -> Y+3
;	R -> Y+2
;	B -> Y+1
;	i -> R17
;PCODE: $000006CD VOL: 0
;PCODE: $000006CE VOL: 0
;PCODE: $000006CF VOL: 0
;PCODE: $000006D0 VOL: 0
;PCODE: $000006D1 VOL: 0
;PCODE: $000006D2 VOL: 0
;PCODE: $000006D3 VOL: 0
;PCODE: $000006D4 VOL: 0
; 0000 0467     {
; 0000 0468         if((G & i) > 0)
;PCODE: $000006D5 VOL: 0
;PCODE: $000006D6 VOL: 0
;PCODE: $000006D7 VOL: 0
;PCODE: $000006D8 VOL: 0
;PCODE: $000006D9 VOL: 0
; 0000 0469             led_one();
;PCODE: $000006DA VOL: 0
; 0000 046A         else
;PCODE: $000006DB VOL: 0
;PCODE: $000006DC VOL: 0
; 0000 046B             led_zero();
;PCODE: $000006DD VOL: 0
; 0000 046C     }
;PCODE: $000006DE VOL: 0
;PCODE: $000006DF VOL: 0
;PCODE: $000006E0 VOL: 0
;PCODE: $000006E1 VOL: 0
;PCODE: $000006E2 VOL: 0
; 0000 046D 
; 0000 046E     for(i = 0b10000000; i >= 0b00000001; i = i >> 1)
;PCODE: $000006E3 VOL: 0
;PCODE: $000006E4 VOL: 0
;PCODE: $000006E5 VOL: 0
;PCODE: $000006E6 VOL: 0
;PCODE: $000006E7 VOL: 0
;PCODE: $000006E8 VOL: 0
;PCODE: $000006E9 VOL: 0
;PCODE: $000006EA VOL: 0
; 0000 046F     {
; 0000 0470         if((R & i) > 0)
;PCODE: $000006EB VOL: 0
;PCODE: $000006EC VOL: 0
;PCODE: $000006ED VOL: 0
;PCODE: $000006EE VOL: 0
;PCODE: $000006EF VOL: 0
; 0000 0471             led_one();
;PCODE: $000006F0 VOL: 0
; 0000 0472         else
;PCODE: $000006F1 VOL: 0
;PCODE: $000006F2 VOL: 0
; 0000 0473             led_zero();
;PCODE: $000006F3 VOL: 0
; 0000 0474     }
;PCODE: $000006F4 VOL: 0
;PCODE: $000006F5 VOL: 0
;PCODE: $000006F6 VOL: 0
;PCODE: $000006F7 VOL: 0
;PCODE: $000006F8 VOL: 0
; 0000 0475 
; 0000 0476     for(i = 0b10000000; i >= 0b00000001; i = i >> 1)
;PCODE: $000006F9 VOL: 0
;PCODE: $000006FA VOL: 0
;PCODE: $000006FB VOL: 0
;PCODE: $000006FC VOL: 0
;PCODE: $000006FD VOL: 0
;PCODE: $000006FE VOL: 0
;PCODE: $000006FF VOL: 0
;PCODE: $00000700 VOL: 0
; 0000 0477     {
; 0000 0478         if((B & i) > 0)
;PCODE: $00000701 VOL: 0
;PCODE: $00000702 VOL: 0
;PCODE: $00000703 VOL: 0
;PCODE: $00000704 VOL: 0
;PCODE: $00000705 VOL: 0
; 0000 0479             led_one();
;PCODE: $00000706 VOL: 0
; 0000 047A         else
;PCODE: $00000707 VOL: 0
;PCODE: $00000708 VOL: 0
; 0000 047B             led_zero();
;PCODE: $00000709 VOL: 0
; 0000 047C     }
;PCODE: $0000070A VOL: 0
;PCODE: $0000070B VOL: 0
;PCODE: $0000070C VOL: 0
;PCODE: $0000070D VOL: 0
;PCODE: $0000070E VOL: 0
; 0000 047D }
;PCODE: $0000070F VOL: 0
;PCODE: $00000710 VOL: 0
;PCODE: $00000711 VOL: 0
;PCODE: $00000712 VOL: 0
;PCODE: $00000713 VOL: 0
;
